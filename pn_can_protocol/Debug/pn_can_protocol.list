
pn_can_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000098  08004a88  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004a88  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085cd  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d47  00000000  00000000  0002868e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001860f  00000000  00000000  0002b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009deb  00000000  00000000  00043b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008633e  00000000  00000000  0004d8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3c38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000d3c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004024 	.word	0x08004024

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004024 	.word	0x08004024

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fab4 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ae 	bl	80002b8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8000164:	f002 fe70 	bl	8002e48 <init>
  while (1)
  {
	  loop();
 8000168:	f002 fea2 	bl	8002eb0 <loop>
 800016c:	e7fc      	b.n	8000168 <main+0x1c>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b090      	sub	sp, #64	; 0x40
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0318 	add.w	r3, r7, #24
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 fecd 	bl	8002f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000190:	2301      	movs	r3, #1
 8000192:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000198:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019a:	2300      	movs	r3, #0
 800019c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 fbf4 	bl	80019a4 <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c2:	f000 f8db 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ca:	2302      	movs	r3, #2
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fe61 	bl	8001ea8 <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ec:	f000 f8c6 	bl	800037c <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	3740      	adds	r7, #64	; 0x40
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <MX_CAN_Init+0x64>)
 80001fe:	4a18      	ldr	r2, [pc, #96]	; (8000260 <MX_CAN_Init+0x68>)
 8000200:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN_Init+0x64>)
 8000204:	2208      	movs	r2, #8
 8000206:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <MX_CAN_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_CAN_Init+0x64>)
 8000216:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800021a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN_Init+0x64>)
 800021e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000222:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN_Init+0x64>)
 800022c:	2201      	movs	r2, #1
 800022e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN_Init+0x64>)
 8000238:	2201      	movs	r2, #1
 800023a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN_Init+0x64>)
 800024a:	f000 fabd 	bl	80007c8 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000254:	f000 f892 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200000b4 	.word	0x200000b4
 8000260:	40006400 	.word	0x40006400

08000264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART1_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800029c:	f001 ff9c 	bl	80021d8 <HAL_HalfDuplex_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f869 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000dc 	.word	0x200000dc
 80002b4:	40013800 	.word	0x40013800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <MX_GPIO_Init+0x90>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <MX_GPIO_Init+0x90>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <MX_GPIO_Init+0x90>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <MX_GPIO_Init+0x94>)
 800031c:	f001 fb2a 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_GPIO_Init+0x94>)
 800033a:	f001 f997 	bl	800166c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033e:	bf00      	nop
 8000340:	3720      	adds	r7, #32
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40011000 	.word	0x40011000

08000350 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd,char*data,int len){
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	b29a      	uxth	r2, r3
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	4804      	ldr	r0, [pc, #16]	; (8000378 <_write+0x28>)
 8000368:	f001 ff8b 	bl	8002282 <HAL_UART_Transmit>
	return len;
 800036c:	687b      	ldr	r3, [r7, #4]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000dc 	.word	0x200000dc

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>
	...

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <HAL_MspInit+0x40>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <HAL_MspInit+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_MspInit+0x40>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_MspInit+0x40>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a20      	ldr	r2, [pc, #128]	; (8000468 <HAL_CAN_MspInit+0x9c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d139      	bne.n	8000460 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <HAL_CAN_MspInit+0xa0>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	4a1e      	ldr	r2, [pc, #120]	; (800046c <HAL_CAN_MspInit+0xa0>)
 80003f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f6:	61d3      	str	r3, [r2, #28]
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <HAL_CAN_MspInit+0xa0>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <HAL_CAN_MspInit+0xa0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a18      	ldr	r2, [pc, #96]	; (800046c <HAL_CAN_MspInit+0xa0>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <HAL_CAN_MspInit+0xa0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800041c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	480f      	ldr	r0, [pc, #60]	; (8000470 <HAL_CAN_MspInit+0xa4>)
 8000432:	f001 f91b 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043c:	2302      	movs	r3, #2
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4809      	ldr	r0, [pc, #36]	; (8000470 <HAL_CAN_MspInit+0xa4>)
 800044c:	f001 f90e 	bl	800166c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2014      	movs	r0, #20
 8000456:	f001 f8d2 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800045a:	2014      	movs	r0, #20
 800045c:	f001 f8eb 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40006400 	.word	0x40006400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800

08000474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <HAL_UART_MspInit+0x74>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d124      	bne.n	80004de <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_UART_MspInit+0x78>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <HAL_UART_MspInit+0x78>)
 800049a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_UART_MspInit+0x78>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_UART_MspInit+0x78>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_UART_MspInit+0x78>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_UART_MspInit+0x78>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ca:	2312      	movs	r3, #18
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ce:	2303      	movs	r3, #3
 80004d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_UART_MspInit+0x7c>)
 80004da:	f001 f8c7 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40013800 	.word	0x40013800
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <NMI_Handler+0x4>

080004fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler+0x4>

08000506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <BusFault_Handler+0x4>

0800050c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <UsageFault_Handler+0x4>

08000512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053a:	f000 f905 	bl	8000748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	canRxInterrupt();
 8000548:	f002 fbd8 	bl	8002cfc <canRxInterrupt>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 800054e:	f000 fd53 	bl	8000ff8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000b4 	.word	0x200000b4

0800055c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e00a      	b.n	8000584 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800056e:	f3af 8000 	nop.w
 8000572:	4601      	mov	r1, r0
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	60ba      	str	r2, [r7, #8]
 800057a:	b2ca      	uxtb	r2, r1
 800057c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbf0      	blt.n	800056e <_read+0x12>
  }

  return len;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005bc:	605a      	str	r2, [r3, #4]
  return 0;
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <_isatty>:

int _isatty(int file)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
	...

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f002 fc4e 	bl	8002ec8 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20005000 	.word	0x20005000
 8000658:	00000400 	.word	0x00000400
 800065c:	20000120 	.word	0x20000120
 8000660:	200001a0 	.word	0x200001a0

08000664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff ffe5 	bl	8000664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 fc1b 	bl	8002ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fd55 	bl	800014c <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80006ac:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 80006b0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80006b4:	2000019c 	.word	0x2000019c

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>
	...

080006bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_Init+0x28>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_Init+0x28>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 ff8b 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d2:	200f      	movs	r0, #15
 80006d4:	f000 f808 	bl	80006e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d8:	f7ff fe56 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_InitTick+0x54>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x58>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000702:	fbb2 f3f3 	udiv	r3, r2, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ffa3 	bl	8001652 <HAL_SYSTICK_Config>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e00e      	b.n	8000734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d80a      	bhi.n	8000732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	f04f 30ff 	mov.w	r0, #4294967295
 8000724:	f000 ff6b 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000728:	4a06      	ldr	r2, [pc, #24]	; (8000744 <HAL_InitTick+0x5c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	e000      	b.n	8000734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000000 	.word	0x20000000
 8000740:	20000008 	.word	0x20000008
 8000744:	20000004 	.word	0x20000004

08000748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <HAL_IncTick+0x20>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000008 	.word	0x20000008
 8000768:	20000124 	.word	0x20000124

0800076c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000124 	.word	0x20000124

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff fff0 	bl	800076c <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_Delay+0x44>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffe0 	bl	800076c <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008

080007c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e0ed      	b.n	80009b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fdf0 	bl	80003cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0201 	orr.w	r2, r2, #1
 80007fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007fc:	f7ff ffb6 	bl	800076c <HAL_GetTick>
 8000800:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000802:	e012      	b.n	800082a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000804:	f7ff ffb2 	bl	800076c <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b0a      	cmp	r3, #10
 8000810:	d90b      	bls.n	800082a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2205      	movs	r2, #5
 8000822:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e0c5      	b.n	80009b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0e5      	beq.n	8000804 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0202 	bic.w	r2, r2, #2
 8000846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000848:	f7ff ff90 	bl	800076c <HAL_GetTick>
 800084c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800084e:	e012      	b.n	8000876 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000850:	f7ff ff8c 	bl	800076c <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	2b0a      	cmp	r3, #10
 800085c:	d90b      	bls.n	8000876 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000862:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2205      	movs	r2, #5
 800086e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e09f      	b.n	80009b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1e5      	bne.n	8000850 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7e1b      	ldrb	r3, [r3, #24]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d108      	bne.n	800089e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e007      	b.n	80008ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7e5b      	ldrb	r3, [r3, #25]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d108      	bne.n	80008c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e007      	b.n	80008d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7e9b      	ldrb	r3, [r3, #26]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d108      	bne.n	80008f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 0220 	orr.w	r2, r2, #32
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	e007      	b.n	8000902 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f022 0220 	bic.w	r2, r2, #32
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7edb      	ldrb	r3, [r3, #27]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d108      	bne.n	800091c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0210 	bic.w	r2, r2, #16
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	e007      	b.n	800092c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0210 	orr.w	r2, r2, #16
 800092a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7f1b      	ldrb	r3, [r3, #28]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d108      	bne.n	8000946 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0208 	orr.w	r2, r2, #8
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	e007      	b.n	8000956 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f022 0208 	bic.w	r2, r2, #8
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7f5b      	ldrb	r3, [r3, #29]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d108      	bne.n	8000970 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0204 	orr.w	r2, r2, #4
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e007      	b.n	8000980 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0204 	bic.w	r2, r2, #4
 800097e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	431a      	orrs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	431a      	orrs	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	ea42 0103 	orr.w	r1, r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80009be:	b480      	push	{r7}
 80009c0:	b087      	sub	sp, #28
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d003      	beq.n	80009e4 <HAL_CAN_ConfigFilter+0x26>
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	f040 80aa 	bne.w	8000b38 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009ea:	f043 0201 	orr.w	r2, r3, #1
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d123      	bne.n	8000a66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	401a      	ands	r2, r3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3248      	adds	r2, #72	; 0x48
 8000a46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a5c:	6979      	ldr	r1, [r7, #20]
 8000a5e:	3348      	adds	r3, #72	; 0x48
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	440b      	add	r3, r1
 8000a64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d122      	bne.n	8000ab4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3248      	adds	r2, #72	; 0x48
 8000a94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aaa:	6979      	ldr	r1, [r7, #20]
 8000aac:	3348      	adds	r3, #72	; 0x48
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d109      	bne.n	8000ad0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ace:	e007      	b.n	8000ae0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d109      	bne.n	8000afc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000afa:	e007      	b.n	8000b0c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	431a      	orrs	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6a1b      	ldr	r3, [r3, #32]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d107      	bne.n	8000b24 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b2a:	f023 0201 	bic.w	r2, r3, #1
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e006      	b.n	8000b46 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
  }
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	371c      	adds	r7, #28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d12e      	bne.n	8000bc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2202      	movs	r2, #2
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0201 	bic.w	r2, r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b7c:	f7ff fdf6 	bl	800076c <HAL_GetTick>
 8000b80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b82:	e012      	b.n	8000baa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b84:	f7ff fdf2 	bl	800076c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b0a      	cmp	r3, #10
 8000b90:	d90b      	bls.n	8000baa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e012      	b.n	8000bd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e5      	bne.n	8000b84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e006      	b.n	8000bd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
  }
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bf6:	7ffb      	ldrb	r3, [r7, #31]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d003      	beq.n	8000c04 <HAL_CAN_AddTxMessage+0x2c>
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	f040 80b8 	bne.w	8000d74 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10a      	bne.n	8000c24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80a0 	beq.w	8000d64 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	0e1b      	lsrs	r3, r3, #24
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d907      	bls.n	8000c44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e09e      	b.n	8000d82 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c44:	2201      	movs	r2, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	6809      	ldr	r1, [r1, #0]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	440b      	add	r3, r1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e00f      	b.n	8000c92 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	440b      	add	r3, r1
 8000c90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	7d1b      	ldrb	r3, [r3, #20]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d111      	bne.n	8000cd2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	3304      	adds	r3, #4
 8000cd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3307      	adds	r3, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	061a      	lsls	r2, r3, #24
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3306      	adds	r3, #6
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3305      	adds	r3, #5
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	4313      	orrs	r3, r2
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	3204      	adds	r2, #4
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	6811      	ldr	r1, [r2, #0]
 8000cfa:	ea43 0200 	orr.w	r2, r3, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	440b      	add	r3, r1
 8000d04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	061a      	lsls	r2, r3, #24
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3302      	adds	r3, #2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	4313      	orrs	r3, r2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	ea43 0200 	orr.w	r2, r3, r0
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	440b      	add	r3, r1
 8000d3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3318      	adds	r3, #24
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	6811      	ldr	r1, [r2, #0]
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3318      	adds	r3, #24
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	440b      	add	r3, r1
 8000d5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e00e      	b.n	8000d82 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e006      	b.n	8000d82 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
  }
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d003      	beq.n	8000db0 <HAL_CAN_GetRxMessage+0x24>
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	f040 80f3 	bne.w	8000f96 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10e      	bne.n	8000dd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d116      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e0e7      	b.n	8000fa4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d107      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0d8      	b.n	8000fa4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	331b      	adds	r3, #27
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0204 	and.w	r2, r3, #4
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10c      	bne.n	8000e2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	331b      	adds	r3, #27
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e00b      	b.n	8000e42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	331b      	adds	r3, #27
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	331b      	adds	r3, #27
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0202 	and.w	r2, r3, #2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	331b      	adds	r3, #27
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4413      	add	r3, r2
 8000e64:	3304      	adds	r3, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 020f 	and.w	r2, r3, #15
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	331b      	adds	r3, #27
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	3304      	adds	r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	0a1a      	lsrs	r2, r3, #8
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0c1a      	lsrs	r2, r3, #16
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	0e1a      	lsrs	r2, r3, #24
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3303      	adds	r3, #3
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	4413      	add	r3, r2
 8000f0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3304      	adds	r3, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0a1a      	lsrs	r2, r3, #8
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3305      	adds	r3, #5
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0c1a      	lsrs	r2, r3, #16
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e1a      	lsrs	r2, r3, #24
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3307      	adds	r3, #7
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d108      	bne.n	8000f82 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	e007      	b.n	8000f92 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0220 	orr.w	r2, r2, #32
 8000f90:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e006      	b.n	8000fa4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
  }
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d002      	beq.n	8000fcc <HAL_CAN_ActivateNotification+0x1e>
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d109      	bne.n	8000fe0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6959      	ldr	r1, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e006      	b.n	8000fee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d07c      	beq.n	8001138 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d023      	beq.n	8001090 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f983 	bl	8001366 <HAL_CAN_TxMailbox0CompleteCallback>
 8001060:	e016      	b.n	8001090 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	e00c      	b.n	8001090 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	e002      	b.n	8001090 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f986 	bl	800139c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d024      	beq.n	80010e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f962 	bl	8001378 <HAL_CAN_TxMailbox1CompleteCallback>
 80010b4:	e016      	b.n	80010e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	e00c      	b.n	80010e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	e002      	b.n	80010e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f965 	bl	80013ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d024      	beq.n	8001138 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f941 	bl	800138a <HAL_CAN_TxMailbox2CompleteCallback>
 8001108:	e016      	b.n	8001138 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	e00c      	b.n	8001138 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
 8001130:	e002      	b.n	8001138 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f944 	bl	80013c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00c      	beq.n	800115c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2210      	movs	r2, #16
 800115a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2208      	movs	r2, #8
 8001176:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f933 	bl	80013e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f91b 	bl	80013d2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00c      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2210      	movs	r2, #16
 80011be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2208      	movs	r2, #8
 80011da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f913 	bl	8001408 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d009      	beq.n	8001200 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f8fb 	bl	80013f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2210      	movs	r2, #16
 800121a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f8fc 	bl	800141a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2208      	movs	r2, #8
 800123c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8f4 	bl	800142c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d07b      	beq.n	8001346 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d072      	beq.n	800133e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d043      	beq.n	800133e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03e      	beq.n	800133e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012c6:	2b60      	cmp	r3, #96	; 0x60
 80012c8:	d02b      	beq.n	8001322 <HAL_CAN_IRQHandler+0x32a>
 80012ca:	2b60      	cmp	r3, #96	; 0x60
 80012cc:	d82e      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012ce:	2b50      	cmp	r3, #80	; 0x50
 80012d0:	d022      	beq.n	8001318 <HAL_CAN_IRQHandler+0x320>
 80012d2:	2b50      	cmp	r3, #80	; 0x50
 80012d4:	d82a      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012d6:	2b40      	cmp	r3, #64	; 0x40
 80012d8:	d019      	beq.n	800130e <HAL_CAN_IRQHandler+0x316>
 80012da:	2b40      	cmp	r3, #64	; 0x40
 80012dc:	d826      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012de:	2b30      	cmp	r3, #48	; 0x30
 80012e0:	d010      	beq.n	8001304 <HAL_CAN_IRQHandler+0x30c>
 80012e2:	2b30      	cmp	r3, #48	; 0x30
 80012e4:	d822      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d002      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x2f8>
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d005      	beq.n	80012fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012ee:	e01d      	b.n	800132c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012f8:	e019      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001302:	e014      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f043 0320 	orr.w	r3, r3, #32
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800130c:	e00f      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001316:	e00a      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001320:	e005      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800132a:	e000      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            break;
 800132c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699a      	ldr	r2, [r3, #24]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800133c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2204      	movs	r2, #4
 8001344:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f870 	bl	800143e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4906      	ldr	r1, [pc, #24]	; (80014e8 <__NVIC_EnableIRQ+0x34>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff90 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff2d 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff42 	bl	8001498 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff90 	bl	8001540 <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5f 	bl	80014ec <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff35 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b08b      	sub	sp, #44	; 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e169      	b.n	8001954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001680:	2201      	movs	r2, #1
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8158 	bne.w	800194e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a9a      	ldr	r2, [pc, #616]	; (800190c <HAL_GPIO_Init+0x2a0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016a8:	4a98      	ldr	r2, [pc, #608]	; (800190c <HAL_GPIO_Init+0x2a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d875      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ae:	4a98      	ldr	r2, [pc, #608]	; (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d058      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016b4:	4a96      	ldr	r2, [pc, #600]	; (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d86f      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ba:	4a96      	ldr	r2, [pc, #600]	; (8001914 <HAL_GPIO_Init+0x2a8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d052      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016c0:	4a94      	ldr	r2, [pc, #592]	; (8001914 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d869      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016c6:	4a94      	ldr	r2, [pc, #592]	; (8001918 <HAL_GPIO_Init+0x2ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04c      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016cc:	4a92      	ldr	r2, [pc, #584]	; (8001918 <HAL_GPIO_Init+0x2ac>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d863      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016d2:	4a92      	ldr	r2, [pc, #584]	; (800191c <HAL_GPIO_Init+0x2b0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d046      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016d8:	4a90      	ldr	r2, [pc, #576]	; (800191c <HAL_GPIO_Init+0x2b0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d85d      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d82a      	bhi.n	8001738 <HAL_GPIO_Init+0xcc>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d859      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <HAL_GPIO_Init+0x80>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001741 	.word	0x08001741
 80016f4:	08001753 	.word	0x08001753
 80016f8:	08001795 	.word	0x08001795
 80016fc:	0800179b 	.word	0x0800179b
 8001700:	0800179b 	.word	0x0800179b
 8001704:	0800179b 	.word	0x0800179b
 8001708:	0800179b 	.word	0x0800179b
 800170c:	0800179b 	.word	0x0800179b
 8001710:	0800179b 	.word	0x0800179b
 8001714:	0800179b 	.word	0x0800179b
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	0800179b 	.word	0x0800179b
 8001728:	0800179b 	.word	0x0800179b
 800172c:	0800179b 	.word	0x0800179b
 8001730:	08001749 	.word	0x08001749
 8001734:	0800175d 	.word	0x0800175d
 8001738:	4a79      	ldr	r2, [pc, #484]	; (8001920 <HAL_GPIO_Init+0x2b4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173e:	e02c      	b.n	800179a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e029      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	3304      	adds	r3, #4
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e024      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	3308      	adds	r3, #8
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e01f      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	330c      	adds	r3, #12
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e01a      	b.n	800179c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176e:	2304      	movs	r3, #4
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e013      	b.n	800179c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	611a      	str	r2, [r3, #16]
          break;
 8001786:	e009      	b.n	800179c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	615a      	str	r2, [r3, #20]
          break;
 8001792:	e003      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x130>
          break;
 800179a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d801      	bhi.n	80017a6 <HAL_GPIO_Init+0x13a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_Init+0x13e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d802      	bhi.n	80017b8 <HAL_GPIO_Init+0x14c>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x152>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	3b08      	subs	r3, #8
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	210f      	movs	r1, #15
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80b1 	beq.w	800194e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <HAL_GPIO_Init+0x2c0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <HAL_GPIO_Init+0x2c8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3d      	ldr	r2, [pc, #244]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e0>
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 800184c:	2304      	movs	r3, #4
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	492f      	ldr	r1, [pc, #188]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	492c      	ldr	r1, [pc, #176]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4928      	ldr	r1, [pc, #160]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4922      	ldr	r1, [pc, #136]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	491e      	ldr	r1, [pc, #120]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4918      	ldr	r1, [pc, #96]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4914      	ldr	r1, [pc, #80]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d021      	beq.n	8001940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
 8001908:	e021      	b.n	800194e <HAL_GPIO_Init+0x2e2>
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40011400 	.word	0x40011400
 800193c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_GPIO_Init+0x304>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <HAL_GPIO_Init+0x304>)
 800194a:	4013      	ands	r3, r2
 800194c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae8e 	bne.w	8001680 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	; 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e272      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
 80019dc:	4b8c      	ldr	r3, [pc, #560]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d10b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d168      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e24c      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7f      	ldr	r2, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbc>
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe fe74 	bl	800076c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7fe fe70 	bl	800076c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e200      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7fe fe60 	bl	800076c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7fe fe5c 	bl	800076c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1ec      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x10c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1c0      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7fe fe15 	bl	800076c <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7fe fe11 	bl	800076c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1a1      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe fdf4 	bl	800076c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7fe fdf0 	bl	800076c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e180      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fdd4 	bl	800076c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7fe fdd0 	bl	800076c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e160      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fad8 	bl	800219c <RCC_Delay>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7fe fdba 	bl	800076c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7fe fdb6 	bl	800076c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e146      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	42420000 	.word	0x42420000
 8001c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a87      	ldr	r2, [pc, #540]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fd77 	bl	800076c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7fe fd73 	bl	800076c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e103      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a69      	ldr	r2, [pc, #420]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01c      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x356>
 8001ce0:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a60      	ldr	r2, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a5d      	ldr	r2, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a57      	ldr	r2, [pc, #348]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fd27 	bl	800076c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe fd23 	bl	800076c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0b1      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ee      	beq.n	8001d22 <HAL_RCC_OscConfig+0x37e>
 8001d44:	e014      	b.n	8001d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7fe fd11 	bl	800076c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fd0d 	bl	800076c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e09b      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8087 	beq.w	8001e9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d061      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d146      	bne.n	8001e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fce1 	bl	800076c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fcdd 	bl	800076c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e06d      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4921      	ldr	r1, [pc, #132]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a19      	ldr	r1, [r3, #32]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe fcb1 	bl	800076c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe fcad 	bl	800076c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e03d      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
 8001e2c:	e035      	b.n	8001e9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fc9a 	bl	800076c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe fc96 	bl	800076c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e026      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x498>
 8001e5a:	e01e      	b.n	8001e9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e019      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x500>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0d0      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4965      	ldr	r1, [pc, #404]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b8      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d040      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d115      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07f      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e073      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06b      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4936      	ldr	r1, [pc, #216]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fbe8 	bl	800076c <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fbe4 	bl	800076c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e053      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d210      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4922      	ldr	r1, [pc, #136]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e032      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4916      	ldr	r1, [pc, #88]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002036:	f000 f821 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1cc>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1d0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fb46 	bl	80006e8 <HAL_InitTick>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	080048e8 	.word	0x080048e8
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b490      	push	{r4, r7}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002082:	4b29      	ldr	r3, [pc, #164]	; (8002128 <HAL_RCC_GetSysClockFreq+0xac>)
 8002084:	1d3c      	adds	r4, r7, #4
 8002086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800208c:	f240 2301 	movw	r3, #513	; 0x201
 8002090:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x46>
 80020ba:	e02b      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020be:	623b      	str	r3, [r7, #32]
      break;
 80020c0:	e02b      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3328      	adds	r3, #40	; 0x28
 80020cc:	443b      	add	r3, r7
 80020ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0c5b      	lsrs	r3, r3, #17
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	3328      	adds	r3, #40	; 0x28
 80020ea:	443b      	add	r3, r7
 80020ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f6:	fb03 f202 	mul.w	r2, r3, r2
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc90      	pop	{r4, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	0800403c 	.word	0x0800403c
 800212c:	40021000 	.word	0x40021000
 8002130:	007a1200 	.word	0x007a1200
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	080048f8 	.word	0x080048f8

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	080048f8 	.word	0x080048f8

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000000 	.word	0x20000000
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e047      	b.n	800227a <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe f938 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f90d 	bl	800243c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002240:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0208 	orr.w	r2, r2, #8
 8002250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b08a      	sub	sp, #40	; 0x28
 8002286:	af02      	add	r7, sp, #8
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d17c      	bne.n	800239c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_UART_Transmit+0x2c>
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e075      	b.n	800239e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Transmit+0x3e>
 80022bc:	2302      	movs	r3, #2
 80022be:	e06e      	b.n	800239e <HAL_UART_Transmit+0x11c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	; 0x21
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d6:	f7fe fa49 	bl	800076c <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f0:	d108      	bne.n	8002304 <HAL_UART_Transmit+0x82>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e003      	b.n	800230c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002314:	e02a      	b.n	800236c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2200      	movs	r2, #0
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f840 	bl	80023a6 <UART_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e036      	b.n	800239e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3302      	adds	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	e007      	b.n	800235e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3301      	adds	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1cf      	bne.n	8002316 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2200      	movs	r2, #0
 800237e:	2140      	movs	r1, #64	; 0x40
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f810 	bl	80023a6 <UART_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e006      	b.n	800239e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b6:	e02c      	b.n	8002412 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d028      	beq.n	8002412 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023c6:	f7fe f9d1 	bl	800076c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d21d      	bcs.n	8002412 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e00f      	b.n	8002432 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4013      	ands	r3, r2
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	429a      	cmp	r2, r3
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d0c3      	beq.n	80023b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002476:	f023 030c 	bic.w	r3, r3, #12
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	430b      	orrs	r3, r1
 8002482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2c      	ldr	r2, [pc, #176]	; (8002550 <UART_SetConfig+0x114>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024a4:	f7ff fe66 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	e002      	b.n	80024b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024ac:	f7ff fe4e 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 80024b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <UART_SetConfig+0x118>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	0119      	lsls	r1, r3, #4
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009a      	lsls	r2, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <UART_SetConfig+0x118>)
 80024ea:	fba3 0302 	umull	r0, r3, r3, r2
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	fb00 f303 	mul.w	r3, r0, r3
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <UART_SetConfig+0x118>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	4419      	add	r1, r3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	009a      	lsls	r2, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <UART_SetConfig+0x118>)
 8002522:	fba3 0302 	umull	r0, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	fb00 f303 	mul.w	r3, r0, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	3332      	adds	r3, #50	; 0x32
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <UART_SetConfig+0x118>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	f003 020f 	and.w	r2, r3, #15
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	440a      	add	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013800 	.word	0x40013800
 8002554:	51eb851f 	.word	0x51eb851f

08002558 <console>:
/******************CONSOLE*****************************/
typedef enum {
	CONSOLE_ERROR, CONSOLE_INFO, CONSOLE_WARNING
} ConsoleStatus;
static void console(ConsoleStatus status, const char *func_name,
		const char *msg, ...) {
 8002558:	b40c      	push	{r2, r3}
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	6039      	str	r1, [r7, #0]
 8002564:	71fb      	strb	r3, [r7, #7]
	if (status == CONSOLE_INFO)
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d023      	beq.n	80025b4 <console+0x5c>
		return;
	//TODO make naked and show all registers
	if (status == CONSOLE_ERROR) {
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <console+0x24>
		printf("sync_layer_can.c|%s> ERROR :", func_name);
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	4813      	ldr	r0, [pc, #76]	; (80025c4 <console+0x6c>)
 8002576:	f000 fdb5 	bl	80030e4 <iprintf>
 800257a:	e013      	b.n	80025a4 <console+0x4c>
	} else if (status == CONSOLE_INFO) {
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d104      	bne.n	800258c <console+0x34>
		printf("sync_layer_can.c|%s> INFO : ", func_name);
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	4810      	ldr	r0, [pc, #64]	; (80025c8 <console+0x70>)
 8002586:	f000 fdad 	bl	80030e4 <iprintf>
 800258a:	e00b      	b.n	80025a4 <console+0x4c>
	} else if (status == CONSOLE_WARNING) {
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d104      	bne.n	800259c <console+0x44>
		printf("sync_layer_can.c|%s> WARNING : ", func_name);
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <console+0x74>)
 8002596:	f000 fda5 	bl	80030e4 <iprintf>
 800259a:	e003      	b.n	80025a4 <console+0x4c>
	} else {
		printf("sync_layer_can.c|%s: ", func_name);
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	480c      	ldr	r0, [pc, #48]	; (80025d0 <console+0x78>)
 80025a0:	f000 fda0 	bl	80030e4 <iprintf>
	}
	va_list args;
	va_start(args, msg);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	60fb      	str	r3, [r7, #12]
	vprintf(msg, args);
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	69b8      	ldr	r0, [r7, #24]
 80025ae:	f000 fe4b 	bl	8003248 <viprintf>
 80025b2:	e000      	b.n	80025b6 <console+0x5e>
		return;
 80025b4:	bf00      	nop
	va_end(args);
}
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025be:	b002      	add	sp, #8
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	0800404c 	.word	0x0800404c
 80025c8:	0800406c 	.word	0x0800406c
 80025cc:	0800408c 	.word	0x0800408c
 80025d0:	080040ac 	.word	0x080040ac

080025d4 <timeInMillis>:

/*****************PRIVATE COMMON**********************/
static uint32_t timeInMillis() {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80025d8:	f7fe f8c8 	bl	800076c <HAL_GetTick>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <canSend>:

static uint8_t (*can_send_func)(uint32_t id, uint8_t *bytes, uint8_t len);
static uint8_t canSend(uint32_t id, uint8_t *bytes, uint8_t len) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	71fb      	strb	r3, [r7, #7]
	if (can_send_func == NULL) {
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <canSend+0x58>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <canSend+0x24>
		console(CONSOLE_INFO, __func__, "canSendFunc is NULL\n");
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <canSend+0x5c>)
 80025fc:	4911      	ldr	r1, [pc, #68]	; (8002644 <canSend+0x60>)
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff ffaa 	bl	8002558 <console>
		return 0;
 8002604:	2300      	movs	r3, #0
 8002606:	e015      	b.n	8002634 <canSend+0x50>
	}
	if (can_send_func(id, bytes, len)) {
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <canSend+0x58>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	4798      	blx	r3
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <canSend+0x44>
		console(CONSOLE_INFO, __func__, "CAN send success\n");
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <canSend+0x64>)
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <canSend+0x60>)
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff ff9a 	bl	8002558 <console>
		return 1;
 8002624:	2301      	movs	r3, #1
 8002626:	e005      	b.n	8002634 <canSend+0x50>
	}
	console(CONSOLE_INFO, __func__, "CAN send failed\n");
 8002628:	4a08      	ldr	r2, [pc, #32]	; (800264c <canSend+0x68>)
 800262a:	4906      	ldr	r1, [pc, #24]	; (8002644 <canSend+0x60>)
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff ff93 	bl	8002558 <console>
	return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000128 	.word	0x20000128
 8002640:	080040c4 	.word	0x080040c4
 8002644:	08004900 	.word	0x08004900
 8002648:	080040dc 	.word	0x080040dc
 800264c:	080040f0 	.word	0x080040f0

08002650 <txCallback>:

/******************TRANSMIT***************************/
static void (*tx_callback_func)(SyncLayerCanLink *link,
		SyncLayerCanData *data, uint8_t status);
static void txCallback(SyncLayerCanLink *link, SyncLayerCanData *data,
		uint8_t status) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	71fb      	strb	r3, [r7, #7]
	if (tx_callback_func == NULL) {
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <txCallback+0x34>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <txCallback+0x22>
		console(CONSOLE_WARNING, __func__, "txCallBack is NULL\n");
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <txCallback+0x38>)
 8002668:	4908      	ldr	r1, [pc, #32]	; (800268c <txCallback+0x3c>)
 800266a:	2002      	movs	r0, #2
 800266c:	f7ff ff74 	bl	8002558 <console>
		return;
 8002670:	e005      	b.n	800267e <txCallback+0x2e>
	}
	tx_callback_func(link, data, status);
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <txCallback+0x34>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	4798      	blx	r3
}
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000012c 	.word	0x2000012c
 8002688:	08004104 	.word	0x08004104
 800268c:	08004908 	.word	0x08004908

08002690 <sync_layer_can_txSendThread>:

uint8_t sync_layer_can_txSendThread(SyncLayerCanLink *link,
		SyncLayerCanData *data) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	uint8_t bytes[8] = { 0 };
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
	SyncLayerCanTrack prev_track = data->track;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7a9b      	ldrb	r3, [r3, #10]
 80026a6:	757b      	strb	r3, [r7, #21]

	/* Check success */
	if (data->track == SYNC_LAYER_CAN_TRANSMIT_SUCCESS) {
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	7a9b      	ldrb	r3, [r3, #10]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d106      	bne.n	80026be <sync_layer_can_txSendThread+0x2e>
		txCallback(link, data, 1);
 80026b0:	2201      	movs	r2, #1
 80026b2:	6839      	ldr	r1, [r7, #0]
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffcb 	bl	8002650 <txCallback>
		return 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e15b      	b.n	8002976 <sync_layer_can_txSendThread+0x2e6>
	} else if (data->track == SYNC_LAYER_CAN_TRANSMIT_FAILED) {
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7a9b      	ldrb	r3, [r3, #10]
 80026c2:	2b0a      	cmp	r3, #10
 80026c4:	d125      	bne.n	8002712 <sync_layer_can_txSendThread+0x82>
		if (data->data_retry > SYNC_LAYER_CAN_TX_SEND_RETRY) {
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	7d1b      	ldrb	r3, [r3, #20]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d90d      	bls.n	80026ea <sync_layer_can_txSendThread+0x5a>
			/* Retry exceeds limit */
			console(CONSOLE_ERROR, __func__, "Sending failed exceed limit %d\n",
					data->data_retry);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7d1b      	ldrb	r3, [r3, #20]
			console(CONSOLE_ERROR, __func__, "Sending failed exceed limit %d\n",
 80026d2:	4a81      	ldr	r2, [pc, #516]	; (80028d8 <sync_layer_can_txSendThread+0x248>)
 80026d4:	4981      	ldr	r1, [pc, #516]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff ff3e 	bl	8002558 <console>
			txCallback(link, data, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ffb5 	bl	8002650 <txCallback>
			return 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e145      	b.n	8002976 <sync_layer_can_txSendThread+0x2e6>
		} else {
			/* Retry available */
			console(CONSOLE_WARNING, __func__,
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
					"Retrying to send data 0x%0x for %d\n", data->id, data->data_retry);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	7d1b      	ldrb	r3, [r3, #20]
			console(CONSOLE_WARNING, __func__,
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <sync_layer_can_txSendThread+0x250>)
 80026f8:	4978      	ldr	r1, [pc, #480]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7ff ff2c 	bl	8002558 <console>
			data->track = SYNC_LAYER_CAN_START_REQUEST;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	729a      	strb	r2, [r3, #10]
			data->data_retry++;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7d1b      	ldrb	r3, [r3, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check Track */
	if (data->track == SYNC_LAYER_CAN_START_REQUEST) {
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7a9b      	ldrb	r3, [r3, #10]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d133      	bne.n	8002782 <sync_layer_can_txSendThread+0xf2>
		/* START REQ */

		data->count = 0;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	819a      	strh	r2, [r3, #12]
		*(uint32_t*) bytes = data->id;
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	601a      	str	r2, [r3, #0]
		*(uint16_t*) ((uint32_t*) bytes + 1) = data->size;
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	3304      	adds	r3, #4
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	8912      	ldrh	r2, [r2, #8]
 8002734:	801a      	strh	r2, [r3, #0]
		if (!canSend(link->start_req_ID, bytes, 8)) {
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f107 0108 	add.w	r1, r7, #8
 800273e:	2208      	movs	r2, #8
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff4f 	bl	80025e4 <canSend>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <sync_layer_can_txSendThread+0xd4>
			/* Can sending failed */
			console(CONSOLE_WARNING, __func__,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	4a62      	ldr	r2, [pc, #392]	; (80028e4 <sync_layer_can_txSendThread+0x254>)
 800275a:	4960      	ldr	r1, [pc, #384]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 800275c:	2002      	movs	r0, #2
 800275e:	f7ff fefb 	bl	8002558 <console>
 8002762:	e0db      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
					"Start request 0x%0x of data 0x%0x send failed\n",
					link->start_req_ID, data->id);
		} else {
			/* Can sending success */
			data->track = SYNC_LAYER_CAN_START_ACK;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2201      	movs	r2, #1
 8002768:	729a      	strb	r2, [r3, #10]
			console(CONSOLE_INFO, __func__,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <sync_layer_can_txSendThread+0x258>)
 8002778:	4958      	ldr	r1, [pc, #352]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff feec 	bl	8002558 <console>
 8002780:	e0cc      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
					"Start request 0x%0x of data 0x%0x send successful\n",
					link->start_req_ID, data->id);
		}
	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7a9b      	ldrb	r3, [r3, #10]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d141      	bne.n	800280e <sync_layer_can_txSendThread+0x17e>
		/* DATA */

		/* Calculate new data size can be transmitted */
		uint16_t new_data_size = data->size - data->count;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	891a      	ldrh	r2, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	899b      	ldrh	r3, [r3, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	82fb      	strh	r3, [r7, #22]
		if (new_data_size >= 8)
 8002796:	8afb      	ldrh	r3, [r7, #22]
 8002798:	2b07      	cmp	r3, #7
 800279a:	d901      	bls.n	80027a0 <sync_layer_can_txSendThread+0x110>
			new_data_size = 8;
 800279c:	2308      	movs	r3, #8
 800279e:	82fb      	strh	r3, [r7, #22]

		if (!canSend(data->id, data->bytes + data->count, new_data_size)) {
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	8992      	ldrh	r2, [r2, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	8afa      	ldrh	r2, [r7, #22]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7ff ff16 	bl	80025e4 <canSend>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10e      	bne.n	80027dc <sync_layer_can_txSendThread+0x14c>
			/* Can sending failed */
			console(CONSOLE_WARNING, __func__,
					"Data (%d-%d) of data 0x%0x send failed\n", data->count,
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	899b      	ldrh	r3, [r3, #12]
			console(CONSOLE_WARNING, __func__,
 80027c2:	4619      	mov	r1, r3
 80027c4:	8afb      	ldrh	r3, [r7, #22]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	9201      	str	r2, [sp, #4]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	460b      	mov	r3, r1
 80027d0:	4a46      	ldr	r2, [pc, #280]	; (80028ec <sync_layer_can_txSendThread+0x25c>)
 80027d2:	4942      	ldr	r1, [pc, #264]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7ff febf 	bl	8002558 <console>
 80027da:	e09f      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
					new_data_size, data->id);
		} else {
			/* Can sending success */
			data->track = SYNC_LAYER_CAN_DATA_ACK;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2205      	movs	r2, #5
 80027e0:	729a      	strb	r2, [r3, #10]
			data->count += new_data_size;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	899a      	ldrh	r2, [r3, #12]
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	4413      	add	r3, r2
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	819a      	strh	r2, [r3, #12]
			console(CONSOLE_INFO, __func__,
					"Data (%d-%d) of data 0x%0x send success\n", data->count,
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	899b      	ldrh	r3, [r3, #12]
			console(CONSOLE_INFO, __func__,
 80027f4:	4619      	mov	r1, r3
 80027f6:	8afb      	ldrh	r3, [r7, #22]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	9201      	str	r2, [sp, #4]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	460b      	mov	r3, r1
 8002802:	4a3b      	ldr	r2, [pc, #236]	; (80028f0 <sync_layer_can_txSendThread+0x260>)
 8002804:	4935      	ldr	r1, [pc, #212]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff fea6 	bl	8002558 <console>
 800280c:	e086      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
					new_data_size, data->id);
		}
	} else if (data->track == SYNC_LAYER_CAN_DATA_COUNT_RESET_REQUEST) {
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	7a9b      	ldrb	r3, [r3, #10]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d138      	bne.n	8002888 <sync_layer_can_txSendThread+0x1f8>
		/* DATA COUNT RESET REQ */

		*(uint32_t*) bytes = data->id;
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	601a      	str	r2, [r3, #0]
		*(uint16_t*) ((uint32_t*) bytes + 1) = data->count;
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	3304      	adds	r3, #4
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	8992      	ldrh	r2, [r2, #12]
 800282a:	801a      	strh	r2, [r3, #0]
		if (!canSend(link->data_count_reset_req_ID, bytes, 8)) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f107 0108 	add.w	r1, r7, #8
 8002834:	2208      	movs	r2, #8
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fed4 	bl	80025e4 <canSend>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <sync_layer_can_txSendThread+0x1d2>
			/* Can sending failed */
			console(CONSOLE_WARNING, __func__,
					"Data count %d reset request 0x%0x of data 0x%0x send failed\n",
					data->count, link->data_count_reset_req_ID, data->id);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	899b      	ldrh	r3, [r3, #12]
			console(CONSOLE_WARNING, __func__,
 8002846:	4619      	mov	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	9201      	str	r2, [sp, #4]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <sync_layer_can_txSendThread+0x264>)
 8002858:	4920      	ldr	r1, [pc, #128]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 800285a:	2002      	movs	r0, #2
 800285c:	f7ff fe7c 	bl	8002558 <console>
 8002860:	e05c      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
		} else {
			/* Can sending success */
			data->track = SYNC_LAYER_CAN_DATA_COUNT_RESET_ACK;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2204      	movs	r2, #4
 8002866:	729a      	strb	r2, [r3, #10]
			console(CONSOLE_INFO, __func__,
					"Data count %d reset request 0x%0x of data 0x%0x send success\n",
					data->count, link->data_count_reset_req_ID, data->id);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	899b      	ldrh	r3, [r3, #12]
			console(CONSOLE_INFO, __func__,
 800286c:	4619      	mov	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	9201      	str	r2, [sp, #4]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	460b      	mov	r3, r1
 800287c:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <sync_layer_can_txSendThread+0x268>)
 800287e:	4917      	ldr	r1, [pc, #92]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 8002880:	2001      	movs	r0, #1
 8002882:	f7ff fe69 	bl	8002558 <console>
 8002886:	e049      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
		}
	} else if (data->track == SYNC_LAYER_CAN_END_REQUEST) {
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	7a9b      	ldrb	r3, [r3, #10]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d145      	bne.n	800291c <sync_layer_can_txSendThread+0x28c>
		/* END REQ */

		*(uint32_t*) bytes = data->id;
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	601a      	str	r2, [r3, #0]
		uint32_t crc = 0x00;	//TODO calculate crc
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
		*((uint32_t*) bytes + 1) = crc;
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	3304      	adds	r3, #4
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	601a      	str	r2, [r3, #0]
		if (!canSend(link->end_req_ID, bytes, 8)) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f107 0108 	add.w	r1, r7, #8
 80028b0:	2208      	movs	r2, #8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fe96 	bl	80025e4 <canSend>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d120      	bne.n	8002900 <sync_layer_can_txSendThread+0x270>
			/* Can sending failed */
			console(CONSOLE_WARNING, __func__,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <sync_layer_can_txSendThread+0x26c>)
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <sync_layer_can_txSendThread+0x24c>)
 80028ce:	2002      	movs	r0, #2
 80028d0:	f7ff fe42 	bl	8002558 <console>
 80028d4:	e022      	b.n	800291c <sync_layer_can_txSendThread+0x28c>
 80028d6:	bf00      	nop
 80028d8:	08004118 	.word	0x08004118
 80028dc:	08004914 	.word	0x08004914
 80028e0:	08004138 	.word	0x08004138
 80028e4:	0800415c 	.word	0x0800415c
 80028e8:	0800418c 	.word	0x0800418c
 80028ec:	080041c0 	.word	0x080041c0
 80028f0:	080041e8 	.word	0x080041e8
 80028f4:	08004214 	.word	0x08004214
 80028f8:	08004254 	.word	0x08004254
 80028fc:	08004294 	.word	0x08004294
					"Data end request request 0x%0x of data 0x%0x send failed\n",
					link->data_count_reset_req_ID, data->id);
		} else {
			/* Can sending success */
			data->track = SYNC_LAYER_CAN_END_ACK;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2207      	movs	r2, #7
 8002904:	729a      	strb	r2, [r3, #10]
			console(CONSOLE_INFO, __func__,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <sync_layer_can_txSendThread+0x2f0>)
 8002914:	491b      	ldr	r1, [pc, #108]	; (8002984 <sync_layer_can_txSendThread+0x2f4>)
 8002916:	2001      	movs	r0, #1
 8002918:	f7ff fe1e 	bl	8002558 <console>
					"Data end request request 0x%0x of data 0x%0x send success\n",
					link->data_count_reset_req_ID, data->id);
		}
	}

	if(prev_track!=data->track){
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7a9b      	ldrb	r3, [r3, #10]
 8002920:	7d7a      	ldrb	r2, [r7, #21]
 8002922:	429a      	cmp	r2, r3
 8002924:	d00f      	beq.n	8002946 <sync_layer_can_txSendThread+0x2b6>
		data->time_elapse = timeInMillis();
 8002926:	f7ff fe55 	bl	80025d4 <timeInMillis>
 800292a:	4602      	mov	r2, r0
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	611a      	str	r2, [r3, #16]
		if (data->time_elapse == 0)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <sync_layer_can_txSendThread+0x2b6>
			console(CONSOLE_WARNING, __func__, "Time elapse %d\n",
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <sync_layer_can_txSendThread+0x2f8>)
 800293e:	4911      	ldr	r1, [pc, #68]	; (8002984 <sync_layer_can_txSendThread+0x2f4>)
 8002940:	2002      	movs	r0, #2
 8002942:	f7ff fe09 	bl	8002558 <console>
					data->time_elapse);
	}

	/* Check transmit timeout */
	if ((timeInMillis()-data->time_elapse)> SYNC_LAYER_CAN_TRANSMIT_TIMEOUT) {
 8002946:	f7ff fe45 	bl	80025d4 <timeInMillis>
 800294a:	4602      	mov	r2, r0
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f242 7210 	movw	r2, #10000	; 0x2710
 8002956:	4293      	cmp	r3, r2
 8002958:	d90c      	bls.n	8002974 <sync_layer_can_txSendThread+0x2e4>
		console(CONSOLE_WARNING, __func__, "Data transmit 0x%0x timeout %d\n",
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	4a09      	ldr	r2, [pc, #36]	; (800298c <sync_layer_can_txSendThread+0x2fc>)
 8002966:	4907      	ldr	r1, [pc, #28]	; (8002984 <sync_layer_can_txSendThread+0x2f4>)
 8002968:	2002      	movs	r0, #2
 800296a:	f7ff fdf5 	bl	8002558 <console>
				data->id, SYNC_LAYER_CAN_TRANSMIT_TIMEOUT);
		data->track = SYNC_LAYER_CAN_TRANSMIT_FAILED;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	220a      	movs	r2, #10
 8002972:	729a      	strb	r2, [r3, #10]
	}

	return 0;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	080042d0 	.word	0x080042d0
 8002984:	08004914 	.word	0x08004914
 8002988:	0800430c 	.word	0x0800430c
 800298c:	0800431c 	.word	0x0800431c

08002990 <sync_layer_can_txReceiveThread>:

void sync_layer_can_txReceiveThread(SyncLayerCanLink *link,
		SyncLayerCanData *data, uint32_t can_id, uint8_t *can_bytes,
		uint8_t can_bytes_len) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af04      	add	r7, sp, #16
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
	uint32_t data_id;

	if (data->track == SYNC_LAYER_CAN_START_ACK
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	7a9b      	ldrb	r3, [r3, #10]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d129      	bne.n	80029fa <sync_layer_can_txReceiveThread+0x6a>
			&& can_id == link->start_ack_ID) {
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d124      	bne.n	80029fa <sync_layer_can_txReceiveThread+0x6a>
		/* START ACK */
		data_id = *(uint32_t*) can_bytes;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	617b      	str	r3, [r7, #20]
		if (data_id != data->id) {
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d00d      	beq.n	80029dc <sync_layer_can_txReceiveThread+0x4c>
			/* ID doesn't match */
			console(CONSOLE_ERROR, __func__,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	9201      	str	r2, [sp, #4]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	460b      	mov	r3, r1
 80029d0:	4a84      	ldr	r2, [pc, #528]	; (8002be4 <sync_layer_can_txReceiveThread+0x254>)
 80029d2:	4985      	ldr	r1, [pc, #532]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff fdbf 	bl	8002558 <console>
		if (data_id != data->id) {
 80029da:	e0fe      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
					"Start ack 0x%0x of data 0x%0x contains wrong data ID 0x%0x\n",
					link->start_ack_ID, data->id, data_id);
		} else {
			/* ID matched */
			console(CONSOLE_INFO, __func__,
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	4a80      	ldr	r2, [pc, #512]	; (8002bec <sync_layer_can_txReceiveThread+0x25c>)
 80029ea:	497f      	ldr	r1, [pc, #508]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7ff fdb3 	bl	8002558 <console>
					"Start ack 0x%0x of data 0x%0x success\n", link->start_ack_ID,
					data->id);
			data->track = SYNC_LAYER_CAN_DATA;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2202      	movs	r2, #2
 80029f6:	729a      	strb	r2, [r3, #10]
		if (data_id != data->id) {
 80029f8:	e0ef      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
		}
	} else if (data->track == SYNC_LAYER_CAN_DATA_ACK
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	7a9b      	ldrb	r3, [r3, #10]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d17b      	bne.n	8002afa <sync_layer_can_txReceiveThread+0x16a>
			&& can_id == link->data_ack_ID) {
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d176      	bne.n	8002afa <sync_layer_can_txReceiveThread+0x16a>
		/* DATA ACK */
		data_id = *(uint32_t*) can_bytes;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]
		if (data_id != data->id) {
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d00d      	beq.n	8002a38 <sync_layer_can_txReceiveThread+0xa8>
			/* ID doesn't match */
			console(CONSOLE_ERROR, __func__,
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	9201      	str	r2, [sp, #4]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4a70      	ldr	r2, [pc, #448]	; (8002bf0 <sync_layer_can_txReceiveThread+0x260>)
 8002a2e:	496e      	ldr	r1, [pc, #440]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff fd91 	bl	8002558 <console>
		if (data_id != data->id) {
 8002a36:	e0d0      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
					"Data ack 0x%0x of data 0x%0x contains wrong data ID 0x%0x\n",
					link->data_ack_ID, data->id, data_id);
		} else {
			/* ID matched */
			uint16_t data_count = *(uint16_t*) ((uint32_t*) can_bytes + 1);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	889b      	ldrh	r3, [r3, #4]
 8002a3c:	827b      	strh	r3, [r7, #18]
			if (data_count > data->count) {
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	899b      	ldrh	r3, [r3, #12]
 8002a42:	8a7a      	ldrh	r2, [r7, #18]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d913      	bls.n	8002a70 <sync_layer_can_txReceiveThread+0xe0>
				/* Destination count is greater than actual */
				console(CONSOLE_WARNING, __func__,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6918      	ldr	r0, [r3, #16]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	8a7a      	ldrh	r2, [r7, #18]
						"Data ack 0x%0x of data 0x%0x contains higher count %d then actual %d\n",
						link->data_ack_ID, data->id, data_count, data->count);
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	8989      	ldrh	r1, [r1, #12]
				console(CONSOLE_WARNING, __func__,
 8002a56:	9102      	str	r1, [sp, #8]
 8002a58:	9201      	str	r2, [sp, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <sync_layer_can_txReceiveThread+0x264>)
 8002a60:	4961      	ldr	r1, [pc, #388]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002a62:	2002      	movs	r0, #2
 8002a64:	f7ff fd78 	bl	8002558 <console>
				data->track = SYNC_LAYER_CAN_DATA_COUNT_RESET_REQUEST;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	729a      	strb	r2, [r3, #10]
		if (data_id != data->id) {
 8002a6e:	e0b4      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
			} else if (data_count < data->count) {
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	899b      	ldrh	r3, [r3, #12]
 8002a74:	8a7a      	ldrh	r2, [r7, #18]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d226      	bcs.n	8002ac8 <sync_layer_can_txReceiveThread+0x138>
				/* Destination count is smaller than actual */
				console(CONSOLE_WARNING, __func__,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6918      	ldr	r0, [r3, #16]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	8a7a      	ldrh	r2, [r7, #18]
						"Data ack 0x%0x of data 0x%0x contains lower count %d then actual %d\n",
						link->data_ack_ID, data->id, data_count, data->count);
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	8989      	ldrh	r1, [r1, #12]
				console(CONSOLE_WARNING, __func__,
 8002a88:	9102      	str	r1, [sp, #8]
 8002a8a:	9201      	str	r2, [sp, #4]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a59      	ldr	r2, [pc, #356]	; (8002bf8 <sync_layer_can_txReceiveThread+0x268>)
 8002a92:	4955      	ldr	r1, [pc, #340]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002a94:	2002      	movs	r0, #2
 8002a96:	f7ff fd5f 	bl	8002558 <console>

				console(CONSOLE_WARNING, __func__,
						"Count %d of data 0x%0x is reset to %d\n", data->count,
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	899b      	ldrh	r3, [r3, #12]
				console(CONSOLE_WARNING, __func__,
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	8a7a      	ldrh	r2, [r7, #18]
 8002aa6:	8a79      	ldrh	r1, [r7, #18]
 8002aa8:	9102      	str	r1, [sp, #8]
 8002aaa:	9201      	str	r2, [sp, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <sync_layer_can_txReceiveThread+0x26c>)
 8002ab2:	494d      	ldr	r1, [pc, #308]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	f7ff fd4f 	bl	8002558 <console>
						data->id, data_count, data_count);
				data->count = data_count;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	8a7a      	ldrh	r2, [r7, #18]
 8002abe:	819a      	strh	r2, [r3, #12]
				data->track = SYNC_LAYER_CAN_DATA_COUNT_RESET_REQUEST;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	729a      	strb	r2, [r3, #10]
		if (data_id != data->id) {
 8002ac6:	e088      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
			} else {
				/* Destination count and source count is equal */
				console(CONSOLE_INFO, __func__,
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <sync_layer_can_txReceiveThread+0x270>)
 8002ad6:	4944      	ldr	r1, [pc, #272]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7ff fd3d 	bl	8002558 <console>
						"Data ack 0x%0x of data 0x%0x success\n",
						link->data_ack_ID, data->id);
				if (data->count < data->size)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	899a      	ldrh	r2, [r3, #12]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	891b      	ldrh	r3, [r3, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d203      	bcs.n	8002af2 <sync_layer_can_txReceiveThread+0x162>
					data->track = SYNC_LAYER_CAN_DATA;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2202      	movs	r2, #2
 8002aee:	729a      	strb	r2, [r3, #10]
		if (data_id != data->id) {
 8002af0:	e073      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
				else
					data->track = SYNC_LAYER_CAN_END_REQUEST;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2206      	movs	r2, #6
 8002af6:	729a      	strb	r2, [r3, #10]
		if (data_id != data->id) {
 8002af8:	e06f      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
			}
		}
	} else if (data->track == SYNC_LAYER_CAN_DATA_COUNT_RESET_ACK
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	7a9b      	ldrb	r3, [r3, #10]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d129      	bne.n	8002b56 <sync_layer_can_txReceiveThread+0x1c6>
			&& can_id == link->data_count_reset_ack_ID) {
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d124      	bne.n	8002b56 <sync_layer_can_txReceiveThread+0x1c6>
		/* DATA COUNT RESET ACK */
		data_id = *(uint32_t*) can_bytes;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	617b      	str	r3, [r7, #20]
		if (data_id != data->id) {
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d00d      	beq.n	8002b38 <sync_layer_can_txReceiveThread+0x1a8>
			/* ID doesn't match */
			console(CONSOLE_ERROR, __func__,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68d9      	ldr	r1, [r3, #12]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	9201      	str	r2, [sp, #4]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <sync_layer_can_txReceiveThread+0x274>)
 8002b2e:	492e      	ldr	r1, [pc, #184]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7ff fd11 	bl	8002558 <console>
		if (data_id != data->id) {
 8002b36:	e050      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
					"Data count reset ack 0x%0x of data 0x%0x contains wrong data ID 0x%0x\n",
					link->data_count_reset_ack_ID, data->id, data_id);
		} else {
			/* ID matched */
			console(CONSOLE_INFO, __func__,
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <sync_layer_can_txReceiveThread+0x278>)
 8002b46:	4928      	ldr	r1, [pc, #160]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff fd05 	bl	8002558 <console>
					"Data count reset ack 0x%0x of data 0x%0x success\n",
					link->start_ack_ID, data->id);
			data->track = SYNC_LAYER_CAN_DATA;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2202      	movs	r2, #2
 8002b52:	729a      	strb	r2, [r3, #10]
		if (data_id != data->id) {
 8002b54:	e041      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
		}
	} else if (data->track == SYNC_LAYER_CAN_END_ACK
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	7a9b      	ldrb	r3, [r3, #10]
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d13d      	bne.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
			&& can_id == link->end_ack_ID) {
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d138      	bne.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
		/* END ACK */
		data_id = *(uint32_t*) can_bytes;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
		if (data_id != data->id) {
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d00d      	beq.n	8002b94 <sync_layer_can_txReceiveThread+0x204>
			/* ID doesn't match */
			console(CONSOLE_ERROR, __func__,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6999      	ldr	r1, [r3, #24]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	9201      	str	r2, [sp, #4]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	460b      	mov	r3, r1
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <sync_layer_can_txReceiveThread+0x274>)
 8002b8a:	4917      	ldr	r1, [pc, #92]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7ff fce3 	bl	8002558 <console>
				data->track = SYNC_LAYER_CAN_TRANSMIT_SUCCESS;
			}
		}
	}

}
 8002b92:	e022      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
			console(CONSOLE_INFO, __func__,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <sync_layer_can_txReceiveThread+0x278>)
 8002ba2:	4911      	ldr	r1, [pc, #68]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f7ff fcd7 	bl	8002558 <console>
			uint8_t is_transmit_success =
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	747b      	strb	r3, [r7, #17]
			if (is_transmit_success) {
 8002bb0:	7c7b      	ldrb	r3, [r7, #17]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <sync_layer_can_txReceiveThread+0x238>
				console(CONSOLE_INFO, __func__, "Data CRC match success\n");
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <sync_layer_can_txReceiveThread+0x27c>)
 8002bb8:	490b      	ldr	r1, [pc, #44]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7ff fccc 	bl	8002558 <console>
				data->track = SYNC_LAYER_CAN_TRANSMIT_SUCCESS;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	729a      	strb	r2, [r3, #10]
}
 8002bc6:	e008      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
				console(CONSOLE_WARNING, __func__, "Data CRC match failed\n");
 8002bc8:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <sync_layer_can_txReceiveThread+0x280>)
 8002bca:	4907      	ldr	r1, [pc, #28]	; (8002be8 <sync_layer_can_txReceiveThread+0x258>)
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f7ff fcc3 	bl	8002558 <console>
				data->track = SYNC_LAYER_CAN_TRANSMIT_SUCCESS;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	729a      	strb	r2, [r3, #10]
}
 8002bd8:	e7ff      	b.n	8002bda <sync_layer_can_txReceiveThread+0x24a>
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	0800433c 	.word	0x0800433c
 8002be8:	08004930 	.word	0x08004930
 8002bec:	08004378 	.word	0x08004378
 8002bf0:	080043a0 	.word	0x080043a0
 8002bf4:	080043dc 	.word	0x080043dc
 8002bf8:	08004424 	.word	0x08004424
 8002bfc:	0800446c 	.word	0x0800446c
 8002c00:	08004494 	.word	0x08004494
 8002c04:	080044bc 	.word	0x080044bc
 8002c08:	08004504 	.word	0x08004504
 8002c0c:	08004538 	.word	0x08004538
 8002c10:	08004550 	.word	0x08004550

08002c14 <sync_layer_can_init>:

void sync_layer_can_init(uint8_t (*canSendFunc)(uint32_t id, uint8_t *bytes, uint8_t len),
		void (*txCallbackFunc)(SyncLayerCanLink *link,
				SyncLayerCanData *data, uint8_t status),
		void (*rxCallbackFunc)(SyncLayerCanLink *link,
				SyncLayerCanData *data, uint8_t status)) {
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	can_send_func = canSendFunc;
 8002c20:	4a06      	ldr	r2, [pc, #24]	; (8002c3c <sync_layer_can_init+0x28>)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6013      	str	r3, [r2, #0]
	tx_callback_func = txCallbackFunc;
 8002c26:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <sync_layer_can_init+0x2c>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6013      	str	r3, [r2, #0]
	rx_callback_func = rxCallbackFunc;
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <sync_layer_can_init+0x30>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000128 	.word	0x20000128
 8002c40:	2000012c 	.word	0x2000012c
 8002c44:	20000130 	.word	0x20000130

08002c48 <console>:
#include "user.h"
#include "sync_layer_can.h"
#include "stdlib.h"

/********************CONSOLE***************************/
static void console(const char *title, const char *msg) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	printf("%s:: %s\n", title, msg);
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4803      	ldr	r0, [pc, #12]	; (8002c64 <console+0x1c>)
 8002c58:	f000 fa44 	bl	80030e4 <iprintf>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	0800484c 	.word	0x0800484c

08002c68 <canInit>:
static SyncLayerCanLink links = { 1, 2, 3, 4, 5, 6, 7 };
static SyncLayerCanData sync_data;

/************************CAN****************************/
extern CAN_HandleTypeDef hcan;
static void canInit() {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;

	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	623b      	str	r3, [r7, #32]
	can_filter.FilterBank = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
	can_filter.FilterIdHigh = 0x0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
	can_filter.SlaveStartFilterBank = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &can_filter);
 8002c96:	463b      	mov	r3, r7
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4813      	ldr	r0, [pc, #76]	; (8002ce8 <canInit+0x80>)
 8002c9c:	f7fd fe8f 	bl	80009be <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	4811      	ldr	r0, [pc, #68]	; (8002ce8 <canInit+0x80>)
 8002ca4:	f7fe f983 	bl	8000fae <HAL_CAN_ActivateNotification>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <canInit+0x4e>
			!= HAL_OK)
		console("CAN RX Interrupt Activate", "Failed");
 8002cae:	490f      	ldr	r1, [pc, #60]	; (8002cec <canInit+0x84>)
 8002cb0:	480f      	ldr	r0, [pc, #60]	; (8002cf0 <canInit+0x88>)
 8002cb2:	f7ff ffc9 	bl	8002c48 <console>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <canInit+0x80>)
 8002cba:	f7fe f978 	bl	8000fae <HAL_CAN_ActivateNotification>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <canInit+0x64>
		console("CAN TX Interrupt Activate", "Failed");
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <canInit+0x84>)
 8002cc6:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <canInit+0x8c>)
 8002cc8:	f7ff ffbe 	bl	8002c48 <console>
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <canInit+0x80>)
 8002cce:	f7fd ff3f 	bl	8000b50 <HAL_CAN_Start>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <canInit+0x78>
		console("CAN Start", "Failed");
 8002cd8:	4904      	ldr	r1, [pc, #16]	; (8002cec <canInit+0x84>)
 8002cda:	4807      	ldr	r0, [pc, #28]	; (8002cf8 <canInit+0x90>)
 8002cdc:	f7ff ffb4 	bl	8002c48 <console>
}
 8002ce0:	bf00      	nop
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200000b4 	.word	0x200000b4
 8002cec:	08004858 	.word	0x08004858
 8002cf0:	08004860 	.word	0x08004860
 8002cf4:	0800487c 	.word	0x0800487c
 8002cf8:	08004898 	.word	0x08004898

08002cfc <canRxInterrupt>:

static CAN_RxHeaderTypeDef rx_header;
static uint8_t data[8];
void canRxInterrupt() {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af02      	add	r7, sp, #8
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, data);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <canRxInterrupt+0x30>)
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <canRxInterrupt+0x34>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	480a      	ldr	r0, [pc, #40]	; (8002d34 <canRxInterrupt+0x38>)
 8002d0a:	f7fe f83f 	bl	8000d8c <HAL_CAN_GetRxMessage>
//	printf("Interrupt-> 0x%02x : ", (unsigned int) rx_header.ExtId);
//	for (int i = 0; i < rx_header.DLC; ++i)
//		printf("%d ", data[i]);
//	printf("\n");
	sync_layer_can_txReceiveThread(&links, &sync_data, rx_header.ExtId, data,
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <canRxInterrupt+0x34>)
 8002d10:	685a      	ldr	r2, [r3, #4]
			rx_header.DLC);
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <canRxInterrupt+0x34>)
 8002d14:	691b      	ldr	r3, [r3, #16]
	sync_layer_can_txReceiveThread(&links, &sync_data, rx_header.ExtId, data,
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <canRxInterrupt+0x30>)
 8002d1c:	4906      	ldr	r1, [pc, #24]	; (8002d38 <canRxInterrupt+0x3c>)
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <canRxInterrupt+0x40>)
 8002d20:	f7ff fe36 	bl	8002990 <sync_layer_can_txReceiveThread>
//	sync_layer_can_rxReceiveThread(&links, &sync_data, rx_header.ExtId, data,
//			rx_header.DLC);

}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000168 	.word	0x20000168
 8002d30:	2000014c 	.word	0x2000014c
 8002d34:	200000b4 	.word	0x200000b4
 8002d38:	20000134 	.word	0x20000134
 8002d3c:	2000000c 	.word	0x2000000c

08002d40 <canSend>:

static CAN_TxHeaderTypeDef tx_header;
static uint32_t tx_mailbox;
static uint8_t canSend(uint32_t id, uint8_t *bytes, uint8_t len) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	71fb      	strb	r3, [r7, #7]
	tx_header.DLC = len;
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <canSend+0x4c>)
 8002d52:	6113      	str	r3, [r2, #16]
	tx_header.ExtId = id;
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <canSend+0x4c>)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6053      	str	r3, [r2, #4]
	tx_header.IDE = CAN_ID_EXT;
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <canSend+0x4c>)
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	609a      	str	r2, [r3, #8]
	tx_header.RTR = CAN_RTR_DATA;
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <canSend+0x4c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
	tx_header.TransmitGlobalTime = DISABLE;
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <canSend+0x4c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	751a      	strb	r2, [r3, #20]
//	printf("canSend-> 0x%02x : ", (unsigned int) id);
//	for (int i = 0; i < len; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");

	return HAL_CAN_AddTxMessage(&hcan, &tx_header, bytes, &tx_mailbox) == HAL_OK;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <canSend+0x50>)
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4906      	ldr	r1, [pc, #24]	; (8002d8c <canSend+0x4c>)
 8002d72:	4808      	ldr	r0, [pc, #32]	; (8002d94 <canSend+0x54>)
 8002d74:	f7fd ff30 	bl	8000bd8 <HAL_CAN_AddTxMessage>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000170 	.word	0x20000170
 8002d90:	20000188 	.word	0x20000188
 8002d94:	200000b4 	.word	0x200000b4

08002d98 <txCallback>:

/**********************MAIN THREAD****************************/
static void txCallback(SyncLayerCanLink *link, SyncLayerCanData *data,
		uint8_t status) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	71fb      	strb	r3, [r7, #7]
//	if (status)
//		console("Data transmit", "Success");
//	else
//		console("Data transmit", "Failed");

	printf("Data : ");
 8002da6:	4816      	ldr	r0, [pc, #88]	; (8002e00 <txCallback+0x68>)
 8002da8:	f000 f99c 	bl	80030e4 <iprintf>
	if(!status){
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <txCallback+0x22>
		printf("failed\n");
 8002db2:	4814      	ldr	r0, [pc, #80]	; (8002e04 <txCallback+0x6c>)
 8002db4:	f000 fa30 	bl	8003218 <puts>
		return;
 8002db8:	e01f      	b.n	8002dfa <txCallback+0x62>
	}
	for (int i = 0; i < data->size; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e00b      	b.n	8002dd8 <txCallback+0x40>
		printf("%d ", data->bytes[i]);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	480e      	ldr	r0, [pc, #56]	; (8002e08 <txCallback+0x70>)
 8002dce:	f000 f989 	bl	80030e4 <iprintf>
	for (int i = 0; i < data->size; i++)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	891b      	ldrh	r3, [r3, #8]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4293      	cmp	r3, r2
 8002de2:	dbed      	blt.n	8002dc0 <txCallback+0x28>
	printf("\n");
 8002de4:	200a      	movs	r0, #10
 8002de6:	f000 f995 	bl	8003114 <putchar>
	data->id++;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	601a      	str	r2, [r3, #0]
	data->track = SYNC_LAYER_CAN_START_REQUEST;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	729a      	strb	r2, [r3, #10]
}
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	080048a4 	.word	0x080048a4
 8002e04:	080048ac 	.word	0x080048ac
 8002e08:	080048b4 	.word	0x080048b4

08002e0c <rxCallback>:

static void rxCallback(SyncLayerCanLink *link, SyncLayerCanData *data,
		uint8_t status) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
	if (status)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <rxCallback+0x1e>
		console("Data receive", "Success");
 8002e20:	4906      	ldr	r1, [pc, #24]	; (8002e3c <rxCallback+0x30>)
 8002e22:	4807      	ldr	r0, [pc, #28]	; (8002e40 <rxCallback+0x34>)
 8002e24:	f7ff ff10 	bl	8002c48 <console>
	else
		console("Data receive", "Failed");
}
 8002e28:	e003      	b.n	8002e32 <rxCallback+0x26>
		console("Data receive", "Failed");
 8002e2a:	4906      	ldr	r1, [pc, #24]	; (8002e44 <rxCallback+0x38>)
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <rxCallback+0x34>)
 8002e2e:	f7ff ff0b 	bl	8002c48 <console>
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	080048b8 	.word	0x080048b8
 8002e40:	080048c0 	.word	0x080048c0
 8002e44:	08004858 	.word	0x08004858

08002e48 <init>:

uint8_t bytes[] = {1,2,3,4,[9]=10};
void init() {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	canInit();
 8002e4c:	f7ff ff0c 	bl	8002c68 <canInit>
	console("\n\nSOURCE INIT", "SUCCESS");
 8002e50:	4910      	ldr	r1, [pc, #64]	; (8002e94 <init+0x4c>)
 8002e52:	4811      	ldr	r0, [pc, #68]	; (8002e98 <init+0x50>)
 8002e54:	f7ff fef8 	bl	8002c48 <console>
	sync_layer_can_init(canSend, txCallback, rxCallback);
 8002e58:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <init+0x54>)
 8002e5a:	4911      	ldr	r1, [pc, #68]	; (8002ea0 <init+0x58>)
 8002e5c:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <init+0x5c>)
 8002e5e:	f7ff fed9 	bl	8002c14 <sync_layer_can_init>

	sync_data.id = 0xA;
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <init+0x60>)
 8002e64:	220a      	movs	r2, #10
 8002e66:	601a      	str	r2, [r3, #0]
	sync_data.count = 0;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <init+0x60>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	819a      	strh	r2, [r3, #12]
	sync_data.data_retry = 0;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <init+0x60>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	751a      	strb	r2, [r3, #20]
	sync_data.track = SYNC_LAYER_CAN_START_REQUEST;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <init+0x60>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	729a      	strb	r2, [r3, #10]
	sync_data.size = 10;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <init+0x60>)
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	811a      	strh	r2, [r3, #8]
	sync_data.bytes = bytes;
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <init+0x60>)
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <init+0x64>)
 8002e84:	605a      	str	r2, [r3, #4]

	HAL_Delay(3000);
 8002e86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e8a:	f7fd fc79 	bl	8000780 <HAL_Delay>
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	080048d0 	.word	0x080048d0
 8002e98:	080048d8 	.word	0x080048d8
 8002e9c:	08002e0d 	.word	0x08002e0d
 8002ea0:	08002d99 	.word	0x08002d99
 8002ea4:	08002d41 	.word	0x08002d41
 8002ea8:	20000134 	.word	0x20000134
 8002eac:	20000028 	.word	0x20000028

08002eb0 <loop>:

void loop() {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
//	printf("Data track : %d\n", sync_data.track);
	sync_layer_can_txSendThread(&links, &sync_data);
 8002eb4:	4902      	ldr	r1, [pc, #8]	; (8002ec0 <loop+0x10>)
 8002eb6:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <loop+0x14>)
 8002eb8:	f7ff fbea 	bl	8002690 <sync_layer_can_txSendThread>



//	HAL_Delay(1);

}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000134 	.word	0x20000134
 8002ec4:	2000000c 	.word	0x2000000c

08002ec8 <__errno>:
 8002ec8:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <__errno+0x8>)
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000034 	.word	0x20000034

08002ed4 <__libc_init_array>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	4d0c      	ldr	r5, [pc, #48]	; (8002f0c <__libc_init_array+0x38>)
 8002eda:	4c0d      	ldr	r4, [pc, #52]	; (8002f10 <__libc_init_array+0x3c>)
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	42a6      	cmp	r6, r4
 8002ee2:	d109      	bne.n	8002ef8 <__libc_init_array+0x24>
 8002ee4:	f001 f89e 	bl	8004024 <_init>
 8002ee8:	2600      	movs	r6, #0
 8002eea:	4d0a      	ldr	r5, [pc, #40]	; (8002f14 <__libc_init_array+0x40>)
 8002eec:	4c0a      	ldr	r4, [pc, #40]	; (8002f18 <__libc_init_array+0x44>)
 8002eee:	1b64      	subs	r4, r4, r5
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	42a6      	cmp	r6, r4
 8002ef4:	d105      	bne.n	8002f02 <__libc_init_array+0x2e>
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efc:	4798      	blx	r3
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7ee      	b.n	8002ee0 <__libc_init_array+0xc>
 8002f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f06:	4798      	blx	r3
 8002f08:	3601      	adds	r6, #1
 8002f0a:	e7f2      	b.n	8002ef2 <__libc_init_array+0x1e>
 8002f0c:	080049e8 	.word	0x080049e8
 8002f10:	080049e8 	.word	0x080049e8
 8002f14:	080049e8 	.word	0x080049e8
 8002f18:	080049ec 	.word	0x080049ec

08002f1c <memset>:
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4402      	add	r2, r0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d100      	bne.n	8002f26 <memset+0xa>
 8002f24:	4770      	bx	lr
 8002f26:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2a:	e7f9      	b.n	8002f20 <memset+0x4>

08002f2c <_free_r>:
 8002f2c:	b538      	push	{r3, r4, r5, lr}
 8002f2e:	4605      	mov	r5, r0
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d040      	beq.n	8002fb6 <_free_r+0x8a>
 8002f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f38:	1f0c      	subs	r4, r1, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bfb8      	it	lt
 8002f3e:	18e4      	addlt	r4, r4, r3
 8002f40:	f000 fc74 	bl	800382c <__malloc_lock>
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <_free_r+0x8c>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	b933      	cbnz	r3, 8002f58 <_free_r+0x2c>
 8002f4a:	6063      	str	r3, [r4, #4]
 8002f4c:	6014      	str	r4, [r2, #0]
 8002f4e:	4628      	mov	r0, r5
 8002f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f54:	f000 bc70 	b.w	8003838 <__malloc_unlock>
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d908      	bls.n	8002f6e <_free_r+0x42>
 8002f5c:	6820      	ldr	r0, [r4, #0]
 8002f5e:	1821      	adds	r1, r4, r0
 8002f60:	428b      	cmp	r3, r1
 8002f62:	bf01      	itttt	eq
 8002f64:	6819      	ldreq	r1, [r3, #0]
 8002f66:	685b      	ldreq	r3, [r3, #4]
 8002f68:	1809      	addeq	r1, r1, r0
 8002f6a:	6021      	streq	r1, [r4, #0]
 8002f6c:	e7ed      	b.n	8002f4a <_free_r+0x1e>
 8002f6e:	461a      	mov	r2, r3
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b10b      	cbz	r3, 8002f78 <_free_r+0x4c>
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	d9fa      	bls.n	8002f6e <_free_r+0x42>
 8002f78:	6811      	ldr	r1, [r2, #0]
 8002f7a:	1850      	adds	r0, r2, r1
 8002f7c:	42a0      	cmp	r0, r4
 8002f7e:	d10b      	bne.n	8002f98 <_free_r+0x6c>
 8002f80:	6820      	ldr	r0, [r4, #0]
 8002f82:	4401      	add	r1, r0
 8002f84:	1850      	adds	r0, r2, r1
 8002f86:	4283      	cmp	r3, r0
 8002f88:	6011      	str	r1, [r2, #0]
 8002f8a:	d1e0      	bne.n	8002f4e <_free_r+0x22>
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4401      	add	r1, r0
 8002f92:	6011      	str	r1, [r2, #0]
 8002f94:	6053      	str	r3, [r2, #4]
 8002f96:	e7da      	b.n	8002f4e <_free_r+0x22>
 8002f98:	d902      	bls.n	8002fa0 <_free_r+0x74>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	e7d6      	b.n	8002f4e <_free_r+0x22>
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	1821      	adds	r1, r4, r0
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	bf01      	itttt	eq
 8002fa8:	6819      	ldreq	r1, [r3, #0]
 8002faa:	685b      	ldreq	r3, [r3, #4]
 8002fac:	1809      	addeq	r1, r1, r0
 8002fae:	6021      	streq	r1, [r4, #0]
 8002fb0:	6063      	str	r3, [r4, #4]
 8002fb2:	6054      	str	r4, [r2, #4]
 8002fb4:	e7cb      	b.n	8002f4e <_free_r+0x22>
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	2000018c 	.word	0x2000018c

08002fbc <sbrk_aligned>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4e0e      	ldr	r6, [pc, #56]	; (8002ff8 <sbrk_aligned+0x3c>)
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	6831      	ldr	r1, [r6, #0]
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	b911      	cbnz	r1, 8002fce <sbrk_aligned+0x12>
 8002fc8:	f000 f92e 	bl	8003228 <_sbrk_r>
 8002fcc:	6030      	str	r0, [r6, #0]
 8002fce:	4621      	mov	r1, r4
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f929 	bl	8003228 <_sbrk_r>
 8002fd6:	1c43      	adds	r3, r0, #1
 8002fd8:	d00a      	beq.n	8002ff0 <sbrk_aligned+0x34>
 8002fda:	1cc4      	adds	r4, r0, #3
 8002fdc:	f024 0403 	bic.w	r4, r4, #3
 8002fe0:	42a0      	cmp	r0, r4
 8002fe2:	d007      	beq.n	8002ff4 <sbrk_aligned+0x38>
 8002fe4:	1a21      	subs	r1, r4, r0
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	f000 f91e 	bl	8003228 <_sbrk_r>
 8002fec:	3001      	adds	r0, #1
 8002fee:	d101      	bne.n	8002ff4 <sbrk_aligned+0x38>
 8002ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	20000190 	.word	0x20000190

08002ffc <_malloc_r>:
 8002ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003000:	1ccd      	adds	r5, r1, #3
 8003002:	f025 0503 	bic.w	r5, r5, #3
 8003006:	3508      	adds	r5, #8
 8003008:	2d0c      	cmp	r5, #12
 800300a:	bf38      	it	cc
 800300c:	250c      	movcc	r5, #12
 800300e:	2d00      	cmp	r5, #0
 8003010:	4607      	mov	r7, r0
 8003012:	db01      	blt.n	8003018 <_malloc_r+0x1c>
 8003014:	42a9      	cmp	r1, r5
 8003016:	d905      	bls.n	8003024 <_malloc_r+0x28>
 8003018:	230c      	movs	r3, #12
 800301a:	2600      	movs	r6, #0
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4630      	mov	r0, r6
 8003020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003024:	4e2e      	ldr	r6, [pc, #184]	; (80030e0 <_malloc_r+0xe4>)
 8003026:	f000 fc01 	bl	800382c <__malloc_lock>
 800302a:	6833      	ldr	r3, [r6, #0]
 800302c:	461c      	mov	r4, r3
 800302e:	bb34      	cbnz	r4, 800307e <_malloc_r+0x82>
 8003030:	4629      	mov	r1, r5
 8003032:	4638      	mov	r0, r7
 8003034:	f7ff ffc2 	bl	8002fbc <sbrk_aligned>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	4604      	mov	r4, r0
 800303c:	d14d      	bne.n	80030da <_malloc_r+0xde>
 800303e:	6834      	ldr	r4, [r6, #0]
 8003040:	4626      	mov	r6, r4
 8003042:	2e00      	cmp	r6, #0
 8003044:	d140      	bne.n	80030c8 <_malloc_r+0xcc>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	4631      	mov	r1, r6
 800304a:	4638      	mov	r0, r7
 800304c:	eb04 0803 	add.w	r8, r4, r3
 8003050:	f000 f8ea 	bl	8003228 <_sbrk_r>
 8003054:	4580      	cmp	r8, r0
 8003056:	d13a      	bne.n	80030ce <_malloc_r+0xd2>
 8003058:	6821      	ldr	r1, [r4, #0]
 800305a:	3503      	adds	r5, #3
 800305c:	1a6d      	subs	r5, r5, r1
 800305e:	f025 0503 	bic.w	r5, r5, #3
 8003062:	3508      	adds	r5, #8
 8003064:	2d0c      	cmp	r5, #12
 8003066:	bf38      	it	cc
 8003068:	250c      	movcc	r5, #12
 800306a:	4638      	mov	r0, r7
 800306c:	4629      	mov	r1, r5
 800306e:	f7ff ffa5 	bl	8002fbc <sbrk_aligned>
 8003072:	3001      	adds	r0, #1
 8003074:	d02b      	beq.n	80030ce <_malloc_r+0xd2>
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	442b      	add	r3, r5
 800307a:	6023      	str	r3, [r4, #0]
 800307c:	e00e      	b.n	800309c <_malloc_r+0xa0>
 800307e:	6822      	ldr	r2, [r4, #0]
 8003080:	1b52      	subs	r2, r2, r5
 8003082:	d41e      	bmi.n	80030c2 <_malloc_r+0xc6>
 8003084:	2a0b      	cmp	r2, #11
 8003086:	d916      	bls.n	80030b6 <_malloc_r+0xba>
 8003088:	1961      	adds	r1, r4, r5
 800308a:	42a3      	cmp	r3, r4
 800308c:	6025      	str	r5, [r4, #0]
 800308e:	bf18      	it	ne
 8003090:	6059      	strne	r1, [r3, #4]
 8003092:	6863      	ldr	r3, [r4, #4]
 8003094:	bf08      	it	eq
 8003096:	6031      	streq	r1, [r6, #0]
 8003098:	5162      	str	r2, [r4, r5]
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	4638      	mov	r0, r7
 800309e:	f104 060b 	add.w	r6, r4, #11
 80030a2:	f000 fbc9 	bl	8003838 <__malloc_unlock>
 80030a6:	f026 0607 	bic.w	r6, r6, #7
 80030aa:	1d23      	adds	r3, r4, #4
 80030ac:	1af2      	subs	r2, r6, r3
 80030ae:	d0b6      	beq.n	800301e <_malloc_r+0x22>
 80030b0:	1b9b      	subs	r3, r3, r6
 80030b2:	50a3      	str	r3, [r4, r2]
 80030b4:	e7b3      	b.n	800301e <_malloc_r+0x22>
 80030b6:	6862      	ldr	r2, [r4, #4]
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	bf0c      	ite	eq
 80030bc:	6032      	streq	r2, [r6, #0]
 80030be:	605a      	strne	r2, [r3, #4]
 80030c0:	e7ec      	b.n	800309c <_malloc_r+0xa0>
 80030c2:	4623      	mov	r3, r4
 80030c4:	6864      	ldr	r4, [r4, #4]
 80030c6:	e7b2      	b.n	800302e <_malloc_r+0x32>
 80030c8:	4634      	mov	r4, r6
 80030ca:	6876      	ldr	r6, [r6, #4]
 80030cc:	e7b9      	b.n	8003042 <_malloc_r+0x46>
 80030ce:	230c      	movs	r3, #12
 80030d0:	4638      	mov	r0, r7
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	f000 fbb0 	bl	8003838 <__malloc_unlock>
 80030d8:	e7a1      	b.n	800301e <_malloc_r+0x22>
 80030da:	6025      	str	r5, [r4, #0]
 80030dc:	e7de      	b.n	800309c <_malloc_r+0xa0>
 80030de:	bf00      	nop
 80030e0:	2000018c 	.word	0x2000018c

080030e4 <iprintf>:
 80030e4:	b40f      	push	{r0, r1, r2, r3}
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <iprintf+0x2c>)
 80030e8:	b513      	push	{r0, r1, r4, lr}
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	b124      	cbz	r4, 80030f8 <iprintf+0x14>
 80030ee:	69a3      	ldr	r3, [r4, #24]
 80030f0:	b913      	cbnz	r3, 80030f8 <iprintf+0x14>
 80030f2:	4620      	mov	r0, r4
 80030f4:	f000 fa94 	bl	8003620 <__sinit>
 80030f8:	ab05      	add	r3, sp, #20
 80030fa:	4620      	mov	r0, r4
 80030fc:	9a04      	ldr	r2, [sp, #16]
 80030fe:	68a1      	ldr	r1, [r4, #8]
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	f000 fbc7 	bl	8003894 <_vfiprintf_r>
 8003106:	b002      	add	sp, #8
 8003108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800310c:	b004      	add	sp, #16
 800310e:	4770      	bx	lr
 8003110:	20000034 	.word	0x20000034

08003114 <putchar>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <putchar+0x24>)
 8003118:	4605      	mov	r5, r0
 800311a:	681c      	ldr	r4, [r3, #0]
 800311c:	b124      	cbz	r4, 8003128 <putchar+0x14>
 800311e:	69a3      	ldr	r3, [r4, #24]
 8003120:	b913      	cbnz	r3, 8003128 <putchar+0x14>
 8003122:	4620      	mov	r0, r4
 8003124:	f000 fa7c 	bl	8003620 <__sinit>
 8003128:	4629      	mov	r1, r5
 800312a:	4620      	mov	r0, r4
 800312c:	68a2      	ldr	r2, [r4, #8]
 800312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003132:	f000 be75 	b.w	8003e20 <_putc_r>
 8003136:	bf00      	nop
 8003138:	20000034 	.word	0x20000034

0800313c <_puts_r>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	460e      	mov	r6, r1
 8003140:	4605      	mov	r5, r0
 8003142:	b118      	cbz	r0, 800314c <_puts_r+0x10>
 8003144:	6983      	ldr	r3, [r0, #24]
 8003146:	b90b      	cbnz	r3, 800314c <_puts_r+0x10>
 8003148:	f000 fa6a 	bl	8003620 <__sinit>
 800314c:	69ab      	ldr	r3, [r5, #24]
 800314e:	68ac      	ldr	r4, [r5, #8]
 8003150:	b913      	cbnz	r3, 8003158 <_puts_r+0x1c>
 8003152:	4628      	mov	r0, r5
 8003154:	f000 fa64 	bl	8003620 <__sinit>
 8003158:	4b2c      	ldr	r3, [pc, #176]	; (800320c <_puts_r+0xd0>)
 800315a:	429c      	cmp	r4, r3
 800315c:	d120      	bne.n	80031a0 <_puts_r+0x64>
 800315e:	686c      	ldr	r4, [r5, #4]
 8003160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003162:	07db      	lsls	r3, r3, #31
 8003164:	d405      	bmi.n	8003172 <_puts_r+0x36>
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	0598      	lsls	r0, r3, #22
 800316a:	d402      	bmi.n	8003172 <_puts_r+0x36>
 800316c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800316e:	f000 faf5 	bl	800375c <__retarget_lock_acquire_recursive>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	0719      	lsls	r1, r3, #28
 8003176:	d51d      	bpl.n	80031b4 <_puts_r+0x78>
 8003178:	6923      	ldr	r3, [r4, #16]
 800317a:	b1db      	cbz	r3, 80031b4 <_puts_r+0x78>
 800317c:	3e01      	subs	r6, #1
 800317e:	68a3      	ldr	r3, [r4, #8]
 8003180:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003184:	3b01      	subs	r3, #1
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	bb39      	cbnz	r1, 80031da <_puts_r+0x9e>
 800318a:	2b00      	cmp	r3, #0
 800318c:	da38      	bge.n	8003200 <_puts_r+0xc4>
 800318e:	4622      	mov	r2, r4
 8003190:	210a      	movs	r1, #10
 8003192:	4628      	mov	r0, r5
 8003194:	f000 f86e 	bl	8003274 <__swbuf_r>
 8003198:	3001      	adds	r0, #1
 800319a:	d011      	beq.n	80031c0 <_puts_r+0x84>
 800319c:	250a      	movs	r5, #10
 800319e:	e011      	b.n	80031c4 <_puts_r+0x88>
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <_puts_r+0xd4>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	d101      	bne.n	80031aa <_puts_r+0x6e>
 80031a6:	68ac      	ldr	r4, [r5, #8]
 80031a8:	e7da      	b.n	8003160 <_puts_r+0x24>
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <_puts_r+0xd8>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	bf08      	it	eq
 80031b0:	68ec      	ldreq	r4, [r5, #12]
 80031b2:	e7d5      	b.n	8003160 <_puts_r+0x24>
 80031b4:	4621      	mov	r1, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	f000 f8ae 	bl	8003318 <__swsetup_r>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d0dd      	beq.n	800317c <_puts_r+0x40>
 80031c0:	f04f 35ff 	mov.w	r5, #4294967295
 80031c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031c6:	07da      	lsls	r2, r3, #31
 80031c8:	d405      	bmi.n	80031d6 <_puts_r+0x9a>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	059b      	lsls	r3, r3, #22
 80031ce:	d402      	bmi.n	80031d6 <_puts_r+0x9a>
 80031d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031d2:	f000 fac4 	bl	800375e <__retarget_lock_release_recursive>
 80031d6:	4628      	mov	r0, r5
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da04      	bge.n	80031e8 <_puts_r+0xac>
 80031de:	69a2      	ldr	r2, [r4, #24]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	dc06      	bgt.n	80031f2 <_puts_r+0xb6>
 80031e4:	290a      	cmp	r1, #10
 80031e6:	d004      	beq.n	80031f2 <_puts_r+0xb6>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	6022      	str	r2, [r4, #0]
 80031ee:	7019      	strb	r1, [r3, #0]
 80031f0:	e7c5      	b.n	800317e <_puts_r+0x42>
 80031f2:	4622      	mov	r2, r4
 80031f4:	4628      	mov	r0, r5
 80031f6:	f000 f83d 	bl	8003274 <__swbuf_r>
 80031fa:	3001      	adds	r0, #1
 80031fc:	d1bf      	bne.n	800317e <_puts_r+0x42>
 80031fe:	e7df      	b.n	80031c0 <_puts_r+0x84>
 8003200:	250a      	movs	r5, #10
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	6022      	str	r2, [r4, #0]
 8003208:	701d      	strb	r5, [r3, #0]
 800320a:	e7db      	b.n	80031c4 <_puts_r+0x88>
 800320c:	08004974 	.word	0x08004974
 8003210:	08004994 	.word	0x08004994
 8003214:	08004954 	.word	0x08004954

08003218 <puts>:
 8003218:	4b02      	ldr	r3, [pc, #8]	; (8003224 <puts+0xc>)
 800321a:	4601      	mov	r1, r0
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	f7ff bf8d 	b.w	800313c <_puts_r>
 8003222:	bf00      	nop
 8003224:	20000034 	.word	0x20000034

08003228 <_sbrk_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	2300      	movs	r3, #0
 800322c:	4d05      	ldr	r5, [pc, #20]	; (8003244 <_sbrk_r+0x1c>)
 800322e:	4604      	mov	r4, r0
 8003230:	4608      	mov	r0, r1
 8003232:	602b      	str	r3, [r5, #0]
 8003234:	f7fd f9e0 	bl	80005f8 <_sbrk>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d102      	bne.n	8003242 <_sbrk_r+0x1a>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	b103      	cbz	r3, 8003242 <_sbrk_r+0x1a>
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	bd38      	pop	{r3, r4, r5, pc}
 8003244:	20000198 	.word	0x20000198

08003248 <viprintf>:
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <viprintf+0x28>)
 800324a:	b570      	push	{r4, r5, r6, lr}
 800324c:	681c      	ldr	r4, [r3, #0]
 800324e:	4605      	mov	r5, r0
 8003250:	460e      	mov	r6, r1
 8003252:	b124      	cbz	r4, 800325e <viprintf+0x16>
 8003254:	69a3      	ldr	r3, [r4, #24]
 8003256:	b913      	cbnz	r3, 800325e <viprintf+0x16>
 8003258:	4620      	mov	r0, r4
 800325a:	f000 f9e1 	bl	8003620 <__sinit>
 800325e:	4633      	mov	r3, r6
 8003260:	462a      	mov	r2, r5
 8003262:	4620      	mov	r0, r4
 8003264:	68a1      	ldr	r1, [r4, #8]
 8003266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800326a:	f000 bb13 	b.w	8003894 <_vfiprintf_r>
 800326e:	bf00      	nop
 8003270:	20000034 	.word	0x20000034

08003274 <__swbuf_r>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	460e      	mov	r6, r1
 8003278:	4614      	mov	r4, r2
 800327a:	4605      	mov	r5, r0
 800327c:	b118      	cbz	r0, 8003286 <__swbuf_r+0x12>
 800327e:	6983      	ldr	r3, [r0, #24]
 8003280:	b90b      	cbnz	r3, 8003286 <__swbuf_r+0x12>
 8003282:	f000 f9cd 	bl	8003620 <__sinit>
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <__swbuf_r+0x98>)
 8003288:	429c      	cmp	r4, r3
 800328a:	d12b      	bne.n	80032e4 <__swbuf_r+0x70>
 800328c:	686c      	ldr	r4, [r5, #4]
 800328e:	69a3      	ldr	r3, [r4, #24]
 8003290:	60a3      	str	r3, [r4, #8]
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	071a      	lsls	r2, r3, #28
 8003296:	d52f      	bpl.n	80032f8 <__swbuf_r+0x84>
 8003298:	6923      	ldr	r3, [r4, #16]
 800329a:	b36b      	cbz	r3, 80032f8 <__swbuf_r+0x84>
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	b2f6      	uxtb	r6, r6
 80032a2:	1ac0      	subs	r0, r0, r3
 80032a4:	6963      	ldr	r3, [r4, #20]
 80032a6:	4637      	mov	r7, r6
 80032a8:	4283      	cmp	r3, r0
 80032aa:	dc04      	bgt.n	80032b6 <__swbuf_r+0x42>
 80032ac:	4621      	mov	r1, r4
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 f922 	bl	80034f8 <_fflush_r>
 80032b4:	bb30      	cbnz	r0, 8003304 <__swbuf_r+0x90>
 80032b6:	68a3      	ldr	r3, [r4, #8]
 80032b8:	3001      	adds	r0, #1
 80032ba:	3b01      	subs	r3, #1
 80032bc:	60a3      	str	r3, [r4, #8]
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	6022      	str	r2, [r4, #0]
 80032c4:	701e      	strb	r6, [r3, #0]
 80032c6:	6963      	ldr	r3, [r4, #20]
 80032c8:	4283      	cmp	r3, r0
 80032ca:	d004      	beq.n	80032d6 <__swbuf_r+0x62>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	07db      	lsls	r3, r3, #31
 80032d0:	d506      	bpl.n	80032e0 <__swbuf_r+0x6c>
 80032d2:	2e0a      	cmp	r6, #10
 80032d4:	d104      	bne.n	80032e0 <__swbuf_r+0x6c>
 80032d6:	4621      	mov	r1, r4
 80032d8:	4628      	mov	r0, r5
 80032da:	f000 f90d 	bl	80034f8 <_fflush_r>
 80032de:	b988      	cbnz	r0, 8003304 <__swbuf_r+0x90>
 80032e0:	4638      	mov	r0, r7
 80032e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <__swbuf_r+0x9c>)
 80032e6:	429c      	cmp	r4, r3
 80032e8:	d101      	bne.n	80032ee <__swbuf_r+0x7a>
 80032ea:	68ac      	ldr	r4, [r5, #8]
 80032ec:	e7cf      	b.n	800328e <__swbuf_r+0x1a>
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <__swbuf_r+0xa0>)
 80032f0:	429c      	cmp	r4, r3
 80032f2:	bf08      	it	eq
 80032f4:	68ec      	ldreq	r4, [r5, #12]
 80032f6:	e7ca      	b.n	800328e <__swbuf_r+0x1a>
 80032f8:	4621      	mov	r1, r4
 80032fa:	4628      	mov	r0, r5
 80032fc:	f000 f80c 	bl	8003318 <__swsetup_r>
 8003300:	2800      	cmp	r0, #0
 8003302:	d0cb      	beq.n	800329c <__swbuf_r+0x28>
 8003304:	f04f 37ff 	mov.w	r7, #4294967295
 8003308:	e7ea      	b.n	80032e0 <__swbuf_r+0x6c>
 800330a:	bf00      	nop
 800330c:	08004974 	.word	0x08004974
 8003310:	08004994 	.word	0x08004994
 8003314:	08004954 	.word	0x08004954

08003318 <__swsetup_r>:
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <__swsetup_r+0xcc>)
 800331a:	b570      	push	{r4, r5, r6, lr}
 800331c:	681d      	ldr	r5, [r3, #0]
 800331e:	4606      	mov	r6, r0
 8003320:	460c      	mov	r4, r1
 8003322:	b125      	cbz	r5, 800332e <__swsetup_r+0x16>
 8003324:	69ab      	ldr	r3, [r5, #24]
 8003326:	b913      	cbnz	r3, 800332e <__swsetup_r+0x16>
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f979 	bl	8003620 <__sinit>
 800332e:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <__swsetup_r+0xd0>)
 8003330:	429c      	cmp	r4, r3
 8003332:	d10f      	bne.n	8003354 <__swsetup_r+0x3c>
 8003334:	686c      	ldr	r4, [r5, #4]
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800333c:	0719      	lsls	r1, r3, #28
 800333e:	d42c      	bmi.n	800339a <__swsetup_r+0x82>
 8003340:	06dd      	lsls	r5, r3, #27
 8003342:	d411      	bmi.n	8003368 <__swsetup_r+0x50>
 8003344:	2309      	movs	r3, #9
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	81a3      	strh	r3, [r4, #12]
 8003352:	e03e      	b.n	80033d2 <__swsetup_r+0xba>
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <__swsetup_r+0xd4>)
 8003356:	429c      	cmp	r4, r3
 8003358:	d101      	bne.n	800335e <__swsetup_r+0x46>
 800335a:	68ac      	ldr	r4, [r5, #8]
 800335c:	e7eb      	b.n	8003336 <__swsetup_r+0x1e>
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <__swsetup_r+0xd8>)
 8003360:	429c      	cmp	r4, r3
 8003362:	bf08      	it	eq
 8003364:	68ec      	ldreq	r4, [r5, #12]
 8003366:	e7e6      	b.n	8003336 <__swsetup_r+0x1e>
 8003368:	0758      	lsls	r0, r3, #29
 800336a:	d512      	bpl.n	8003392 <__swsetup_r+0x7a>
 800336c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800336e:	b141      	cbz	r1, 8003382 <__swsetup_r+0x6a>
 8003370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003374:	4299      	cmp	r1, r3
 8003376:	d002      	beq.n	800337e <__swsetup_r+0x66>
 8003378:	4630      	mov	r0, r6
 800337a:	f7ff fdd7 	bl	8002f2c <_free_r>
 800337e:	2300      	movs	r3, #0
 8003380:	6363      	str	r3, [r4, #52]	; 0x34
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	2300      	movs	r3, #0
 800338c:	6063      	str	r3, [r4, #4]
 800338e:	6923      	ldr	r3, [r4, #16]
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	b94b      	cbnz	r3, 80033b2 <__swsetup_r+0x9a>
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a8:	d003      	beq.n	80033b2 <__swsetup_r+0x9a>
 80033aa:	4621      	mov	r1, r4
 80033ac:	4630      	mov	r0, r6
 80033ae:	f000 f9fd 	bl	80037ac <__smakebuf_r>
 80033b2:	89a0      	ldrh	r0, [r4, #12]
 80033b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033b8:	f010 0301 	ands.w	r3, r0, #1
 80033bc:	d00a      	beq.n	80033d4 <__swsetup_r+0xbc>
 80033be:	2300      	movs	r3, #0
 80033c0:	60a3      	str	r3, [r4, #8]
 80033c2:	6963      	ldr	r3, [r4, #20]
 80033c4:	425b      	negs	r3, r3
 80033c6:	61a3      	str	r3, [r4, #24]
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	b943      	cbnz	r3, 80033de <__swsetup_r+0xc6>
 80033cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033d0:	d1ba      	bne.n	8003348 <__swsetup_r+0x30>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	0781      	lsls	r1, r0, #30
 80033d6:	bf58      	it	pl
 80033d8:	6963      	ldrpl	r3, [r4, #20]
 80033da:	60a3      	str	r3, [r4, #8]
 80033dc:	e7f4      	b.n	80033c8 <__swsetup_r+0xb0>
 80033de:	2000      	movs	r0, #0
 80033e0:	e7f7      	b.n	80033d2 <__swsetup_r+0xba>
 80033e2:	bf00      	nop
 80033e4:	20000034 	.word	0x20000034
 80033e8:	08004974 	.word	0x08004974
 80033ec:	08004994 	.word	0x08004994
 80033f0:	08004954 	.word	0x08004954

080033f4 <__sflush_r>:
 80033f4:	898a      	ldrh	r2, [r1, #12]
 80033f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f8:	4605      	mov	r5, r0
 80033fa:	0710      	lsls	r0, r2, #28
 80033fc:	460c      	mov	r4, r1
 80033fe:	d457      	bmi.n	80034b0 <__sflush_r+0xbc>
 8003400:	684b      	ldr	r3, [r1, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	dc04      	bgt.n	8003410 <__sflush_r+0x1c>
 8003406:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	dc01      	bgt.n	8003410 <__sflush_r+0x1c>
 800340c:	2000      	movs	r0, #0
 800340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003412:	2e00      	cmp	r6, #0
 8003414:	d0fa      	beq.n	800340c <__sflush_r+0x18>
 8003416:	2300      	movs	r3, #0
 8003418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800341c:	682f      	ldr	r7, [r5, #0]
 800341e:	602b      	str	r3, [r5, #0]
 8003420:	d032      	beq.n	8003488 <__sflush_r+0x94>
 8003422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	075a      	lsls	r2, r3, #29
 8003428:	d505      	bpl.n	8003436 <__sflush_r+0x42>
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	1ac0      	subs	r0, r0, r3
 800342e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003430:	b10b      	cbz	r3, 8003436 <__sflush_r+0x42>
 8003432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003434:	1ac0      	subs	r0, r0, r3
 8003436:	2300      	movs	r3, #0
 8003438:	4602      	mov	r2, r0
 800343a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800343c:	4628      	mov	r0, r5
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	47b0      	blx	r6
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	d106      	bne.n	8003456 <__sflush_r+0x62>
 8003448:	6829      	ldr	r1, [r5, #0]
 800344a:	291d      	cmp	r1, #29
 800344c:	d82c      	bhi.n	80034a8 <__sflush_r+0xb4>
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <__sflush_r+0x100>)
 8003450:	40ca      	lsrs	r2, r1
 8003452:	07d6      	lsls	r6, r2, #31
 8003454:	d528      	bpl.n	80034a8 <__sflush_r+0xb4>
 8003456:	2200      	movs	r2, #0
 8003458:	6062      	str	r2, [r4, #4]
 800345a:	6922      	ldr	r2, [r4, #16]
 800345c:	04d9      	lsls	r1, r3, #19
 800345e:	6022      	str	r2, [r4, #0]
 8003460:	d504      	bpl.n	800346c <__sflush_r+0x78>
 8003462:	1c42      	adds	r2, r0, #1
 8003464:	d101      	bne.n	800346a <__sflush_r+0x76>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	b903      	cbnz	r3, 800346c <__sflush_r+0x78>
 800346a:	6560      	str	r0, [r4, #84]	; 0x54
 800346c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800346e:	602f      	str	r7, [r5, #0]
 8003470:	2900      	cmp	r1, #0
 8003472:	d0cb      	beq.n	800340c <__sflush_r+0x18>
 8003474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003478:	4299      	cmp	r1, r3
 800347a:	d002      	beq.n	8003482 <__sflush_r+0x8e>
 800347c:	4628      	mov	r0, r5
 800347e:	f7ff fd55 	bl	8002f2c <_free_r>
 8003482:	2000      	movs	r0, #0
 8003484:	6360      	str	r0, [r4, #52]	; 0x34
 8003486:	e7c2      	b.n	800340e <__sflush_r+0x1a>
 8003488:	6a21      	ldr	r1, [r4, #32]
 800348a:	2301      	movs	r3, #1
 800348c:	4628      	mov	r0, r5
 800348e:	47b0      	blx	r6
 8003490:	1c41      	adds	r1, r0, #1
 8003492:	d1c7      	bne.n	8003424 <__sflush_r+0x30>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0c4      	beq.n	8003424 <__sflush_r+0x30>
 800349a:	2b1d      	cmp	r3, #29
 800349c:	d001      	beq.n	80034a2 <__sflush_r+0xae>
 800349e:	2b16      	cmp	r3, #22
 80034a0:	d101      	bne.n	80034a6 <__sflush_r+0xb2>
 80034a2:	602f      	str	r7, [r5, #0]
 80034a4:	e7b2      	b.n	800340c <__sflush_r+0x18>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ac:	81a3      	strh	r3, [r4, #12]
 80034ae:	e7ae      	b.n	800340e <__sflush_r+0x1a>
 80034b0:	690f      	ldr	r7, [r1, #16]
 80034b2:	2f00      	cmp	r7, #0
 80034b4:	d0aa      	beq.n	800340c <__sflush_r+0x18>
 80034b6:	0793      	lsls	r3, r2, #30
 80034b8:	bf18      	it	ne
 80034ba:	2300      	movne	r3, #0
 80034bc:	680e      	ldr	r6, [r1, #0]
 80034be:	bf08      	it	eq
 80034c0:	694b      	ldreq	r3, [r1, #20]
 80034c2:	1bf6      	subs	r6, r6, r7
 80034c4:	600f      	str	r7, [r1, #0]
 80034c6:	608b      	str	r3, [r1, #8]
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	dd9f      	ble.n	800340c <__sflush_r+0x18>
 80034cc:	4633      	mov	r3, r6
 80034ce:	463a      	mov	r2, r7
 80034d0:	4628      	mov	r0, r5
 80034d2:	6a21      	ldr	r1, [r4, #32]
 80034d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80034d8:	47e0      	blx	ip
 80034da:	2800      	cmp	r0, #0
 80034dc:	dc06      	bgt.n	80034ec <__sflush_r+0xf8>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	e790      	b.n	800340e <__sflush_r+0x1a>
 80034ec:	4407      	add	r7, r0
 80034ee:	1a36      	subs	r6, r6, r0
 80034f0:	e7ea      	b.n	80034c8 <__sflush_r+0xd4>
 80034f2:	bf00      	nop
 80034f4:	20400001 	.word	0x20400001

080034f8 <_fflush_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	690b      	ldr	r3, [r1, #16]
 80034fc:	4605      	mov	r5, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	b913      	cbnz	r3, 8003508 <_fflush_r+0x10>
 8003502:	2500      	movs	r5, #0
 8003504:	4628      	mov	r0, r5
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	b118      	cbz	r0, 8003512 <_fflush_r+0x1a>
 800350a:	6983      	ldr	r3, [r0, #24]
 800350c:	b90b      	cbnz	r3, 8003512 <_fflush_r+0x1a>
 800350e:	f000 f887 	bl	8003620 <__sinit>
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <_fflush_r+0x6c>)
 8003514:	429c      	cmp	r4, r3
 8003516:	d11b      	bne.n	8003550 <_fflush_r+0x58>
 8003518:	686c      	ldr	r4, [r5, #4]
 800351a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0ef      	beq.n	8003502 <_fflush_r+0xa>
 8003522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003524:	07d0      	lsls	r0, r2, #31
 8003526:	d404      	bmi.n	8003532 <_fflush_r+0x3a>
 8003528:	0599      	lsls	r1, r3, #22
 800352a:	d402      	bmi.n	8003532 <_fflush_r+0x3a>
 800352c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800352e:	f000 f915 	bl	800375c <__retarget_lock_acquire_recursive>
 8003532:	4628      	mov	r0, r5
 8003534:	4621      	mov	r1, r4
 8003536:	f7ff ff5d 	bl	80033f4 <__sflush_r>
 800353a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800353c:	4605      	mov	r5, r0
 800353e:	07da      	lsls	r2, r3, #31
 8003540:	d4e0      	bmi.n	8003504 <_fflush_r+0xc>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	059b      	lsls	r3, r3, #22
 8003546:	d4dd      	bmi.n	8003504 <_fflush_r+0xc>
 8003548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354a:	f000 f908 	bl	800375e <__retarget_lock_release_recursive>
 800354e:	e7d9      	b.n	8003504 <_fflush_r+0xc>
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <_fflush_r+0x70>)
 8003552:	429c      	cmp	r4, r3
 8003554:	d101      	bne.n	800355a <_fflush_r+0x62>
 8003556:	68ac      	ldr	r4, [r5, #8]
 8003558:	e7df      	b.n	800351a <_fflush_r+0x22>
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <_fflush_r+0x74>)
 800355c:	429c      	cmp	r4, r3
 800355e:	bf08      	it	eq
 8003560:	68ec      	ldreq	r4, [r5, #12]
 8003562:	e7da      	b.n	800351a <_fflush_r+0x22>
 8003564:	08004974 	.word	0x08004974
 8003568:	08004994 	.word	0x08004994
 800356c:	08004954 	.word	0x08004954

08003570 <std>:
 8003570:	2300      	movs	r3, #0
 8003572:	b510      	push	{r4, lr}
 8003574:	4604      	mov	r4, r0
 8003576:	e9c0 3300 	strd	r3, r3, [r0]
 800357a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800357e:	6083      	str	r3, [r0, #8]
 8003580:	8181      	strh	r1, [r0, #12]
 8003582:	6643      	str	r3, [r0, #100]	; 0x64
 8003584:	81c2      	strh	r2, [r0, #14]
 8003586:	6183      	str	r3, [r0, #24]
 8003588:	4619      	mov	r1, r3
 800358a:	2208      	movs	r2, #8
 800358c:	305c      	adds	r0, #92	; 0x5c
 800358e:	f7ff fcc5 	bl	8002f1c <memset>
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <std+0x38>)
 8003594:	6224      	str	r4, [r4, #32]
 8003596:	6263      	str	r3, [r4, #36]	; 0x24
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <std+0x3c>)
 800359a:	62a3      	str	r3, [r4, #40]	; 0x28
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <std+0x40>)
 800359e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <std+0x44>)
 80035a2:	6323      	str	r3, [r4, #48]	; 0x30
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	08003eb1 	.word	0x08003eb1
 80035ac:	08003ed3 	.word	0x08003ed3
 80035b0:	08003f0b 	.word	0x08003f0b
 80035b4:	08003f2f 	.word	0x08003f2f

080035b8 <_cleanup_r>:
 80035b8:	4901      	ldr	r1, [pc, #4]	; (80035c0 <_cleanup_r+0x8>)
 80035ba:	f000 b8af 	b.w	800371c <_fwalk_reent>
 80035be:	bf00      	nop
 80035c0:	080034f9 	.word	0x080034f9

080035c4 <__sfmoreglue>:
 80035c4:	2268      	movs	r2, #104	; 0x68
 80035c6:	b570      	push	{r4, r5, r6, lr}
 80035c8:	1e4d      	subs	r5, r1, #1
 80035ca:	4355      	muls	r5, r2
 80035cc:	460e      	mov	r6, r1
 80035ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035d2:	f7ff fd13 	bl	8002ffc <_malloc_r>
 80035d6:	4604      	mov	r4, r0
 80035d8:	b140      	cbz	r0, 80035ec <__sfmoreglue+0x28>
 80035da:	2100      	movs	r1, #0
 80035dc:	e9c0 1600 	strd	r1, r6, [r0]
 80035e0:	300c      	adds	r0, #12
 80035e2:	60a0      	str	r0, [r4, #8]
 80035e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035e8:	f7ff fc98 	bl	8002f1c <memset>
 80035ec:	4620      	mov	r0, r4
 80035ee:	bd70      	pop	{r4, r5, r6, pc}

080035f0 <__sfp_lock_acquire>:
 80035f0:	4801      	ldr	r0, [pc, #4]	; (80035f8 <__sfp_lock_acquire+0x8>)
 80035f2:	f000 b8b3 	b.w	800375c <__retarget_lock_acquire_recursive>
 80035f6:	bf00      	nop
 80035f8:	20000195 	.word	0x20000195

080035fc <__sfp_lock_release>:
 80035fc:	4801      	ldr	r0, [pc, #4]	; (8003604 <__sfp_lock_release+0x8>)
 80035fe:	f000 b8ae 	b.w	800375e <__retarget_lock_release_recursive>
 8003602:	bf00      	nop
 8003604:	20000195 	.word	0x20000195

08003608 <__sinit_lock_acquire>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__sinit_lock_acquire+0x8>)
 800360a:	f000 b8a7 	b.w	800375c <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	20000196 	.word	0x20000196

08003614 <__sinit_lock_release>:
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <__sinit_lock_release+0x8>)
 8003616:	f000 b8a2 	b.w	800375e <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	20000196 	.word	0x20000196

08003620 <__sinit>:
 8003620:	b510      	push	{r4, lr}
 8003622:	4604      	mov	r4, r0
 8003624:	f7ff fff0 	bl	8003608 <__sinit_lock_acquire>
 8003628:	69a3      	ldr	r3, [r4, #24]
 800362a:	b11b      	cbz	r3, 8003634 <__sinit+0x14>
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003630:	f7ff bff0 	b.w	8003614 <__sinit_lock_release>
 8003634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003638:	6523      	str	r3, [r4, #80]	; 0x50
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <__sinit+0x68>)
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <__sinit+0x6c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	62a2      	str	r2, [r4, #40]	; 0x28
 8003642:	42a3      	cmp	r3, r4
 8003644:	bf08      	it	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	4620      	mov	r0, r4
 800364a:	bf08      	it	eq
 800364c:	61a3      	streq	r3, [r4, #24]
 800364e:	f000 f81f 	bl	8003690 <__sfp>
 8003652:	6060      	str	r0, [r4, #4]
 8003654:	4620      	mov	r0, r4
 8003656:	f000 f81b 	bl	8003690 <__sfp>
 800365a:	60a0      	str	r0, [r4, #8]
 800365c:	4620      	mov	r0, r4
 800365e:	f000 f817 	bl	8003690 <__sfp>
 8003662:	2200      	movs	r2, #0
 8003664:	2104      	movs	r1, #4
 8003666:	60e0      	str	r0, [r4, #12]
 8003668:	6860      	ldr	r0, [r4, #4]
 800366a:	f7ff ff81 	bl	8003570 <std>
 800366e:	2201      	movs	r2, #1
 8003670:	2109      	movs	r1, #9
 8003672:	68a0      	ldr	r0, [r4, #8]
 8003674:	f7ff ff7c 	bl	8003570 <std>
 8003678:	2202      	movs	r2, #2
 800367a:	2112      	movs	r1, #18
 800367c:	68e0      	ldr	r0, [r4, #12]
 800367e:	f7ff ff77 	bl	8003570 <std>
 8003682:	2301      	movs	r3, #1
 8003684:	61a3      	str	r3, [r4, #24]
 8003686:	e7d1      	b.n	800362c <__sinit+0xc>
 8003688:	08004950 	.word	0x08004950
 800368c:	080035b9 	.word	0x080035b9

08003690 <__sfp>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	4607      	mov	r7, r0
 8003694:	f7ff ffac 	bl	80035f0 <__sfp_lock_acquire>
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <__sfp+0x84>)
 800369a:	681e      	ldr	r6, [r3, #0]
 800369c:	69b3      	ldr	r3, [r6, #24]
 800369e:	b913      	cbnz	r3, 80036a6 <__sfp+0x16>
 80036a0:	4630      	mov	r0, r6
 80036a2:	f7ff ffbd 	bl	8003620 <__sinit>
 80036a6:	3648      	adds	r6, #72	; 0x48
 80036a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	d503      	bpl.n	80036b8 <__sfp+0x28>
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	b30b      	cbz	r3, 80036f8 <__sfp+0x68>
 80036b4:	6836      	ldr	r6, [r6, #0]
 80036b6:	e7f7      	b.n	80036a8 <__sfp+0x18>
 80036b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036bc:	b9d5      	cbnz	r5, 80036f4 <__sfp+0x64>
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <__sfp+0x88>)
 80036c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036c4:	60e3      	str	r3, [r4, #12]
 80036c6:	6665      	str	r5, [r4, #100]	; 0x64
 80036c8:	f000 f847 	bl	800375a <__retarget_lock_init_recursive>
 80036cc:	f7ff ff96 	bl	80035fc <__sfp_lock_release>
 80036d0:	2208      	movs	r2, #8
 80036d2:	4629      	mov	r1, r5
 80036d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036dc:	6025      	str	r5, [r4, #0]
 80036de:	61a5      	str	r5, [r4, #24]
 80036e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036e4:	f7ff fc1a 	bl	8002f1c <memset>
 80036e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036f0:	4620      	mov	r0, r4
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	3468      	adds	r4, #104	; 0x68
 80036f6:	e7d9      	b.n	80036ac <__sfp+0x1c>
 80036f8:	2104      	movs	r1, #4
 80036fa:	4638      	mov	r0, r7
 80036fc:	f7ff ff62 	bl	80035c4 <__sfmoreglue>
 8003700:	4604      	mov	r4, r0
 8003702:	6030      	str	r0, [r6, #0]
 8003704:	2800      	cmp	r0, #0
 8003706:	d1d5      	bne.n	80036b4 <__sfp+0x24>
 8003708:	f7ff ff78 	bl	80035fc <__sfp_lock_release>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	e7ee      	b.n	80036f0 <__sfp+0x60>
 8003712:	bf00      	nop
 8003714:	08004950 	.word	0x08004950
 8003718:	ffff0001 	.word	0xffff0001

0800371c <_fwalk_reent>:
 800371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003720:	4606      	mov	r6, r0
 8003722:	4688      	mov	r8, r1
 8003724:	2700      	movs	r7, #0
 8003726:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800372a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800372e:	f1b9 0901 	subs.w	r9, r9, #1
 8003732:	d505      	bpl.n	8003740 <_fwalk_reent+0x24>
 8003734:	6824      	ldr	r4, [r4, #0]
 8003736:	2c00      	cmp	r4, #0
 8003738:	d1f7      	bne.n	800372a <_fwalk_reent+0xe>
 800373a:	4638      	mov	r0, r7
 800373c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003740:	89ab      	ldrh	r3, [r5, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d907      	bls.n	8003756 <_fwalk_reent+0x3a>
 8003746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800374a:	3301      	adds	r3, #1
 800374c:	d003      	beq.n	8003756 <_fwalk_reent+0x3a>
 800374e:	4629      	mov	r1, r5
 8003750:	4630      	mov	r0, r6
 8003752:	47c0      	blx	r8
 8003754:	4307      	orrs	r7, r0
 8003756:	3568      	adds	r5, #104	; 0x68
 8003758:	e7e9      	b.n	800372e <_fwalk_reent+0x12>

0800375a <__retarget_lock_init_recursive>:
 800375a:	4770      	bx	lr

0800375c <__retarget_lock_acquire_recursive>:
 800375c:	4770      	bx	lr

0800375e <__retarget_lock_release_recursive>:
 800375e:	4770      	bx	lr

08003760 <__swhatbuf_r>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	460e      	mov	r6, r1
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	4614      	mov	r4, r2
 800376a:	2900      	cmp	r1, #0
 800376c:	461d      	mov	r5, r3
 800376e:	b096      	sub	sp, #88	; 0x58
 8003770:	da08      	bge.n	8003784 <__swhatbuf_r+0x24>
 8003772:	2200      	movs	r2, #0
 8003774:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003778:	602a      	str	r2, [r5, #0]
 800377a:	061a      	lsls	r2, r3, #24
 800377c:	d410      	bmi.n	80037a0 <__swhatbuf_r+0x40>
 800377e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003782:	e00e      	b.n	80037a2 <__swhatbuf_r+0x42>
 8003784:	466a      	mov	r2, sp
 8003786:	f000 fbf9 	bl	8003f7c <_fstat_r>
 800378a:	2800      	cmp	r0, #0
 800378c:	dbf1      	blt.n	8003772 <__swhatbuf_r+0x12>
 800378e:	9a01      	ldr	r2, [sp, #4]
 8003790:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003794:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003798:	425a      	negs	r2, r3
 800379a:	415a      	adcs	r2, r3
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	e7ee      	b.n	800377e <__swhatbuf_r+0x1e>
 80037a0:	2340      	movs	r3, #64	; 0x40
 80037a2:	2000      	movs	r0, #0
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	b016      	add	sp, #88	; 0x58
 80037a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080037ac <__smakebuf_r>:
 80037ac:	898b      	ldrh	r3, [r1, #12]
 80037ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037b0:	079d      	lsls	r5, r3, #30
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	d507      	bpl.n	80037c8 <__smakebuf_r+0x1c>
 80037b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	2301      	movs	r3, #1
 80037c2:	6163      	str	r3, [r4, #20]
 80037c4:	b002      	add	sp, #8
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	466a      	mov	r2, sp
 80037ca:	ab01      	add	r3, sp, #4
 80037cc:	f7ff ffc8 	bl	8003760 <__swhatbuf_r>
 80037d0:	9900      	ldr	r1, [sp, #0]
 80037d2:	4605      	mov	r5, r0
 80037d4:	4630      	mov	r0, r6
 80037d6:	f7ff fc11 	bl	8002ffc <_malloc_r>
 80037da:	b948      	cbnz	r0, 80037f0 <__smakebuf_r+0x44>
 80037dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e0:	059a      	lsls	r2, r3, #22
 80037e2:	d4ef      	bmi.n	80037c4 <__smakebuf_r+0x18>
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	e7e3      	b.n	80037b8 <__smakebuf_r+0xc>
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <__smakebuf_r+0x7c>)
 80037f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	6020      	str	r0, [r4, #0]
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	9b00      	ldr	r3, [sp, #0]
 8003800:	6120      	str	r0, [r4, #16]
 8003802:	6163      	str	r3, [r4, #20]
 8003804:	9b01      	ldr	r3, [sp, #4]
 8003806:	b15b      	cbz	r3, 8003820 <__smakebuf_r+0x74>
 8003808:	4630      	mov	r0, r6
 800380a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800380e:	f000 fbc7 	bl	8003fa0 <_isatty_r>
 8003812:	b128      	cbz	r0, 8003820 <__smakebuf_r+0x74>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	89a0      	ldrh	r0, [r4, #12]
 8003822:	4305      	orrs	r5, r0
 8003824:	81a5      	strh	r5, [r4, #12]
 8003826:	e7cd      	b.n	80037c4 <__smakebuf_r+0x18>
 8003828:	080035b9 	.word	0x080035b9

0800382c <__malloc_lock>:
 800382c:	4801      	ldr	r0, [pc, #4]	; (8003834 <__malloc_lock+0x8>)
 800382e:	f7ff bf95 	b.w	800375c <__retarget_lock_acquire_recursive>
 8003832:	bf00      	nop
 8003834:	20000194 	.word	0x20000194

08003838 <__malloc_unlock>:
 8003838:	4801      	ldr	r0, [pc, #4]	; (8003840 <__malloc_unlock+0x8>)
 800383a:	f7ff bf90 	b.w	800375e <__retarget_lock_release_recursive>
 800383e:	bf00      	nop
 8003840:	20000194 	.word	0x20000194

08003844 <__sfputc_r>:
 8003844:	6893      	ldr	r3, [r2, #8]
 8003846:	b410      	push	{r4}
 8003848:	3b01      	subs	r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	6093      	str	r3, [r2, #8]
 800384e:	da07      	bge.n	8003860 <__sfputc_r+0x1c>
 8003850:	6994      	ldr	r4, [r2, #24]
 8003852:	42a3      	cmp	r3, r4
 8003854:	db01      	blt.n	800385a <__sfputc_r+0x16>
 8003856:	290a      	cmp	r1, #10
 8003858:	d102      	bne.n	8003860 <__sfputc_r+0x1c>
 800385a:	bc10      	pop	{r4}
 800385c:	f7ff bd0a 	b.w	8003274 <__swbuf_r>
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	1c58      	adds	r0, r3, #1
 8003864:	6010      	str	r0, [r2, #0]
 8003866:	7019      	strb	r1, [r3, #0]
 8003868:	4608      	mov	r0, r1
 800386a:	bc10      	pop	{r4}
 800386c:	4770      	bx	lr

0800386e <__sfputs_r>:
 800386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003870:	4606      	mov	r6, r0
 8003872:	460f      	mov	r7, r1
 8003874:	4614      	mov	r4, r2
 8003876:	18d5      	adds	r5, r2, r3
 8003878:	42ac      	cmp	r4, r5
 800387a:	d101      	bne.n	8003880 <__sfputs_r+0x12>
 800387c:	2000      	movs	r0, #0
 800387e:	e007      	b.n	8003890 <__sfputs_r+0x22>
 8003880:	463a      	mov	r2, r7
 8003882:	4630      	mov	r0, r6
 8003884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003888:	f7ff ffdc 	bl	8003844 <__sfputc_r>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d1f3      	bne.n	8003878 <__sfputs_r+0xa>
 8003890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003894 <_vfiprintf_r>:
 8003894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003898:	460d      	mov	r5, r1
 800389a:	4614      	mov	r4, r2
 800389c:	4698      	mov	r8, r3
 800389e:	4606      	mov	r6, r0
 80038a0:	b09d      	sub	sp, #116	; 0x74
 80038a2:	b118      	cbz	r0, 80038ac <_vfiprintf_r+0x18>
 80038a4:	6983      	ldr	r3, [r0, #24]
 80038a6:	b90b      	cbnz	r3, 80038ac <_vfiprintf_r+0x18>
 80038a8:	f7ff feba 	bl	8003620 <__sinit>
 80038ac:	4b89      	ldr	r3, [pc, #548]	; (8003ad4 <_vfiprintf_r+0x240>)
 80038ae:	429d      	cmp	r5, r3
 80038b0:	d11b      	bne.n	80038ea <_vfiprintf_r+0x56>
 80038b2:	6875      	ldr	r5, [r6, #4]
 80038b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	d405      	bmi.n	80038c6 <_vfiprintf_r+0x32>
 80038ba:	89ab      	ldrh	r3, [r5, #12]
 80038bc:	059a      	lsls	r2, r3, #22
 80038be:	d402      	bmi.n	80038c6 <_vfiprintf_r+0x32>
 80038c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038c2:	f7ff ff4b 	bl	800375c <__retarget_lock_acquire_recursive>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	071b      	lsls	r3, r3, #28
 80038ca:	d501      	bpl.n	80038d0 <_vfiprintf_r+0x3c>
 80038cc:	692b      	ldr	r3, [r5, #16]
 80038ce:	b9eb      	cbnz	r3, 800390c <_vfiprintf_r+0x78>
 80038d0:	4629      	mov	r1, r5
 80038d2:	4630      	mov	r0, r6
 80038d4:	f7ff fd20 	bl	8003318 <__swsetup_r>
 80038d8:	b1c0      	cbz	r0, 800390c <_vfiprintf_r+0x78>
 80038da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038dc:	07dc      	lsls	r4, r3, #31
 80038de:	d50e      	bpl.n	80038fe <_vfiprintf_r+0x6a>
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	b01d      	add	sp, #116	; 0x74
 80038e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ea:	4b7b      	ldr	r3, [pc, #492]	; (8003ad8 <_vfiprintf_r+0x244>)
 80038ec:	429d      	cmp	r5, r3
 80038ee:	d101      	bne.n	80038f4 <_vfiprintf_r+0x60>
 80038f0:	68b5      	ldr	r5, [r6, #8]
 80038f2:	e7df      	b.n	80038b4 <_vfiprintf_r+0x20>
 80038f4:	4b79      	ldr	r3, [pc, #484]	; (8003adc <_vfiprintf_r+0x248>)
 80038f6:	429d      	cmp	r5, r3
 80038f8:	bf08      	it	eq
 80038fa:	68f5      	ldreq	r5, [r6, #12]
 80038fc:	e7da      	b.n	80038b4 <_vfiprintf_r+0x20>
 80038fe:	89ab      	ldrh	r3, [r5, #12]
 8003900:	0598      	lsls	r0, r3, #22
 8003902:	d4ed      	bmi.n	80038e0 <_vfiprintf_r+0x4c>
 8003904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003906:	f7ff ff2a 	bl	800375e <__retarget_lock_release_recursive>
 800390a:	e7e9      	b.n	80038e0 <_vfiprintf_r+0x4c>
 800390c:	2300      	movs	r3, #0
 800390e:	9309      	str	r3, [sp, #36]	; 0x24
 8003910:	2320      	movs	r3, #32
 8003912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003916:	2330      	movs	r3, #48	; 0x30
 8003918:	f04f 0901 	mov.w	r9, #1
 800391c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003920:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003ae0 <_vfiprintf_r+0x24c>
 8003924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003928:	4623      	mov	r3, r4
 800392a:	469a      	mov	sl, r3
 800392c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003930:	b10a      	cbz	r2, 8003936 <_vfiprintf_r+0xa2>
 8003932:	2a25      	cmp	r2, #37	; 0x25
 8003934:	d1f9      	bne.n	800392a <_vfiprintf_r+0x96>
 8003936:	ebba 0b04 	subs.w	fp, sl, r4
 800393a:	d00b      	beq.n	8003954 <_vfiprintf_r+0xc0>
 800393c:	465b      	mov	r3, fp
 800393e:	4622      	mov	r2, r4
 8003940:	4629      	mov	r1, r5
 8003942:	4630      	mov	r0, r6
 8003944:	f7ff ff93 	bl	800386e <__sfputs_r>
 8003948:	3001      	adds	r0, #1
 800394a:	f000 80aa 	beq.w	8003aa2 <_vfiprintf_r+0x20e>
 800394e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003950:	445a      	add	r2, fp
 8003952:	9209      	str	r2, [sp, #36]	; 0x24
 8003954:	f89a 3000 	ldrb.w	r3, [sl]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a2 	beq.w	8003aa2 <_vfiprintf_r+0x20e>
 800395e:	2300      	movs	r3, #0
 8003960:	f04f 32ff 	mov.w	r2, #4294967295
 8003964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003968:	f10a 0a01 	add.w	sl, sl, #1
 800396c:	9304      	str	r3, [sp, #16]
 800396e:	9307      	str	r3, [sp, #28]
 8003970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003974:	931a      	str	r3, [sp, #104]	; 0x68
 8003976:	4654      	mov	r4, sl
 8003978:	2205      	movs	r2, #5
 800397a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397e:	4858      	ldr	r0, [pc, #352]	; (8003ae0 <_vfiprintf_r+0x24c>)
 8003980:	f000 fb30 	bl	8003fe4 <memchr>
 8003984:	9a04      	ldr	r2, [sp, #16]
 8003986:	b9d8      	cbnz	r0, 80039c0 <_vfiprintf_r+0x12c>
 8003988:	06d1      	lsls	r1, r2, #27
 800398a:	bf44      	itt	mi
 800398c:	2320      	movmi	r3, #32
 800398e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003992:	0713      	lsls	r3, r2, #28
 8003994:	bf44      	itt	mi
 8003996:	232b      	movmi	r3, #43	; 0x2b
 8003998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800399c:	f89a 3000 	ldrb.w	r3, [sl]
 80039a0:	2b2a      	cmp	r3, #42	; 0x2a
 80039a2:	d015      	beq.n	80039d0 <_vfiprintf_r+0x13c>
 80039a4:	4654      	mov	r4, sl
 80039a6:	2000      	movs	r0, #0
 80039a8:	f04f 0c0a 	mov.w	ip, #10
 80039ac:	9a07      	ldr	r2, [sp, #28]
 80039ae:	4621      	mov	r1, r4
 80039b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039b4:	3b30      	subs	r3, #48	; 0x30
 80039b6:	2b09      	cmp	r3, #9
 80039b8:	d94e      	bls.n	8003a58 <_vfiprintf_r+0x1c4>
 80039ba:	b1b0      	cbz	r0, 80039ea <_vfiprintf_r+0x156>
 80039bc:	9207      	str	r2, [sp, #28]
 80039be:	e014      	b.n	80039ea <_vfiprintf_r+0x156>
 80039c0:	eba0 0308 	sub.w	r3, r0, r8
 80039c4:	fa09 f303 	lsl.w	r3, r9, r3
 80039c8:	4313      	orrs	r3, r2
 80039ca:	46a2      	mov	sl, r4
 80039cc:	9304      	str	r3, [sp, #16]
 80039ce:	e7d2      	b.n	8003976 <_vfiprintf_r+0xe2>
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	1d19      	adds	r1, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	9103      	str	r1, [sp, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bfbb      	ittet	lt
 80039dc:	425b      	neglt	r3, r3
 80039de:	f042 0202 	orrlt.w	r2, r2, #2
 80039e2:	9307      	strge	r3, [sp, #28]
 80039e4:	9307      	strlt	r3, [sp, #28]
 80039e6:	bfb8      	it	lt
 80039e8:	9204      	strlt	r2, [sp, #16]
 80039ea:	7823      	ldrb	r3, [r4, #0]
 80039ec:	2b2e      	cmp	r3, #46	; 0x2e
 80039ee:	d10c      	bne.n	8003a0a <_vfiprintf_r+0x176>
 80039f0:	7863      	ldrb	r3, [r4, #1]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d135      	bne.n	8003a62 <_vfiprintf_r+0x1ce>
 80039f6:	9b03      	ldr	r3, [sp, #12]
 80039f8:	3402      	adds	r4, #2
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	9203      	str	r2, [sp, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bfb8      	it	lt
 8003a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a08:	9305      	str	r3, [sp, #20]
 8003a0a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003ae4 <_vfiprintf_r+0x250>
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4650      	mov	r0, sl
 8003a12:	7821      	ldrb	r1, [r4, #0]
 8003a14:	f000 fae6 	bl	8003fe4 <memchr>
 8003a18:	b140      	cbz	r0, 8003a2c <_vfiprintf_r+0x198>
 8003a1a:	2340      	movs	r3, #64	; 0x40
 8003a1c:	eba0 000a 	sub.w	r0, r0, sl
 8003a20:	fa03 f000 	lsl.w	r0, r3, r0
 8003a24:	9b04      	ldr	r3, [sp, #16]
 8003a26:	3401      	adds	r4, #1
 8003a28:	4303      	orrs	r3, r0
 8003a2a:	9304      	str	r3, [sp, #16]
 8003a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a30:	2206      	movs	r2, #6
 8003a32:	482d      	ldr	r0, [pc, #180]	; (8003ae8 <_vfiprintf_r+0x254>)
 8003a34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a38:	f000 fad4 	bl	8003fe4 <memchr>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d03f      	beq.n	8003ac0 <_vfiprintf_r+0x22c>
 8003a40:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <_vfiprintf_r+0x258>)
 8003a42:	bb1b      	cbnz	r3, 8003a8c <_vfiprintf_r+0x1f8>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	3307      	adds	r3, #7
 8003a48:	f023 0307 	bic.w	r3, r3, #7
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a52:	443b      	add	r3, r7
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	e767      	b.n	8003928 <_vfiprintf_r+0x94>
 8003a58:	460c      	mov	r4, r1
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a60:	e7a5      	b.n	80039ae <_vfiprintf_r+0x11a>
 8003a62:	2300      	movs	r3, #0
 8003a64:	f04f 0c0a 	mov.w	ip, #10
 8003a68:	4619      	mov	r1, r3
 8003a6a:	3401      	adds	r4, #1
 8003a6c:	9305      	str	r3, [sp, #20]
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a74:	3a30      	subs	r2, #48	; 0x30
 8003a76:	2a09      	cmp	r2, #9
 8003a78:	d903      	bls.n	8003a82 <_vfiprintf_r+0x1ee>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c5      	beq.n	8003a0a <_vfiprintf_r+0x176>
 8003a7e:	9105      	str	r1, [sp, #20]
 8003a80:	e7c3      	b.n	8003a0a <_vfiprintf_r+0x176>
 8003a82:	4604      	mov	r4, r0
 8003a84:	2301      	movs	r3, #1
 8003a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a8a:	e7f0      	b.n	8003a6e <_vfiprintf_r+0x1da>
 8003a8c:	ab03      	add	r3, sp, #12
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	462a      	mov	r2, r5
 8003a92:	4630      	mov	r0, r6
 8003a94:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <_vfiprintf_r+0x25c>)
 8003a96:	a904      	add	r1, sp, #16
 8003a98:	f3af 8000 	nop.w
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	1c78      	adds	r0, r7, #1
 8003aa0:	d1d6      	bne.n	8003a50 <_vfiprintf_r+0x1bc>
 8003aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aa4:	07d9      	lsls	r1, r3, #31
 8003aa6:	d405      	bmi.n	8003ab4 <_vfiprintf_r+0x220>
 8003aa8:	89ab      	ldrh	r3, [r5, #12]
 8003aaa:	059a      	lsls	r2, r3, #22
 8003aac:	d402      	bmi.n	8003ab4 <_vfiprintf_r+0x220>
 8003aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ab0:	f7ff fe55 	bl	800375e <__retarget_lock_release_recursive>
 8003ab4:	89ab      	ldrh	r3, [r5, #12]
 8003ab6:	065b      	lsls	r3, r3, #25
 8003ab8:	f53f af12 	bmi.w	80038e0 <_vfiprintf_r+0x4c>
 8003abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003abe:	e711      	b.n	80038e4 <_vfiprintf_r+0x50>
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	462a      	mov	r2, r5
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <_vfiprintf_r+0x25c>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	f000 f882 	bl	8003bd4 <_printf_i>
 8003ad0:	e7e4      	b.n	8003a9c <_vfiprintf_r+0x208>
 8003ad2:	bf00      	nop
 8003ad4:	08004974 	.word	0x08004974
 8003ad8:	08004994 	.word	0x08004994
 8003adc:	08004954 	.word	0x08004954
 8003ae0:	080049b4 	.word	0x080049b4
 8003ae4:	080049ba 	.word	0x080049ba
 8003ae8:	080049be 	.word	0x080049be
 8003aec:	00000000 	.word	0x00000000
 8003af0:	0800386f 	.word	0x0800386f

08003af4 <_printf_common>:
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	4616      	mov	r6, r2
 8003afa:	4699      	mov	r9, r3
 8003afc:	688a      	ldr	r2, [r1, #8]
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	4607      	mov	r7, r0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	bfb8      	it	lt
 8003b06:	4613      	movlt	r3, r2
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b0e:	460c      	mov	r4, r1
 8003b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b14:	b10a      	cbz	r2, 8003b1a <_printf_common+0x26>
 8003b16:	3301      	adds	r3, #1
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	0699      	lsls	r1, r3, #26
 8003b1e:	bf42      	ittt	mi
 8003b20:	6833      	ldrmi	r3, [r6, #0]
 8003b22:	3302      	addmi	r3, #2
 8003b24:	6033      	strmi	r3, [r6, #0]
 8003b26:	6825      	ldr	r5, [r4, #0]
 8003b28:	f015 0506 	ands.w	r5, r5, #6
 8003b2c:	d106      	bne.n	8003b3c <_printf_common+0x48>
 8003b2e:	f104 0a19 	add.w	sl, r4, #25
 8003b32:	68e3      	ldr	r3, [r4, #12]
 8003b34:	6832      	ldr	r2, [r6, #0]
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	dc28      	bgt.n	8003b8e <_printf_common+0x9a>
 8003b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b40:	1e13      	subs	r3, r2, #0
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	bf18      	it	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	0692      	lsls	r2, r2, #26
 8003b4a:	d42d      	bmi.n	8003ba8 <_printf_common+0xb4>
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4638      	mov	r0, r7
 8003b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b54:	47c0      	blx	r8
 8003b56:	3001      	adds	r0, #1
 8003b58:	d020      	beq.n	8003b9c <_printf_common+0xa8>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	68e5      	ldr	r5, [r4, #12]
 8003b5e:	f003 0306 	and.w	r3, r3, #6
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf18      	it	ne
 8003b66:	2500      	movne	r5, #0
 8003b68:	6832      	ldr	r2, [r6, #0]
 8003b6a:	f04f 0600 	mov.w	r6, #0
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	bf08      	it	eq
 8003b72:	1aad      	subeq	r5, r5, r2
 8003b74:	6922      	ldr	r2, [r4, #16]
 8003b76:	bf08      	it	eq
 8003b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bfc4      	itt	gt
 8003b80:	1a9b      	subgt	r3, r3, r2
 8003b82:	18ed      	addgt	r5, r5, r3
 8003b84:	341a      	adds	r4, #26
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	d11a      	bne.n	8003bc0 <_printf_common+0xcc>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e008      	b.n	8003ba0 <_printf_common+0xac>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4652      	mov	r2, sl
 8003b92:	4649      	mov	r1, r9
 8003b94:	4638      	mov	r0, r7
 8003b96:	47c0      	blx	r8
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d103      	bne.n	8003ba4 <_printf_common+0xb0>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7c4      	b.n	8003b32 <_printf_common+0x3e>
 8003ba8:	2030      	movs	r0, #48	; 0x30
 8003baa:	18e1      	adds	r1, r4, r3
 8003bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb6:	4422      	add	r2, r4
 8003bb8:	3302      	adds	r3, #2
 8003bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bbe:	e7c5      	b.n	8003b4c <_printf_common+0x58>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0e6      	beq.n	8003b9c <_printf_common+0xa8>
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7d9      	b.n	8003b86 <_printf_common+0x92>
	...

08003bd4 <_printf_i>:
 8003bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	7e0f      	ldrb	r7, [r1, #24]
 8003bda:	4691      	mov	r9, r2
 8003bdc:	2f78      	cmp	r7, #120	; 0x78
 8003bde:	4680      	mov	r8, r0
 8003be0:	460c      	mov	r4, r1
 8003be2:	469a      	mov	sl, r3
 8003be4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003be6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bea:	d807      	bhi.n	8003bfc <_printf_i+0x28>
 8003bec:	2f62      	cmp	r7, #98	; 0x62
 8003bee:	d80a      	bhi.n	8003c06 <_printf_i+0x32>
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	f000 80d9 	beq.w	8003da8 <_printf_i+0x1d4>
 8003bf6:	2f58      	cmp	r7, #88	; 0x58
 8003bf8:	f000 80a4 	beq.w	8003d44 <_printf_i+0x170>
 8003bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c04:	e03a      	b.n	8003c7c <_printf_i+0xa8>
 8003c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c0a:	2b15      	cmp	r3, #21
 8003c0c:	d8f6      	bhi.n	8003bfc <_printf_i+0x28>
 8003c0e:	a101      	add	r1, pc, #4	; (adr r1, 8003c14 <_printf_i+0x40>)
 8003c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c81 	.word	0x08003c81
 8003c1c:	08003bfd 	.word	0x08003bfd
 8003c20:	08003bfd 	.word	0x08003bfd
 8003c24:	08003bfd 	.word	0x08003bfd
 8003c28:	08003bfd 	.word	0x08003bfd
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003bfd 	.word	0x08003bfd
 8003c34:	08003bfd 	.word	0x08003bfd
 8003c38:	08003bfd 	.word	0x08003bfd
 8003c3c:	08003bfd 	.word	0x08003bfd
 8003c40:	08003d8f 	.word	0x08003d8f
 8003c44:	08003cb1 	.word	0x08003cb1
 8003c48:	08003d71 	.word	0x08003d71
 8003c4c:	08003bfd 	.word	0x08003bfd
 8003c50:	08003bfd 	.word	0x08003bfd
 8003c54:	08003db1 	.word	0x08003db1
 8003c58:	08003bfd 	.word	0x08003bfd
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003bfd 	.word	0x08003bfd
 8003c64:	08003bfd 	.word	0x08003bfd
 8003c68:	08003d79 	.word	0x08003d79
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	602a      	str	r2, [r5, #0]
 8003c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0a4      	b.n	8003dca <_printf_i+0x1f6>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	6829      	ldr	r1, [r5, #0]
 8003c84:	0606      	lsls	r6, r0, #24
 8003c86:	f101 0304 	add.w	r3, r1, #4
 8003c8a:	d50a      	bpl.n	8003ca2 <_printf_i+0xce>
 8003c8c:	680e      	ldr	r6, [r1, #0]
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	2e00      	cmp	r6, #0
 8003c92:	da03      	bge.n	8003c9c <_printf_i+0xc8>
 8003c94:	232d      	movs	r3, #45	; 0x2d
 8003c96:	4276      	negs	r6, r6
 8003c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	485e      	ldr	r0, [pc, #376]	; (8003e18 <_printf_i+0x244>)
 8003ca0:	e019      	b.n	8003cd6 <_printf_i+0x102>
 8003ca2:	680e      	ldr	r6, [r1, #0]
 8003ca4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ca8:	602b      	str	r3, [r5, #0]
 8003caa:	bf18      	it	ne
 8003cac:	b236      	sxthne	r6, r6
 8003cae:	e7ef      	b.n	8003c90 <_printf_i+0xbc>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	6820      	ldr	r0, [r4, #0]
 8003cb4:	1d19      	adds	r1, r3, #4
 8003cb6:	6029      	str	r1, [r5, #0]
 8003cb8:	0601      	lsls	r1, r0, #24
 8003cba:	d501      	bpl.n	8003cc0 <_printf_i+0xec>
 8003cbc:	681e      	ldr	r6, [r3, #0]
 8003cbe:	e002      	b.n	8003cc6 <_printf_i+0xf2>
 8003cc0:	0646      	lsls	r6, r0, #25
 8003cc2:	d5fb      	bpl.n	8003cbc <_printf_i+0xe8>
 8003cc4:	881e      	ldrh	r6, [r3, #0]
 8003cc6:	2f6f      	cmp	r7, #111	; 0x6f
 8003cc8:	bf0c      	ite	eq
 8003cca:	2308      	moveq	r3, #8
 8003ccc:	230a      	movne	r3, #10
 8003cce:	4852      	ldr	r0, [pc, #328]	; (8003e18 <_printf_i+0x244>)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cd6:	6865      	ldr	r5, [r4, #4]
 8003cd8:	2d00      	cmp	r5, #0
 8003cda:	bfa8      	it	ge
 8003cdc:	6821      	ldrge	r1, [r4, #0]
 8003cde:	60a5      	str	r5, [r4, #8]
 8003ce0:	bfa4      	itt	ge
 8003ce2:	f021 0104 	bicge.w	r1, r1, #4
 8003ce6:	6021      	strge	r1, [r4, #0]
 8003ce8:	b90e      	cbnz	r6, 8003cee <_printf_i+0x11a>
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	d04d      	beq.n	8003d8a <_printf_i+0x1b6>
 8003cee:	4615      	mov	r5, r2
 8003cf0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cf4:	fb03 6711 	mls	r7, r3, r1, r6
 8003cf8:	5dc7      	ldrb	r7, [r0, r7]
 8003cfa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cfe:	4637      	mov	r7, r6
 8003d00:	42bb      	cmp	r3, r7
 8003d02:	460e      	mov	r6, r1
 8003d04:	d9f4      	bls.n	8003cf0 <_printf_i+0x11c>
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d10b      	bne.n	8003d22 <_printf_i+0x14e>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	07de      	lsls	r6, r3, #31
 8003d0e:	d508      	bpl.n	8003d22 <_printf_i+0x14e>
 8003d10:	6923      	ldr	r3, [r4, #16]
 8003d12:	6861      	ldr	r1, [r4, #4]
 8003d14:	4299      	cmp	r1, r3
 8003d16:	bfde      	ittt	le
 8003d18:	2330      	movle	r3, #48	; 0x30
 8003d1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d22:	1b52      	subs	r2, r2, r5
 8003d24:	6122      	str	r2, [r4, #16]
 8003d26:	464b      	mov	r3, r9
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	f8cd a000 	str.w	sl, [sp]
 8003d30:	aa03      	add	r2, sp, #12
 8003d32:	f7ff fedf 	bl	8003af4 <_printf_common>
 8003d36:	3001      	adds	r0, #1
 8003d38:	d14c      	bne.n	8003dd4 <_printf_i+0x200>
 8003d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3e:	b004      	add	sp, #16
 8003d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d44:	4834      	ldr	r0, [pc, #208]	; (8003e18 <_printf_i+0x244>)
 8003d46:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d4a:	6829      	ldr	r1, [r5, #0]
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d52:	6029      	str	r1, [r5, #0]
 8003d54:	061d      	lsls	r5, r3, #24
 8003d56:	d514      	bpl.n	8003d82 <_printf_i+0x1ae>
 8003d58:	07df      	lsls	r7, r3, #31
 8003d5a:	bf44      	itt	mi
 8003d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d60:	6023      	strmi	r3, [r4, #0]
 8003d62:	b91e      	cbnz	r6, 8003d6c <_printf_i+0x198>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	f023 0320 	bic.w	r3, r3, #32
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	e7af      	b.n	8003cd0 <_printf_i+0xfc>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	f043 0320 	orr.w	r3, r3, #32
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	2378      	movs	r3, #120	; 0x78
 8003d7a:	4828      	ldr	r0, [pc, #160]	; (8003e1c <_printf_i+0x248>)
 8003d7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d80:	e7e3      	b.n	8003d4a <_printf_i+0x176>
 8003d82:	0659      	lsls	r1, r3, #25
 8003d84:	bf48      	it	mi
 8003d86:	b2b6      	uxthmi	r6, r6
 8003d88:	e7e6      	b.n	8003d58 <_printf_i+0x184>
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	e7bb      	b.n	8003d06 <_printf_i+0x132>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	6826      	ldr	r6, [r4, #0]
 8003d92:	1d18      	adds	r0, r3, #4
 8003d94:	6961      	ldr	r1, [r4, #20]
 8003d96:	6028      	str	r0, [r5, #0]
 8003d98:	0635      	lsls	r5, r6, #24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	d501      	bpl.n	8003da2 <_printf_i+0x1ce>
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	e002      	b.n	8003da8 <_printf_i+0x1d4>
 8003da2:	0670      	lsls	r0, r6, #25
 8003da4:	d5fb      	bpl.n	8003d9e <_printf_i+0x1ca>
 8003da6:	8019      	strh	r1, [r3, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	4615      	mov	r5, r2
 8003dac:	6123      	str	r3, [r4, #16]
 8003dae:	e7ba      	b.n	8003d26 <_printf_i+0x152>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	2100      	movs	r1, #0
 8003db4:	1d1a      	adds	r2, r3, #4
 8003db6:	602a      	str	r2, [r5, #0]
 8003db8:	681d      	ldr	r5, [r3, #0]
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f911 	bl	8003fe4 <memchr>
 8003dc2:	b108      	cbz	r0, 8003dc8 <_printf_i+0x1f4>
 8003dc4:	1b40      	subs	r0, r0, r5
 8003dc6:	6060      	str	r0, [r4, #4]
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd2:	e7a8      	b.n	8003d26 <_printf_i+0x152>
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	47d0      	blx	sl
 8003dde:	3001      	adds	r0, #1
 8003de0:	d0ab      	beq.n	8003d3a <_printf_i+0x166>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	079b      	lsls	r3, r3, #30
 8003de6:	d413      	bmi.n	8003e10 <_printf_i+0x23c>
 8003de8:	68e0      	ldr	r0, [r4, #12]
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	4298      	cmp	r0, r3
 8003dee:	bfb8      	it	lt
 8003df0:	4618      	movlt	r0, r3
 8003df2:	e7a4      	b.n	8003d3e <_printf_i+0x16a>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4632      	mov	r2, r6
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	47d0      	blx	sl
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d09b      	beq.n	8003d3a <_printf_i+0x166>
 8003e02:	3501      	adds	r5, #1
 8003e04:	68e3      	ldr	r3, [r4, #12]
 8003e06:	9903      	ldr	r1, [sp, #12]
 8003e08:	1a5b      	subs	r3, r3, r1
 8003e0a:	42ab      	cmp	r3, r5
 8003e0c:	dcf2      	bgt.n	8003df4 <_printf_i+0x220>
 8003e0e:	e7eb      	b.n	8003de8 <_printf_i+0x214>
 8003e10:	2500      	movs	r5, #0
 8003e12:	f104 0619 	add.w	r6, r4, #25
 8003e16:	e7f5      	b.n	8003e04 <_printf_i+0x230>
 8003e18:	080049c5 	.word	0x080049c5
 8003e1c:	080049d6 	.word	0x080049d6

08003e20 <_putc_r>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	460d      	mov	r5, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	4606      	mov	r6, r0
 8003e28:	b118      	cbz	r0, 8003e32 <_putc_r+0x12>
 8003e2a:	6983      	ldr	r3, [r0, #24]
 8003e2c:	b90b      	cbnz	r3, 8003e32 <_putc_r+0x12>
 8003e2e:	f7ff fbf7 	bl	8003620 <__sinit>
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <_putc_r+0x84>)
 8003e34:	429c      	cmp	r4, r3
 8003e36:	d124      	bne.n	8003e82 <_putc_r+0x62>
 8003e38:	6874      	ldr	r4, [r6, #4]
 8003e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e3c:	07d8      	lsls	r0, r3, #31
 8003e3e:	d405      	bmi.n	8003e4c <_putc_r+0x2c>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	0599      	lsls	r1, r3, #22
 8003e44:	d402      	bmi.n	8003e4c <_putc_r+0x2c>
 8003e46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e48:	f7ff fc88 	bl	800375c <__retarget_lock_acquire_recursive>
 8003e4c:	68a3      	ldr	r3, [r4, #8]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	da05      	bge.n	8003e62 <_putc_r+0x42>
 8003e56:	69a2      	ldr	r2, [r4, #24]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	db1c      	blt.n	8003e96 <_putc_r+0x76>
 8003e5c:	b2eb      	uxtb	r3, r5
 8003e5e:	2b0a      	cmp	r3, #10
 8003e60:	d019      	beq.n	8003e96 <_putc_r+0x76>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	701d      	strb	r5, [r3, #0]
 8003e6a:	b2ed      	uxtb	r5, r5
 8003e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e6e:	07da      	lsls	r2, r3, #31
 8003e70:	d405      	bmi.n	8003e7e <_putc_r+0x5e>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	059b      	lsls	r3, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_putc_r+0x5e>
 8003e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7a:	f7ff fc70 	bl	800375e <__retarget_lock_release_recursive>
 8003e7e:	4628      	mov	r0, r5
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <_putc_r+0x88>)
 8003e84:	429c      	cmp	r4, r3
 8003e86:	d101      	bne.n	8003e8c <_putc_r+0x6c>
 8003e88:	68b4      	ldr	r4, [r6, #8]
 8003e8a:	e7d6      	b.n	8003e3a <_putc_r+0x1a>
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <_putc_r+0x8c>)
 8003e8e:	429c      	cmp	r4, r3
 8003e90:	bf08      	it	eq
 8003e92:	68f4      	ldreq	r4, [r6, #12]
 8003e94:	e7d1      	b.n	8003e3a <_putc_r+0x1a>
 8003e96:	4629      	mov	r1, r5
 8003e98:	4622      	mov	r2, r4
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7ff f9ea 	bl	8003274 <__swbuf_r>
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	e7e3      	b.n	8003e6c <_putc_r+0x4c>
 8003ea4:	08004974 	.word	0x08004974
 8003ea8:	08004994 	.word	0x08004994
 8003eac:	08004954 	.word	0x08004954

08003eb0 <__sread>:
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb8:	f000 f8a2 	bl	8004000 <_read_r>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	bfab      	itete	ge
 8003ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ec4:	181b      	addge	r3, r3, r0
 8003ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eca:	bfac      	ite	ge
 8003ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ece:	81a3      	strhlt	r3, [r4, #12]
 8003ed0:	bd10      	pop	{r4, pc}

08003ed2 <__swrite>:
 8003ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	898b      	ldrh	r3, [r1, #12]
 8003eda:	4605      	mov	r5, r0
 8003edc:	05db      	lsls	r3, r3, #23
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	d505      	bpl.n	8003ef0 <__swrite+0x1e>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eec:	f000 f868 	bl	8003fc0 <_lseek_r>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef8:	81a3      	strh	r3, [r4, #12]
 8003efa:	4628      	mov	r0, r5
 8003efc:	463b      	mov	r3, r7
 8003efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f06:	f000 b817 	b.w	8003f38 <_write_r>

08003f0a <__sseek>:
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f12:	f000 f855 	bl	8003fc0 <_lseek_r>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	bf15      	itete	ne
 8003f1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f26:	81a3      	strheq	r3, [r4, #12]
 8003f28:	bf18      	it	ne
 8003f2a:	81a3      	strhne	r3, [r4, #12]
 8003f2c:	bd10      	pop	{r4, pc}

08003f2e <__sclose>:
 8003f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f32:	f000 b813 	b.w	8003f5c <_close_r>
	...

08003f38 <_write_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	4d05      	ldr	r5, [pc, #20]	; (8003f58 <_write_r+0x20>)
 8003f44:	602a      	str	r2, [r5, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f7fc fa02 	bl	8000350 <_write>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_write_r+0x1e>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_write_r+0x1e>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000198 	.word	0x20000198

08003f5c <_close_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	2300      	movs	r3, #0
 8003f60:	4d05      	ldr	r5, [pc, #20]	; (8003f78 <_close_r+0x1c>)
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
 8003f66:	602b      	str	r3, [r5, #0]
 8003f68:	f7fc fb15 	bl	8000596 <_close>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_close_r+0x1a>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_close_r+0x1a>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	20000198 	.word	0x20000198

08003f7c <_fstat_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	2300      	movs	r3, #0
 8003f80:	4d06      	ldr	r5, [pc, #24]	; (8003f9c <_fstat_r+0x20>)
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	602b      	str	r3, [r5, #0]
 8003f8a:	f7fc fb0f 	bl	80005ac <_fstat>
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	d102      	bne.n	8003f98 <_fstat_r+0x1c>
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	b103      	cbz	r3, 8003f98 <_fstat_r+0x1c>
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000198 	.word	0x20000198

08003fa0 <_isatty_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4d05      	ldr	r5, [pc, #20]	; (8003fbc <_isatty_r+0x1c>)
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	f7fc fb0d 	bl	80005ca <_isatty>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_isatty_r+0x1a>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_isatty_r+0x1a>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000198 	.word	0x20000198

08003fc0 <_lseek_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4d05      	ldr	r5, [pc, #20]	; (8003fe0 <_lseek_r+0x20>)
 8003fcc:	602a      	str	r2, [r5, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f7fc fb05 	bl	80005de <_lseek>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_lseek_r+0x1e>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_lseek_r+0x1e>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000198 	.word	0x20000198

08003fe4 <memchr>:
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	b2c9      	uxtb	r1, r1
 8003fea:	4402      	add	r2, r0
 8003fec:	4293      	cmp	r3, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	d101      	bne.n	8003ff6 <memchr+0x12>
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e003      	b.n	8003ffe <memchr+0x1a>
 8003ff6:	7804      	ldrb	r4, [r0, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	428c      	cmp	r4, r1
 8003ffc:	d1f6      	bne.n	8003fec <memchr+0x8>
 8003ffe:	bd10      	pop	{r4, pc}

08004000 <_read_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	2200      	movs	r2, #0
 800400a:	4d05      	ldr	r5, [pc, #20]	; (8004020 <_read_r+0x20>)
 800400c:	602a      	str	r2, [r5, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f7fc faa4 	bl	800055c <_read>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_read_r+0x1e>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_read_r+0x1e>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	20000198 	.word	0x20000198

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
