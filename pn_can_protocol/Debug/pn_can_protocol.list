
pn_can_protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002520  08002520  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002520  08002520  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002520  08002520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08002598  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002598  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d5a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001710  00000000  00000000  00026df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00028508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00028d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001829d  00000000  00000000  000294c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e91  00000000  00000000  0004175d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d8b  00000000  00000000  0004a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  000d03cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002470 	.word	0x08002470

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002470 	.word	0x08002470

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa9e 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ae 	bl	80002b8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f880 	bl	8000264 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8000164:	f001 fc4c 	bl	8001a00 <init>
  while (1)
  {
	  loop();
 8000168:	f001 fc54 	bl	8001a14 <loop>
 800016c:	e7fc      	b.n	8000168 <main+0x1c>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b090      	sub	sp, #64	; 0x40
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0318 	add.w	r3, r7, #24
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f001 fc79 	bl	8001a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000190:	2301      	movs	r3, #1
 8000192:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000198:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019a:	2300      	movs	r3, #0
 800019c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fe48 	bl	8000e4c <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c2:	f000 f8db 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ca:	2302      	movs	r3, #2
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 f8b5 	bl	8001350 <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ec:	f000 f8c6 	bl	800037c <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	3740      	adds	r7, #64	; 0x40
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <MX_CAN_Init+0x64>)
 80001fe:	4a18      	ldr	r2, [pc, #96]	; (8000260 <MX_CAN_Init+0x68>)
 8000200:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN_Init+0x64>)
 8000204:	2208      	movs	r2, #8
 8000206:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <MX_CAN_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_CAN_Init+0x64>)
 8000216:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800021a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN_Init+0x64>)
 800021e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000222:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN_Init+0x64>)
 800022c:	2201      	movs	r2, #1
 800022e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN_Init+0x64>)
 8000238:	2201      	movs	r2, #1
 800023a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN_Init+0x64>)
 800024a:	f000 fa83 	bl	8000754 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000254:	f000 f892 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000008c 	.word	0x2000008c
 8000260:	40006400 	.word	0x40006400

08000264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_USART1_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_USART1_UART_Init+0x4c>)
 800029c:	f001 f9f0 	bl	8001680 <HAL_HalfDuplex_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f869 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000b4 	.word	0x200000b4
 80002b4:	40013800 	.word	0x40013800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <MX_GPIO_Init+0x90>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <MX_GPIO_Init+0x90>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <MX_GPIO_Init+0x90>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <MX_GPIO_Init+0x94>)
 800031c:	f000 fd7e 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_GPIO_Init+0x94>)
 800033a:	f000 fbeb 	bl	8000b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033e:	bf00      	nop
 8000340:	3720      	adds	r7, #32
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40011000 	.word	0x40011000

08000350 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd,char*data,int len){
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	b29a      	uxth	r2, r3
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	4804      	ldr	r0, [pc, #16]	; (8000378 <_write+0x28>)
 8000368:	f001 f9df 	bl	800172a <HAL_UART_Transmit>
	return len;
 800036c:	687b      	ldr	r3, [r7, #4]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000b4 	.word	0x200000b4

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>
	...

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <HAL_MspInit+0x40>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <HAL_MspInit+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_MspInit+0x40>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b0:	61d3      	str	r3, [r2, #28]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_MspInit+0x40>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <HAL_CAN_MspInit+0x8c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d131      	bne.n	8000450 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <HAL_CAN_MspInit+0x90>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	4a1a      	ldr	r2, [pc, #104]	; (800045c <HAL_CAN_MspInit+0x90>)
 80003f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f6:	61d3      	str	r3, [r2, #28]
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <HAL_CAN_MspInit+0x90>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_CAN_MspInit+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <HAL_CAN_MspInit+0x90>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_CAN_MspInit+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800041c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <HAL_CAN_MspInit+0x94>)
 8000432:	f000 fb6f 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043c:	2302      	movs	r3, #2
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <HAL_CAN_MspInit+0x94>)
 800044c:	f000 fb62 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40006400 	.word	0x40006400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <HAL_UART_MspInit+0x74>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d124      	bne.n	80004ce <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_UART_MspInit+0x78>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_UART_MspInit+0x78>)
 800048a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_UART_MspInit+0x78>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_UART_MspInit+0x78>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_UART_MspInit+0x78>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_UART_MspInit+0x78>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ba:	2312      	movs	r3, #18
 80004bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <HAL_UART_MspInit+0x7c>)
 80004ca:	f000 fb23 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40013800 	.word	0x40013800
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800

080004e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <NMI_Handler+0x4>

080004ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <MemManage_Handler+0x4>

080004f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <UsageFault_Handler+0x4>

08000502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052a:	f000 f8f7 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}

08000532 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	e00a      	b.n	800055a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000544:	f3af 8000 	nop.w
 8000548:	4601      	mov	r1, r0
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60ba      	str	r2, [r7, #8]
 8000550:	b2ca      	uxtb	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697a      	ldr	r2, [r7, #20]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbf0      	blt.n	8000544 <_read+0x12>
  }

  return len;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_close>:
  }
  return len;
}

int _close(int file)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000592:	605a      	str	r2, [r3, #4]
  return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <_isatty>:

int _isatty(int file)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005a8:	2301      	movs	r3, #1
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <_sbrk+0x5c>)
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <_sbrk+0x60>)
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_sbrk+0x64>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <_sbrk+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d207      	bcs.n	800060c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005fc:	f001 fa10 	bl	8001a20 <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e009      	b.n	8000620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <_sbrk+0x64>)
 800061c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20005000 	.word	0x20005000
 800062c:	00000400 	.word	0x00000400
 8000630:	200000f8 	.word	0x200000f8
 8000634:	20000110 	.word	0x20000110

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000646:	490d      	ldr	r1, [pc, #52]	; (800067c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800065c:	4c0a      	ldr	r4, [pc, #40]	; (8000688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066a:	f7ff ffe5 	bl	8000638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066e:	f001 f9dd 	bl	8001a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fd6b 	bl	800014c <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000680:	08002528 	.word	0x08002528
  ldr r2, =_sbss
 8000684:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000688:	20000110 	.word	0x20000110

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 fa03 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fe6c 	bl	8000388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fa0d 	bl	8000afa <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f9e3 	bl	8000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	200000fc 	.word	0x200000fc

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	200000fc 	.word	0x200000fc

08000754 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e0ed      	b.n	8000942 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff fe2a 	bl	80003cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f042 0201 	orr.w	r2, r2, #1
 8000786:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000788:	f7ff ffda 	bl	8000740 <HAL_GetTick>
 800078c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800078e:	e012      	b.n	80007b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000790:	f7ff ffd6 	bl	8000740 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d90b      	bls.n	80007b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2205      	movs	r2, #5
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0c5      	b.n	8000942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0e5      	beq.n	8000790 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0202 	bic.w	r2, r2, #2
 80007d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007d4:	f7ff ffb4 	bl	8000740 <HAL_GetTick>
 80007d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007da:	e012      	b.n	8000802 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007dc:	f7ff ffb0 	bl	8000740 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b0a      	cmp	r3, #10
 80007e8:	d90b      	bls.n	8000802 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2205      	movs	r2, #5
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e09f      	b.n	8000942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e5      	bne.n	80007dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7e1b      	ldrb	r3, [r3, #24]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d108      	bne.n	800082a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	e007      	b.n	800083a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7e5b      	ldrb	r3, [r3, #25]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d108      	bne.n	8000854 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e007      	b.n	8000864 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000862:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7e9b      	ldrb	r3, [r3, #26]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d108      	bne.n	800087e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0220 	orr.w	r2, r2, #32
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e007      	b.n	800088e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f022 0220 	bic.w	r2, r2, #32
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7edb      	ldrb	r3, [r3, #27]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f022 0210 	bic.w	r2, r2, #16
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0210 	orr.w	r2, r2, #16
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7f1b      	ldrb	r3, [r3, #28]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d108      	bne.n	80008d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f042 0208 	orr.w	r2, r2, #8
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	e007      	b.n	80008e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 0208 	bic.w	r2, r2, #8
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7f5b      	ldrb	r3, [r3, #29]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d108      	bne.n	80008fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f042 0204 	orr.w	r2, r2, #4
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e007      	b.n	800090c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0204 	bic.w	r2, r2, #4
 800090a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	431a      	orrs	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	ea42 0103 	orr.w	r1, r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff90 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff49 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff5e 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff90 	bl	8000a04 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5f 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffb0 	bl	8000a68 <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b08b      	sub	sp, #44	; 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e169      	b.n	8000dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8158 	bne.w	8000df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a9a      	ldr	r2, [pc, #616]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d05e      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b50:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d875      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b56:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d058      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b5c:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d86f      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b62:	4a96      	ldr	r2, [pc, #600]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d052      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b68:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d869      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a94      	ldr	r2, [pc, #592]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04c      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b74:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d863      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b80:	4a90      	ldr	r2, [pc, #576]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d85d      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d82a      	bhi.n	8000be0 <HAL_GPIO_Init+0xcc>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d859      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <HAL_GPIO_Init+0x80>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000be9 	.word	0x08000be9
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c43 	.word	0x08000c43
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c43 	.word	0x08000c43
 8000bb0:	08000c43 	.word	0x08000c43
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c43 	.word	0x08000c43
 8000bbc:	08000c43 	.word	0x08000c43
 8000bc0:	08000c43 	.word	0x08000c43
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	4a79      	ldr	r2, [pc, #484]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e02c      	b.n	8000c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e029      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e024      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e01f      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e01a      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e013      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	611a      	str	r2, [r3, #16]
          break;
 8000c2e:	e009      	b.n	8000c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	615a      	str	r2, [r3, #20]
          break;
 8000c3a:	e003      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          break;
 8000c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	; 0xff
 8000c48:	d801      	bhi.n	8000c4e <HAL_GPIO_Init+0x13a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0x13e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d802      	bhi.n	8000c60 <HAL_GPIO_Init+0x14c>
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x152>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3b08      	subs	r3, #8
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cac:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d013      	beq.n	8000d00 <HAL_GPIO_Init+0x1ec>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d00d      	beq.n	8000cfc <HAL_GPIO_Init+0x1e8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d007      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <HAL_GPIO_Init+0x2cc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d101      	bne.n	8000cf4 <HAL_GPIO_Init+0x1e0>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e004      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	4093      	lsls	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d12:	492f      	ldr	r1, [pc, #188]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	492c      	ldr	r1, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4928      	ldr	r1, [pc, #160]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4922      	ldr	r1, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	491e      	ldr	r1, [pc, #120]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4918      	ldr	r1, [pc, #96]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4914      	ldr	r1, [pc, #80]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d021      	beq.n	8000de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	490e      	ldr	r1, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
 8000db0:	e021      	b.n	8000df6 <HAL_GPIO_Init+0x2e2>
 8000db2:	bf00      	nop
 8000db4:	10320000 	.word	0x10320000
 8000db8:	10310000 	.word	0x10310000
 8000dbc:	10220000 	.word	0x10220000
 8000dc0:	10210000 	.word	0x10210000
 8000dc4:	10120000 	.word	0x10120000
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4909      	ldr	r1, [pc, #36]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f47f ae8e 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	372c      	adds	r7, #44	; 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e272      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8087 	beq.w	8000f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e6c:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d00c      	beq.n	8000e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e78:	4b8f      	ldr	r3, [pc, #572]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d112      	bne.n	8000eaa <HAL_RCC_OscConfig+0x5e>
 8000e84:	4b8c      	ldr	r3, [pc, #560]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e90:	d10b      	bne.n	8000eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d06c      	beq.n	8000f78 <HAL_RCC_OscConfig+0x12c>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d168      	bne.n	8000f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e24c      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb2:	d106      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x76>
 8000eb4:	4b80      	ldr	r3, [pc, #512]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a7f      	ldr	r2, [pc, #508]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e02e      	b.n	8000f20 <HAL_RCC_OscConfig+0xd4>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x98>
 8000eca:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a7a      	ldr	r2, [pc, #488]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b78      	ldr	r3, [pc, #480]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a77      	ldr	r2, [pc, #476]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e01d      	b.n	8000f20 <HAL_RCC_OscConfig+0xd4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0xbc>
 8000eee:	4b72      	ldr	r3, [pc, #456]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a71      	ldr	r2, [pc, #452]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a6e      	ldr	r2, [pc, #440]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e00b      	b.n	8000f20 <HAL_RCC_OscConfig+0xd4>
 8000f08:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a6a      	ldr	r2, [pc, #424]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a67      	ldr	r2, [pc, #412]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc0a 	bl	8000740 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fc06 	bl	8000740 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e200      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0xe4>
 8000f4e:	e014      	b.n	8000f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fbf6 	bl	8000740 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fbf2 	bl	8000740 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e1ec      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x10c>
 8000f76:	e000      	b.n	8000f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d063      	beq.n	800104e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d11c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x18c>
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x176>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d001      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e1c0      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4939      	ldr	r1, [pc, #228]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	e03a      	b.n	800104e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d020      	beq.n	8001022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_RCC_OscConfig+0x270>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fbab 	bl	8000740 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fee:	f7ff fba7 	bl	8000740 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e1a1      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4927      	ldr	r1, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	4313      	orrs	r3, r2
 800101e:	600b      	str	r3, [r1, #0]
 8001020:	e015      	b.n	800104e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_RCC_OscConfig+0x270>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fb8a 	bl	8000740 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001030:	f7ff fb86 	bl	8000740 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e180      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	2b00      	cmp	r3, #0
 8001058:	d03a      	beq.n	80010d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d019      	beq.n	8001096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_RCC_OscConfig+0x274>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001068:	f7ff fb6a 	bl	8000740 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fb66 	bl	8000740 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e160      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 fad8 	bl	8001644 <RCC_Delay>
 8001094:	e01c      	b.n	80010d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_RCC_OscConfig+0x274>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109c:	f7ff fb50 	bl	8000740 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a2:	e00f      	b.n	80010c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fb4c 	bl	8000740 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d908      	bls.n	80010c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e146      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	42420000 	.word	0x42420000
 80010c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c4:	4b92      	ldr	r3, [pc, #584]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1e9      	bne.n	80010a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80a6 	beq.w	800122a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e2:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b88      	ldr	r3, [pc, #544]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a87      	ldr	r2, [pc, #540]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b85      	ldr	r3, [pc, #532]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b82      	ldr	r3, [pc, #520]	; (8001314 <HAL_RCC_OscConfig+0x4c8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001116:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x4c8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a7e      	ldr	r2, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x4c8>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fb0d 	bl	8000740 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fb09 	bl	8000740 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	; 0x64
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e103      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x4c8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x312>
 8001150:	4b6f      	ldr	r3, [pc, #444]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a6e      	ldr	r2, [pc, #440]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6213      	str	r3, [r2, #32]
 800115c:	e02d      	b.n	80011ba <HAL_RCC_OscConfig+0x36e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x334>
 8001166:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a69      	ldr	r2, [pc, #420]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a66      	ldr	r2, [pc, #408]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	6213      	str	r3, [r2, #32]
 800117e:	e01c      	b.n	80011ba <HAL_RCC_OscConfig+0x36e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d10c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x356>
 8001188:	4b61      	ldr	r3, [pc, #388]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a60      	ldr	r2, [pc, #384]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6213      	str	r3, [r2, #32]
 8001194:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a5d      	ldr	r2, [pc, #372]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6213      	str	r3, [r2, #32]
 80011a0:	e00b      	b.n	80011ba <HAL_RCC_OscConfig+0x36e>
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b58      	ldr	r3, [pc, #352]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d015      	beq.n	80011ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fabd 	bl	8000740 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ca:	f7ff fab9 	bl	8000740 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d8:	4293      	cmp	r3, r2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e0b1      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e0:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ee      	beq.n	80011ca <HAL_RCC_OscConfig+0x37e>
 80011ec:	e014      	b.n	8001218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff faa7 	bl	8000740 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff faa3 	bl	8000740 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e09b      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120c:	4b40      	ldr	r3, [pc, #256]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1ee      	bne.n	80011f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d105      	bne.n	800122a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a3b      	ldr	r2, [pc, #236]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8087 	beq.w	8001342 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001234:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d061      	beq.n	8001304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d146      	bne.n	80012d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_RCC_OscConfig+0x4cc>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff fa77 	bl	8000740 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001256:	f7ff fa73 	bl	8000740 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e06d      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d108      	bne.n	8001290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4921      	ldr	r1, [pc, #132]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a19      	ldr	r1, [r3, #32]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	430b      	orrs	r3, r1
 80012a2:	491b      	ldr	r1, [pc, #108]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_RCC_OscConfig+0x4cc>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fa47 	bl	8000740 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fa43 	bl	8000740 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e03d      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x46a>
 80012d4:	e035      	b.n	8001342 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_RCC_OscConfig+0x4cc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fa30 	bl	8000740 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fa2c 	bl	8000740 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e026      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x498>
 8001302:	e01e      	b.n	8001342 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d107      	bne.n	800131c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e019      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
 8001310:	40021000 	.word	0x40021000
 8001314:	40007000 	.word	0x40007000
 8001318:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x500>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	429a      	cmp	r2, r3
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	429a      	cmp	r2, r3
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0d0      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001364:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d910      	bls.n	8001394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 0207 	bic.w	r2, r3, #7
 800137a:	4965      	ldr	r1, [pc, #404]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0b8      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a58      	ldr	r2, [pc, #352]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a52      	ldr	r2, [pc, #328]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	494d      	ldr	r1, [pc, #308]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d040      	beq.n	8001470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d115      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e07f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e073      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e06b      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f023 0203 	bic.w	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4936      	ldr	r1, [pc, #216]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001440:	f7ff f97e 	bl	8000740 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f97a 	bl	8000740 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e053      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 020c 	and.w	r2, r3, #12
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	429a      	cmp	r2, r3
 800146e:	d1eb      	bne.n	8001448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d210      	bcs.n	80014a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4922      	ldr	r1, [pc, #136]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e032      	b.n	8001506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4916      	ldr	r1, [pc, #88]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014de:	f000 f821 	bl	8001524 <HAL_RCC_GetSysClockFreq>
 80014e2:	4602      	mov	r2, r0
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	490a      	ldr	r1, [pc, #40]	; (8001518 <HAL_RCC_ClockConfig+0x1c8>)
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1cc>)
 80014f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8dc 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40022000 	.word	0x40022000
 8001514:	40021000 	.word	0x40021000
 8001518:	080024a4 	.word	0x080024a4
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001524:	b490      	push	{r4, r7}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800152c:	1d3c      	adds	r4, r7, #4
 800152e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001534:	f240 2301 	movw	r3, #513	; 0x201
 8001538:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b04      	cmp	r3, #4
 800155c:	d002      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x40>
 800155e:	2b08      	cmp	r3, #8
 8001560:	d003      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x46>
 8001562:	e02b      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001566:	623b      	str	r3, [r7, #32]
      break;
 8001568:	e02b      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	0c9b      	lsrs	r3, r3, #18
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3328      	adds	r3, #40	; 0x28
 8001574:	443b      	add	r3, r7
 8001576:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800157a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d012      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	0c5b      	lsrs	r3, r3, #17
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	3328      	adds	r3, #40	; 0x28
 8001592:	443b      	add	r3, r7
 8001594:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001598:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800159e:	fb03 f202 	mul.w	r2, r3, r2
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	e004      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	623b      	str	r3, [r7, #32]
      break;
 80015ba:	e002      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015be:	623b      	str	r3, [r7, #32]
      break;
 80015c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc90      	pop	{r4, r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	08002488 	.word	0x08002488
 80015d4:	40021000 	.word	0x40021000
 80015d8:	007a1200 	.word	0x007a1200
 80015dc:	003d0900 	.word	0x003d0900

080015e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000000 	.word	0x20000000

080015f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015f8:	f7ff fff2 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	080024b4 	.word	0x080024b4

0800161c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001620:	f7ff ffde 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	0adb      	lsrs	r3, r3, #11
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4903      	ldr	r1, [pc, #12]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	080024b4 	.word	0x080024b4

08001644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <RCC_Delay+0x34>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <RCC_Delay+0x38>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0a5b      	lsrs	r3, r3, #9
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001660:	bf00      	nop
  }
  while (Delay --);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f9      	bne.n	8001660 <RCC_Delay+0x1c>
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000000 	.word	0x20000000
 800167c:	10624dd3 	.word	0x10624dd3

08001680 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e047      	b.n	8001722 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7fe fedc 	bl	8000464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2224      	movs	r2, #36	; 0x24
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f90d 	bl	80018e4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80016e8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0208 	orr.w	r2, r2, #8
 80016f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b08a      	sub	sp, #40	; 0x28
 800172e:	af02      	add	r7, sp, #8
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b20      	cmp	r3, #32
 8001748:	d17c      	bne.n	8001844 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <HAL_UART_Transmit+0x2c>
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e075      	b.n	8001846 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_UART_Transmit+0x3e>
 8001764:	2302      	movs	r3, #2
 8001766:	e06e      	b.n	8001846 <HAL_UART_Transmit+0x11c>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2221      	movs	r2, #33	; 0x21
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800177e:	f7fe ffdf 	bl	8000740 <HAL_GetTick>
 8001782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	88fa      	ldrh	r2, [r7, #6]
 8001788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	88fa      	ldrh	r2, [r7, #6]
 800178e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001798:	d108      	bne.n	80017ac <HAL_UART_Transmit+0x82>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d104      	bne.n	80017ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	e003      	b.n	80017b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80017bc:	e02a      	b.n	8001814 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2200      	movs	r2, #0
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f840 	bl	800184e <UART_WaitOnFlagUntilTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e036      	b.n	8001846 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	3302      	adds	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	e007      	b.n	8001806 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800180a:	b29b      	uxth	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001818:	b29b      	uxth	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1cf      	bne.n	80017be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	2140      	movs	r1, #64	; 0x40
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f810 	bl	800184e <UART_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e006      	b.n	8001846 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001844:	2302      	movs	r3, #2
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800185e:	e02c      	b.n	80018ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d028      	beq.n	80018ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <UART_WaitOnFlagUntilTimeout+0x30>
 800186e:	f7fe ff67 	bl	8000740 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	429a      	cmp	r2, r3
 800187c:	d21d      	bcs.n	80018ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800188c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e00f      	b.n	80018da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4013      	ands	r3, r2
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	bf0c      	ite	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	2300      	movne	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d0c3      	beq.n	8001860 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800191e:	f023 030c 	bic.w	r3, r3, #12
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	430b      	orrs	r3, r1
 800192a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <UART_SetConfig+0x114>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d103      	bne.n	8001954 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800194c:	f7ff fe66 	bl	800161c <HAL_RCC_GetPCLK2Freq>
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	e002      	b.n	800195a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001954:	f7ff fe4e 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 8001958:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009a      	lsls	r2, r3, #2
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <UART_SetConfig+0x118>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	0119      	lsls	r1, r3, #4
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009a      	lsls	r2, r3, #2
 8001984:	441a      	add	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <UART_SetConfig+0x118>)
 8001992:	fba3 0302 	umull	r0, r3, r3, r2
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2064      	movs	r0, #100	; 0x64
 800199a:	fb00 f303 	mul.w	r3, r0, r3
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	3332      	adds	r3, #50	; 0x32
 80019a4:	4a15      	ldr	r2, [pc, #84]	; (80019fc <UART_SetConfig+0x118>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b0:	4419      	add	r1, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009a      	lsls	r2, r3, #2
 80019bc:	441a      	add	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <UART_SetConfig+0x118>)
 80019ca:	fba3 0302 	umull	r0, r3, r3, r2
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2064      	movs	r0, #100	; 0x64
 80019d2:	fb00 f303 	mul.w	r3, r0, r3
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	3332      	adds	r3, #50	; 0x32
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <UART_SetConfig+0x118>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	f003 020f 	and.w	r2, r3, #15
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	440a      	add	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013800 	.word	0x40013800
 80019fc:	51eb851f 	.word	0x51eb851f

08001a00 <init>:
 */


#include "user.h"

void init(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	printf("Initiating\n");
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <init+0x10>)
 8001a06:	f000 f987 	bl	8001d18 <puts>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08002498 	.word	0x08002498

08001a14 <loop>:

void loop(){
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <__errno>:
 8001a20:	4b01      	ldr	r3, [pc, #4]	; (8001a28 <__errno+0x8>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <__libc_init_array>:
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	2600      	movs	r6, #0
 8001a30:	4d0c      	ldr	r5, [pc, #48]	; (8001a64 <__libc_init_array+0x38>)
 8001a32:	4c0d      	ldr	r4, [pc, #52]	; (8001a68 <__libc_init_array+0x3c>)
 8001a34:	1b64      	subs	r4, r4, r5
 8001a36:	10a4      	asrs	r4, r4, #2
 8001a38:	42a6      	cmp	r6, r4
 8001a3a:	d109      	bne.n	8001a50 <__libc_init_array+0x24>
 8001a3c:	f000 fd18 	bl	8002470 <_init>
 8001a40:	2600      	movs	r6, #0
 8001a42:	4d0a      	ldr	r5, [pc, #40]	; (8001a6c <__libc_init_array+0x40>)
 8001a44:	4c0a      	ldr	r4, [pc, #40]	; (8001a70 <__libc_init_array+0x44>)
 8001a46:	1b64      	subs	r4, r4, r5
 8001a48:	10a4      	asrs	r4, r4, #2
 8001a4a:	42a6      	cmp	r6, r4
 8001a4c:	d105      	bne.n	8001a5a <__libc_init_array+0x2e>
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
 8001a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a54:	4798      	blx	r3
 8001a56:	3601      	adds	r6, #1
 8001a58:	e7ee      	b.n	8001a38 <__libc_init_array+0xc>
 8001a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a5e:	4798      	blx	r3
 8001a60:	3601      	adds	r6, #1
 8001a62:	e7f2      	b.n	8001a4a <__libc_init_array+0x1e>
 8001a64:	08002520 	.word	0x08002520
 8001a68:	08002520 	.word	0x08002520
 8001a6c:	08002520 	.word	0x08002520
 8001a70:	08002524 	.word	0x08002524

08001a74 <memset>:
 8001a74:	4603      	mov	r3, r0
 8001a76:	4402      	add	r2, r0
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <memset+0xa>
 8001a7c:	4770      	bx	lr
 8001a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a82:	e7f9      	b.n	8001a78 <memset+0x4>

08001a84 <_free_r>:
 8001a84:	b538      	push	{r3, r4, r5, lr}
 8001a86:	4605      	mov	r5, r0
 8001a88:	2900      	cmp	r1, #0
 8001a8a:	d040      	beq.n	8001b0e <_free_r+0x8a>
 8001a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a90:	1f0c      	subs	r4, r1, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bfb8      	it	lt
 8001a96:	18e4      	addlt	r4, r4, r3
 8001a98:	f000 fc32 	bl	8002300 <__malloc_lock>
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <_free_r+0x8c>)
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	b933      	cbnz	r3, 8001ab0 <_free_r+0x2c>
 8001aa2:	6063      	str	r3, [r4, #4]
 8001aa4:	6014      	str	r4, [r2, #0]
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aac:	f000 bc2e 	b.w	800230c <__malloc_unlock>
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	d908      	bls.n	8001ac6 <_free_r+0x42>
 8001ab4:	6820      	ldr	r0, [r4, #0]
 8001ab6:	1821      	adds	r1, r4, r0
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	bf01      	itttt	eq
 8001abc:	6819      	ldreq	r1, [r3, #0]
 8001abe:	685b      	ldreq	r3, [r3, #4]
 8001ac0:	1809      	addeq	r1, r1, r0
 8001ac2:	6021      	streq	r1, [r4, #0]
 8001ac4:	e7ed      	b.n	8001aa2 <_free_r+0x1e>
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	b10b      	cbz	r3, 8001ad0 <_free_r+0x4c>
 8001acc:	42a3      	cmp	r3, r4
 8001ace:	d9fa      	bls.n	8001ac6 <_free_r+0x42>
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	1850      	adds	r0, r2, r1
 8001ad4:	42a0      	cmp	r0, r4
 8001ad6:	d10b      	bne.n	8001af0 <_free_r+0x6c>
 8001ad8:	6820      	ldr	r0, [r4, #0]
 8001ada:	4401      	add	r1, r0
 8001adc:	1850      	adds	r0, r2, r1
 8001ade:	4283      	cmp	r3, r0
 8001ae0:	6011      	str	r1, [r2, #0]
 8001ae2:	d1e0      	bne.n	8001aa6 <_free_r+0x22>
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4401      	add	r1, r0
 8001aea:	6011      	str	r1, [r2, #0]
 8001aec:	6053      	str	r3, [r2, #4]
 8001aee:	e7da      	b.n	8001aa6 <_free_r+0x22>
 8001af0:	d902      	bls.n	8001af8 <_free_r+0x74>
 8001af2:	230c      	movs	r3, #12
 8001af4:	602b      	str	r3, [r5, #0]
 8001af6:	e7d6      	b.n	8001aa6 <_free_r+0x22>
 8001af8:	6820      	ldr	r0, [r4, #0]
 8001afa:	1821      	adds	r1, r4, r0
 8001afc:	428b      	cmp	r3, r1
 8001afe:	bf01      	itttt	eq
 8001b00:	6819      	ldreq	r1, [r3, #0]
 8001b02:	685b      	ldreq	r3, [r3, #4]
 8001b04:	1809      	addeq	r1, r1, r0
 8001b06:	6021      	streq	r1, [r4, #0]
 8001b08:	6063      	str	r3, [r4, #4]
 8001b0a:	6054      	str	r4, [r2, #4]
 8001b0c:	e7cb      	b.n	8001aa6 <_free_r+0x22>
 8001b0e:	bd38      	pop	{r3, r4, r5, pc}
 8001b10:	20000100 	.word	0x20000100

08001b14 <sbrk_aligned>:
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4e0e      	ldr	r6, [pc, #56]	; (8001b50 <sbrk_aligned+0x3c>)
 8001b18:	460c      	mov	r4, r1
 8001b1a:	6831      	ldr	r1, [r6, #0]
 8001b1c:	4605      	mov	r5, r0
 8001b1e:	b911      	cbnz	r1, 8001b26 <sbrk_aligned+0x12>
 8001b20:	f000 f902 	bl	8001d28 <_sbrk_r>
 8001b24:	6030      	str	r0, [r6, #0]
 8001b26:	4621      	mov	r1, r4
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f000 f8fd 	bl	8001d28 <_sbrk_r>
 8001b2e:	1c43      	adds	r3, r0, #1
 8001b30:	d00a      	beq.n	8001b48 <sbrk_aligned+0x34>
 8001b32:	1cc4      	adds	r4, r0, #3
 8001b34:	f024 0403 	bic.w	r4, r4, #3
 8001b38:	42a0      	cmp	r0, r4
 8001b3a:	d007      	beq.n	8001b4c <sbrk_aligned+0x38>
 8001b3c:	1a21      	subs	r1, r4, r0
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 f8f2 	bl	8001d28 <_sbrk_r>
 8001b44:	3001      	adds	r0, #1
 8001b46:	d101      	bne.n	8001b4c <sbrk_aligned+0x38>
 8001b48:	f04f 34ff 	mov.w	r4, #4294967295
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	20000104 	.word	0x20000104

08001b54 <_malloc_r>:
 8001b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b58:	1ccd      	adds	r5, r1, #3
 8001b5a:	f025 0503 	bic.w	r5, r5, #3
 8001b5e:	3508      	adds	r5, #8
 8001b60:	2d0c      	cmp	r5, #12
 8001b62:	bf38      	it	cc
 8001b64:	250c      	movcc	r5, #12
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	4607      	mov	r7, r0
 8001b6a:	db01      	blt.n	8001b70 <_malloc_r+0x1c>
 8001b6c:	42a9      	cmp	r1, r5
 8001b6e:	d905      	bls.n	8001b7c <_malloc_r+0x28>
 8001b70:	230c      	movs	r3, #12
 8001b72:	2600      	movs	r6, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4630      	mov	r0, r6
 8001b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b7c:	4e2e      	ldr	r6, [pc, #184]	; (8001c38 <_malloc_r+0xe4>)
 8001b7e:	f000 fbbf 	bl	8002300 <__malloc_lock>
 8001b82:	6833      	ldr	r3, [r6, #0]
 8001b84:	461c      	mov	r4, r3
 8001b86:	bb34      	cbnz	r4, 8001bd6 <_malloc_r+0x82>
 8001b88:	4629      	mov	r1, r5
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	f7ff ffc2 	bl	8001b14 <sbrk_aligned>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	4604      	mov	r4, r0
 8001b94:	d14d      	bne.n	8001c32 <_malloc_r+0xde>
 8001b96:	6834      	ldr	r4, [r6, #0]
 8001b98:	4626      	mov	r6, r4
 8001b9a:	2e00      	cmp	r6, #0
 8001b9c:	d140      	bne.n	8001c20 <_malloc_r+0xcc>
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	4631      	mov	r1, r6
 8001ba2:	4638      	mov	r0, r7
 8001ba4:	eb04 0803 	add.w	r8, r4, r3
 8001ba8:	f000 f8be 	bl	8001d28 <_sbrk_r>
 8001bac:	4580      	cmp	r8, r0
 8001bae:	d13a      	bne.n	8001c26 <_malloc_r+0xd2>
 8001bb0:	6821      	ldr	r1, [r4, #0]
 8001bb2:	3503      	adds	r5, #3
 8001bb4:	1a6d      	subs	r5, r5, r1
 8001bb6:	f025 0503 	bic.w	r5, r5, #3
 8001bba:	3508      	adds	r5, #8
 8001bbc:	2d0c      	cmp	r5, #12
 8001bbe:	bf38      	it	cc
 8001bc0:	250c      	movcc	r5, #12
 8001bc2:	4638      	mov	r0, r7
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7ff ffa5 	bl	8001b14 <sbrk_aligned>
 8001bca:	3001      	adds	r0, #1
 8001bcc:	d02b      	beq.n	8001c26 <_malloc_r+0xd2>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	442b      	add	r3, r5
 8001bd2:	6023      	str	r3, [r4, #0]
 8001bd4:	e00e      	b.n	8001bf4 <_malloc_r+0xa0>
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	1b52      	subs	r2, r2, r5
 8001bda:	d41e      	bmi.n	8001c1a <_malloc_r+0xc6>
 8001bdc:	2a0b      	cmp	r2, #11
 8001bde:	d916      	bls.n	8001c0e <_malloc_r+0xba>
 8001be0:	1961      	adds	r1, r4, r5
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	6025      	str	r5, [r4, #0]
 8001be6:	bf18      	it	ne
 8001be8:	6059      	strne	r1, [r3, #4]
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	bf08      	it	eq
 8001bee:	6031      	streq	r1, [r6, #0]
 8001bf0:	5162      	str	r2, [r4, r5]
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f104 060b 	add.w	r6, r4, #11
 8001bfa:	f000 fb87 	bl	800230c <__malloc_unlock>
 8001bfe:	f026 0607 	bic.w	r6, r6, #7
 8001c02:	1d23      	adds	r3, r4, #4
 8001c04:	1af2      	subs	r2, r6, r3
 8001c06:	d0b6      	beq.n	8001b76 <_malloc_r+0x22>
 8001c08:	1b9b      	subs	r3, r3, r6
 8001c0a:	50a3      	str	r3, [r4, r2]
 8001c0c:	e7b3      	b.n	8001b76 <_malloc_r+0x22>
 8001c0e:	6862      	ldr	r2, [r4, #4]
 8001c10:	42a3      	cmp	r3, r4
 8001c12:	bf0c      	ite	eq
 8001c14:	6032      	streq	r2, [r6, #0]
 8001c16:	605a      	strne	r2, [r3, #4]
 8001c18:	e7ec      	b.n	8001bf4 <_malloc_r+0xa0>
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	6864      	ldr	r4, [r4, #4]
 8001c1e:	e7b2      	b.n	8001b86 <_malloc_r+0x32>
 8001c20:	4634      	mov	r4, r6
 8001c22:	6876      	ldr	r6, [r6, #4]
 8001c24:	e7b9      	b.n	8001b9a <_malloc_r+0x46>
 8001c26:	230c      	movs	r3, #12
 8001c28:	4638      	mov	r0, r7
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	f000 fb6e 	bl	800230c <__malloc_unlock>
 8001c30:	e7a1      	b.n	8001b76 <_malloc_r+0x22>
 8001c32:	6025      	str	r5, [r4, #0]
 8001c34:	e7de      	b.n	8001bf4 <_malloc_r+0xa0>
 8001c36:	bf00      	nop
 8001c38:	20000100 	.word	0x20000100

08001c3c <_puts_r>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	460e      	mov	r6, r1
 8001c40:	4605      	mov	r5, r0
 8001c42:	b118      	cbz	r0, 8001c4c <_puts_r+0x10>
 8001c44:	6983      	ldr	r3, [r0, #24]
 8001c46:	b90b      	cbnz	r3, 8001c4c <_puts_r+0x10>
 8001c48:	f000 fa54 	bl	80020f4 <__sinit>
 8001c4c:	69ab      	ldr	r3, [r5, #24]
 8001c4e:	68ac      	ldr	r4, [r5, #8]
 8001c50:	b913      	cbnz	r3, 8001c58 <_puts_r+0x1c>
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 fa4e 	bl	80020f4 <__sinit>
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <_puts_r+0xd0>)
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	d120      	bne.n	8001ca0 <_puts_r+0x64>
 8001c5e:	686c      	ldr	r4, [r5, #4]
 8001c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c62:	07db      	lsls	r3, r3, #31
 8001c64:	d405      	bmi.n	8001c72 <_puts_r+0x36>
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	0598      	lsls	r0, r3, #22
 8001c6a:	d402      	bmi.n	8001c72 <_puts_r+0x36>
 8001c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c6e:	f000 fadf 	bl	8002230 <__retarget_lock_acquire_recursive>
 8001c72:	89a3      	ldrh	r3, [r4, #12]
 8001c74:	0719      	lsls	r1, r3, #28
 8001c76:	d51d      	bpl.n	8001cb4 <_puts_r+0x78>
 8001c78:	6923      	ldr	r3, [r4, #16]
 8001c7a:	b1db      	cbz	r3, 8001cb4 <_puts_r+0x78>
 8001c7c:	3e01      	subs	r6, #1
 8001c7e:	68a3      	ldr	r3, [r4, #8]
 8001c80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60a3      	str	r3, [r4, #8]
 8001c88:	bb39      	cbnz	r1, 8001cda <_puts_r+0x9e>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da38      	bge.n	8001d00 <_puts_r+0xc4>
 8001c8e:	4622      	mov	r2, r4
 8001c90:	210a      	movs	r1, #10
 8001c92:	4628      	mov	r0, r5
 8001c94:	f000 f858 	bl	8001d48 <__swbuf_r>
 8001c98:	3001      	adds	r0, #1
 8001c9a:	d011      	beq.n	8001cc0 <_puts_r+0x84>
 8001c9c:	250a      	movs	r5, #10
 8001c9e:	e011      	b.n	8001cc4 <_puts_r+0x88>
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <_puts_r+0xd4>)
 8001ca2:	429c      	cmp	r4, r3
 8001ca4:	d101      	bne.n	8001caa <_puts_r+0x6e>
 8001ca6:	68ac      	ldr	r4, [r5, #8]
 8001ca8:	e7da      	b.n	8001c60 <_puts_r+0x24>
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <_puts_r+0xd8>)
 8001cac:	429c      	cmp	r4, r3
 8001cae:	bf08      	it	eq
 8001cb0:	68ec      	ldreq	r4, [r5, #12]
 8001cb2:	e7d5      	b.n	8001c60 <_puts_r+0x24>
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	f000 f898 	bl	8001dec <__swsetup_r>
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d0dd      	beq.n	8001c7c <_puts_r+0x40>
 8001cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8001cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cc6:	07da      	lsls	r2, r3, #31
 8001cc8:	d405      	bmi.n	8001cd6 <_puts_r+0x9a>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	059b      	lsls	r3, r3, #22
 8001cce:	d402      	bmi.n	8001cd6 <_puts_r+0x9a>
 8001cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cd2:	f000 faae 	bl	8002232 <__retarget_lock_release_recursive>
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da04      	bge.n	8001ce8 <_puts_r+0xac>
 8001cde:	69a2      	ldr	r2, [r4, #24]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dc06      	bgt.n	8001cf2 <_puts_r+0xb6>
 8001ce4:	290a      	cmp	r1, #10
 8001ce6:	d004      	beq.n	8001cf2 <_puts_r+0xb6>
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	6022      	str	r2, [r4, #0]
 8001cee:	7019      	strb	r1, [r3, #0]
 8001cf0:	e7c5      	b.n	8001c7e <_puts_r+0x42>
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f000 f827 	bl	8001d48 <__swbuf_r>
 8001cfa:	3001      	adds	r0, #1
 8001cfc:	d1bf      	bne.n	8001c7e <_puts_r+0x42>
 8001cfe:	e7df      	b.n	8001cc0 <_puts_r+0x84>
 8001d00:	250a      	movs	r5, #10
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	6022      	str	r2, [r4, #0]
 8001d08:	701d      	strb	r5, [r3, #0]
 8001d0a:	e7db      	b.n	8001cc4 <_puts_r+0x88>
 8001d0c:	080024e0 	.word	0x080024e0
 8001d10:	08002500 	.word	0x08002500
 8001d14:	080024c0 	.word	0x080024c0

08001d18 <puts>:
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <puts+0xc>)
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	f7ff bf8d 	b.w	8001c3c <_puts_r>
 8001d22:	bf00      	nop
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <_sbrk_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4d05      	ldr	r5, [pc, #20]	; (8001d44 <_sbrk_r+0x1c>)
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	f7fe fc4a 	bl	80005cc <_sbrk>
 8001d38:	1c43      	adds	r3, r0, #1
 8001d3a:	d102      	bne.n	8001d42 <_sbrk_r+0x1a>
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	b103      	cbz	r3, 8001d42 <_sbrk_r+0x1a>
 8001d40:	6023      	str	r3, [r4, #0]
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	2000010c 	.word	0x2000010c

08001d48 <__swbuf_r>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	460e      	mov	r6, r1
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	4605      	mov	r5, r0
 8001d50:	b118      	cbz	r0, 8001d5a <__swbuf_r+0x12>
 8001d52:	6983      	ldr	r3, [r0, #24]
 8001d54:	b90b      	cbnz	r3, 8001d5a <__swbuf_r+0x12>
 8001d56:	f000 f9cd 	bl	80020f4 <__sinit>
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <__swbuf_r+0x98>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	d12b      	bne.n	8001db8 <__swbuf_r+0x70>
 8001d60:	686c      	ldr	r4, [r5, #4]
 8001d62:	69a3      	ldr	r3, [r4, #24]
 8001d64:	60a3      	str	r3, [r4, #8]
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	071a      	lsls	r2, r3, #28
 8001d6a:	d52f      	bpl.n	8001dcc <__swbuf_r+0x84>
 8001d6c:	6923      	ldr	r3, [r4, #16]
 8001d6e:	b36b      	cbz	r3, 8001dcc <__swbuf_r+0x84>
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	b2f6      	uxtb	r6, r6
 8001d76:	1ac0      	subs	r0, r0, r3
 8001d78:	6963      	ldr	r3, [r4, #20]
 8001d7a:	4637      	mov	r7, r6
 8001d7c:	4283      	cmp	r3, r0
 8001d7e:	dc04      	bgt.n	8001d8a <__swbuf_r+0x42>
 8001d80:	4621      	mov	r1, r4
 8001d82:	4628      	mov	r0, r5
 8001d84:	f000 f922 	bl	8001fcc <_fflush_r>
 8001d88:	bb30      	cbnz	r0, 8001dd8 <__swbuf_r+0x90>
 8001d8a:	68a3      	ldr	r3, [r4, #8]
 8001d8c:	3001      	adds	r0, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60a3      	str	r3, [r4, #8]
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	6022      	str	r2, [r4, #0]
 8001d98:	701e      	strb	r6, [r3, #0]
 8001d9a:	6963      	ldr	r3, [r4, #20]
 8001d9c:	4283      	cmp	r3, r0
 8001d9e:	d004      	beq.n	8001daa <__swbuf_r+0x62>
 8001da0:	89a3      	ldrh	r3, [r4, #12]
 8001da2:	07db      	lsls	r3, r3, #31
 8001da4:	d506      	bpl.n	8001db4 <__swbuf_r+0x6c>
 8001da6:	2e0a      	cmp	r6, #10
 8001da8:	d104      	bne.n	8001db4 <__swbuf_r+0x6c>
 8001daa:	4621      	mov	r1, r4
 8001dac:	4628      	mov	r0, r5
 8001dae:	f000 f90d 	bl	8001fcc <_fflush_r>
 8001db2:	b988      	cbnz	r0, 8001dd8 <__swbuf_r+0x90>
 8001db4:	4638      	mov	r0, r7
 8001db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <__swbuf_r+0x9c>)
 8001dba:	429c      	cmp	r4, r3
 8001dbc:	d101      	bne.n	8001dc2 <__swbuf_r+0x7a>
 8001dbe:	68ac      	ldr	r4, [r5, #8]
 8001dc0:	e7cf      	b.n	8001d62 <__swbuf_r+0x1a>
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <__swbuf_r+0xa0>)
 8001dc4:	429c      	cmp	r4, r3
 8001dc6:	bf08      	it	eq
 8001dc8:	68ec      	ldreq	r4, [r5, #12]
 8001dca:	e7ca      	b.n	8001d62 <__swbuf_r+0x1a>
 8001dcc:	4621      	mov	r1, r4
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f000 f80c 	bl	8001dec <__swsetup_r>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d0cb      	beq.n	8001d70 <__swbuf_r+0x28>
 8001dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8001ddc:	e7ea      	b.n	8001db4 <__swbuf_r+0x6c>
 8001dde:	bf00      	nop
 8001de0:	080024e0 	.word	0x080024e0
 8001de4:	08002500 	.word	0x08002500
 8001de8:	080024c0 	.word	0x080024c0

08001dec <__swsetup_r>:
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <__swsetup_r+0xcc>)
 8001dee:	b570      	push	{r4, r5, r6, lr}
 8001df0:	681d      	ldr	r5, [r3, #0]
 8001df2:	4606      	mov	r6, r0
 8001df4:	460c      	mov	r4, r1
 8001df6:	b125      	cbz	r5, 8001e02 <__swsetup_r+0x16>
 8001df8:	69ab      	ldr	r3, [r5, #24]
 8001dfa:	b913      	cbnz	r3, 8001e02 <__swsetup_r+0x16>
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f000 f979 	bl	80020f4 <__sinit>
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <__swsetup_r+0xd0>)
 8001e04:	429c      	cmp	r4, r3
 8001e06:	d10f      	bne.n	8001e28 <__swsetup_r+0x3c>
 8001e08:	686c      	ldr	r4, [r5, #4]
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e10:	0719      	lsls	r1, r3, #28
 8001e12:	d42c      	bmi.n	8001e6e <__swsetup_r+0x82>
 8001e14:	06dd      	lsls	r5, r3, #27
 8001e16:	d411      	bmi.n	8001e3c <__swsetup_r+0x50>
 8001e18:	2309      	movs	r3, #9
 8001e1a:	6033      	str	r3, [r6, #0]
 8001e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	81a3      	strh	r3, [r4, #12]
 8001e26:	e03e      	b.n	8001ea6 <__swsetup_r+0xba>
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <__swsetup_r+0xd4>)
 8001e2a:	429c      	cmp	r4, r3
 8001e2c:	d101      	bne.n	8001e32 <__swsetup_r+0x46>
 8001e2e:	68ac      	ldr	r4, [r5, #8]
 8001e30:	e7eb      	b.n	8001e0a <__swsetup_r+0x1e>
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <__swsetup_r+0xd8>)
 8001e34:	429c      	cmp	r4, r3
 8001e36:	bf08      	it	eq
 8001e38:	68ec      	ldreq	r4, [r5, #12]
 8001e3a:	e7e6      	b.n	8001e0a <__swsetup_r+0x1e>
 8001e3c:	0758      	lsls	r0, r3, #29
 8001e3e:	d512      	bpl.n	8001e66 <__swsetup_r+0x7a>
 8001e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e42:	b141      	cbz	r1, 8001e56 <__swsetup_r+0x6a>
 8001e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e48:	4299      	cmp	r1, r3
 8001e4a:	d002      	beq.n	8001e52 <__swsetup_r+0x66>
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f7ff fe19 	bl	8001a84 <_free_r>
 8001e52:	2300      	movs	r3, #0
 8001e54:	6363      	str	r3, [r4, #52]	; 0x34
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e5c:	81a3      	strh	r3, [r4, #12]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	6063      	str	r3, [r4, #4]
 8001e62:	6923      	ldr	r3, [r4, #16]
 8001e64:	6023      	str	r3, [r4, #0]
 8001e66:	89a3      	ldrh	r3, [r4, #12]
 8001e68:	f043 0308 	orr.w	r3, r3, #8
 8001e6c:	81a3      	strh	r3, [r4, #12]
 8001e6e:	6923      	ldr	r3, [r4, #16]
 8001e70:	b94b      	cbnz	r3, 8001e86 <__swsetup_r+0x9a>
 8001e72:	89a3      	ldrh	r3, [r4, #12]
 8001e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7c:	d003      	beq.n	8001e86 <__swsetup_r+0x9a>
 8001e7e:	4621      	mov	r1, r4
 8001e80:	4630      	mov	r0, r6
 8001e82:	f000 f9fd 	bl	8002280 <__smakebuf_r>
 8001e86:	89a0      	ldrh	r0, [r4, #12]
 8001e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e8c:	f010 0301 	ands.w	r3, r0, #1
 8001e90:	d00a      	beq.n	8001ea8 <__swsetup_r+0xbc>
 8001e92:	2300      	movs	r3, #0
 8001e94:	60a3      	str	r3, [r4, #8]
 8001e96:	6963      	ldr	r3, [r4, #20]
 8001e98:	425b      	negs	r3, r3
 8001e9a:	61a3      	str	r3, [r4, #24]
 8001e9c:	6923      	ldr	r3, [r4, #16]
 8001e9e:	b943      	cbnz	r3, 8001eb2 <__swsetup_r+0xc6>
 8001ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ea4:	d1ba      	bne.n	8001e1c <__swsetup_r+0x30>
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
 8001ea8:	0781      	lsls	r1, r0, #30
 8001eaa:	bf58      	it	pl
 8001eac:	6963      	ldrpl	r3, [r4, #20]
 8001eae:	60a3      	str	r3, [r4, #8]
 8001eb0:	e7f4      	b.n	8001e9c <__swsetup_r+0xb0>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	e7f7      	b.n	8001ea6 <__swsetup_r+0xba>
 8001eb6:	bf00      	nop
 8001eb8:	2000000c 	.word	0x2000000c
 8001ebc:	080024e0 	.word	0x080024e0
 8001ec0:	08002500 	.word	0x08002500
 8001ec4:	080024c0 	.word	0x080024c0

08001ec8 <__sflush_r>:
 8001ec8:	898a      	ldrh	r2, [r1, #12]
 8001eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ecc:	4605      	mov	r5, r0
 8001ece:	0710      	lsls	r0, r2, #28
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	d457      	bmi.n	8001f84 <__sflush_r+0xbc>
 8001ed4:	684b      	ldr	r3, [r1, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	dc04      	bgt.n	8001ee4 <__sflush_r+0x1c>
 8001eda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	dc01      	bgt.n	8001ee4 <__sflush_r+0x1c>
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d0fa      	beq.n	8001ee0 <__sflush_r+0x18>
 8001eea:	2300      	movs	r3, #0
 8001eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ef0:	682f      	ldr	r7, [r5, #0]
 8001ef2:	602b      	str	r3, [r5, #0]
 8001ef4:	d032      	beq.n	8001f5c <__sflush_r+0x94>
 8001ef6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	075a      	lsls	r2, r3, #29
 8001efc:	d505      	bpl.n	8001f0a <__sflush_r+0x42>
 8001efe:	6863      	ldr	r3, [r4, #4]
 8001f00:	1ac0      	subs	r0, r0, r3
 8001f02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f04:	b10b      	cbz	r3, 8001f0a <__sflush_r+0x42>
 8001f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f08:	1ac0      	subs	r0, r0, r3
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f10:	4628      	mov	r0, r5
 8001f12:	6a21      	ldr	r1, [r4, #32]
 8001f14:	47b0      	blx	r6
 8001f16:	1c43      	adds	r3, r0, #1
 8001f18:	89a3      	ldrh	r3, [r4, #12]
 8001f1a:	d106      	bne.n	8001f2a <__sflush_r+0x62>
 8001f1c:	6829      	ldr	r1, [r5, #0]
 8001f1e:	291d      	cmp	r1, #29
 8001f20:	d82c      	bhi.n	8001f7c <__sflush_r+0xb4>
 8001f22:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <__sflush_r+0x100>)
 8001f24:	40ca      	lsrs	r2, r1
 8001f26:	07d6      	lsls	r6, r2, #31
 8001f28:	d528      	bpl.n	8001f7c <__sflush_r+0xb4>
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6062      	str	r2, [r4, #4]
 8001f2e:	6922      	ldr	r2, [r4, #16]
 8001f30:	04d9      	lsls	r1, r3, #19
 8001f32:	6022      	str	r2, [r4, #0]
 8001f34:	d504      	bpl.n	8001f40 <__sflush_r+0x78>
 8001f36:	1c42      	adds	r2, r0, #1
 8001f38:	d101      	bne.n	8001f3e <__sflush_r+0x76>
 8001f3a:	682b      	ldr	r3, [r5, #0]
 8001f3c:	b903      	cbnz	r3, 8001f40 <__sflush_r+0x78>
 8001f3e:	6560      	str	r0, [r4, #84]	; 0x54
 8001f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f42:	602f      	str	r7, [r5, #0]
 8001f44:	2900      	cmp	r1, #0
 8001f46:	d0cb      	beq.n	8001ee0 <__sflush_r+0x18>
 8001f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f4c:	4299      	cmp	r1, r3
 8001f4e:	d002      	beq.n	8001f56 <__sflush_r+0x8e>
 8001f50:	4628      	mov	r0, r5
 8001f52:	f7ff fd97 	bl	8001a84 <_free_r>
 8001f56:	2000      	movs	r0, #0
 8001f58:	6360      	str	r0, [r4, #52]	; 0x34
 8001f5a:	e7c2      	b.n	8001ee2 <__sflush_r+0x1a>
 8001f5c:	6a21      	ldr	r1, [r4, #32]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4628      	mov	r0, r5
 8001f62:	47b0      	blx	r6
 8001f64:	1c41      	adds	r1, r0, #1
 8001f66:	d1c7      	bne.n	8001ef8 <__sflush_r+0x30>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0c4      	beq.n	8001ef8 <__sflush_r+0x30>
 8001f6e:	2b1d      	cmp	r3, #29
 8001f70:	d001      	beq.n	8001f76 <__sflush_r+0xae>
 8001f72:	2b16      	cmp	r3, #22
 8001f74:	d101      	bne.n	8001f7a <__sflush_r+0xb2>
 8001f76:	602f      	str	r7, [r5, #0]
 8001f78:	e7b2      	b.n	8001ee0 <__sflush_r+0x18>
 8001f7a:	89a3      	ldrh	r3, [r4, #12]
 8001f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f80:	81a3      	strh	r3, [r4, #12]
 8001f82:	e7ae      	b.n	8001ee2 <__sflush_r+0x1a>
 8001f84:	690f      	ldr	r7, [r1, #16]
 8001f86:	2f00      	cmp	r7, #0
 8001f88:	d0aa      	beq.n	8001ee0 <__sflush_r+0x18>
 8001f8a:	0793      	lsls	r3, r2, #30
 8001f8c:	bf18      	it	ne
 8001f8e:	2300      	movne	r3, #0
 8001f90:	680e      	ldr	r6, [r1, #0]
 8001f92:	bf08      	it	eq
 8001f94:	694b      	ldreq	r3, [r1, #20]
 8001f96:	1bf6      	subs	r6, r6, r7
 8001f98:	600f      	str	r7, [r1, #0]
 8001f9a:	608b      	str	r3, [r1, #8]
 8001f9c:	2e00      	cmp	r6, #0
 8001f9e:	dd9f      	ble.n	8001ee0 <__sflush_r+0x18>
 8001fa0:	4633      	mov	r3, r6
 8001fa2:	463a      	mov	r2, r7
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	6a21      	ldr	r1, [r4, #32]
 8001fa8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fac:	47e0      	blx	ip
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	dc06      	bgt.n	8001fc0 <__sflush_r+0xf8>
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fbc:	81a3      	strh	r3, [r4, #12]
 8001fbe:	e790      	b.n	8001ee2 <__sflush_r+0x1a>
 8001fc0:	4407      	add	r7, r0
 8001fc2:	1a36      	subs	r6, r6, r0
 8001fc4:	e7ea      	b.n	8001f9c <__sflush_r+0xd4>
 8001fc6:	bf00      	nop
 8001fc8:	20400001 	.word	0x20400001

08001fcc <_fflush_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	690b      	ldr	r3, [r1, #16]
 8001fd0:	4605      	mov	r5, r0
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	b913      	cbnz	r3, 8001fdc <_fflush_r+0x10>
 8001fd6:	2500      	movs	r5, #0
 8001fd8:	4628      	mov	r0, r5
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	b118      	cbz	r0, 8001fe6 <_fflush_r+0x1a>
 8001fde:	6983      	ldr	r3, [r0, #24]
 8001fe0:	b90b      	cbnz	r3, 8001fe6 <_fflush_r+0x1a>
 8001fe2:	f000 f887 	bl	80020f4 <__sinit>
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <_fflush_r+0x6c>)
 8001fe8:	429c      	cmp	r4, r3
 8001fea:	d11b      	bne.n	8002024 <_fflush_r+0x58>
 8001fec:	686c      	ldr	r4, [r5, #4]
 8001fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ef      	beq.n	8001fd6 <_fflush_r+0xa>
 8001ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ff8:	07d0      	lsls	r0, r2, #31
 8001ffa:	d404      	bmi.n	8002006 <_fflush_r+0x3a>
 8001ffc:	0599      	lsls	r1, r3, #22
 8001ffe:	d402      	bmi.n	8002006 <_fflush_r+0x3a>
 8002000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002002:	f000 f915 	bl	8002230 <__retarget_lock_acquire_recursive>
 8002006:	4628      	mov	r0, r5
 8002008:	4621      	mov	r1, r4
 800200a:	f7ff ff5d 	bl	8001ec8 <__sflush_r>
 800200e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002010:	4605      	mov	r5, r0
 8002012:	07da      	lsls	r2, r3, #31
 8002014:	d4e0      	bmi.n	8001fd8 <_fflush_r+0xc>
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	059b      	lsls	r3, r3, #22
 800201a:	d4dd      	bmi.n	8001fd8 <_fflush_r+0xc>
 800201c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800201e:	f000 f908 	bl	8002232 <__retarget_lock_release_recursive>
 8002022:	e7d9      	b.n	8001fd8 <_fflush_r+0xc>
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <_fflush_r+0x70>)
 8002026:	429c      	cmp	r4, r3
 8002028:	d101      	bne.n	800202e <_fflush_r+0x62>
 800202a:	68ac      	ldr	r4, [r5, #8]
 800202c:	e7df      	b.n	8001fee <_fflush_r+0x22>
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <_fflush_r+0x74>)
 8002030:	429c      	cmp	r4, r3
 8002032:	bf08      	it	eq
 8002034:	68ec      	ldreq	r4, [r5, #12]
 8002036:	e7da      	b.n	8001fee <_fflush_r+0x22>
 8002038:	080024e0 	.word	0x080024e0
 800203c:	08002500 	.word	0x08002500
 8002040:	080024c0 	.word	0x080024c0

08002044 <std>:
 8002044:	2300      	movs	r3, #0
 8002046:	b510      	push	{r4, lr}
 8002048:	4604      	mov	r4, r0
 800204a:	e9c0 3300 	strd	r3, r3, [r0]
 800204e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002052:	6083      	str	r3, [r0, #8]
 8002054:	8181      	strh	r1, [r0, #12]
 8002056:	6643      	str	r3, [r0, #100]	; 0x64
 8002058:	81c2      	strh	r2, [r0, #14]
 800205a:	6183      	str	r3, [r0, #24]
 800205c:	4619      	mov	r1, r3
 800205e:	2208      	movs	r2, #8
 8002060:	305c      	adds	r0, #92	; 0x5c
 8002062:	f7ff fd07 	bl	8001a74 <memset>
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <std+0x38>)
 8002068:	6224      	str	r4, [r4, #32]
 800206a:	6263      	str	r3, [r4, #36]	; 0x24
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <std+0x3c>)
 800206e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <std+0x40>)
 8002072:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <std+0x44>)
 8002076:	6323      	str	r3, [r4, #48]	; 0x30
 8002078:	bd10      	pop	{r4, pc}
 800207a:	bf00      	nop
 800207c:	08002319 	.word	0x08002319
 8002080:	0800233b 	.word	0x0800233b
 8002084:	08002373 	.word	0x08002373
 8002088:	08002397 	.word	0x08002397

0800208c <_cleanup_r>:
 800208c:	4901      	ldr	r1, [pc, #4]	; (8002094 <_cleanup_r+0x8>)
 800208e:	f000 b8af 	b.w	80021f0 <_fwalk_reent>
 8002092:	bf00      	nop
 8002094:	08001fcd 	.word	0x08001fcd

08002098 <__sfmoreglue>:
 8002098:	2268      	movs	r2, #104	; 0x68
 800209a:	b570      	push	{r4, r5, r6, lr}
 800209c:	1e4d      	subs	r5, r1, #1
 800209e:	4355      	muls	r5, r2
 80020a0:	460e      	mov	r6, r1
 80020a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020a6:	f7ff fd55 	bl	8001b54 <_malloc_r>
 80020aa:	4604      	mov	r4, r0
 80020ac:	b140      	cbz	r0, 80020c0 <__sfmoreglue+0x28>
 80020ae:	2100      	movs	r1, #0
 80020b0:	e9c0 1600 	strd	r1, r6, [r0]
 80020b4:	300c      	adds	r0, #12
 80020b6:	60a0      	str	r0, [r4, #8]
 80020b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020bc:	f7ff fcda 	bl	8001a74 <memset>
 80020c0:	4620      	mov	r0, r4
 80020c2:	bd70      	pop	{r4, r5, r6, pc}

080020c4 <__sfp_lock_acquire>:
 80020c4:	4801      	ldr	r0, [pc, #4]	; (80020cc <__sfp_lock_acquire+0x8>)
 80020c6:	f000 b8b3 	b.w	8002230 <__retarget_lock_acquire_recursive>
 80020ca:	bf00      	nop
 80020cc:	20000109 	.word	0x20000109

080020d0 <__sfp_lock_release>:
 80020d0:	4801      	ldr	r0, [pc, #4]	; (80020d8 <__sfp_lock_release+0x8>)
 80020d2:	f000 b8ae 	b.w	8002232 <__retarget_lock_release_recursive>
 80020d6:	bf00      	nop
 80020d8:	20000109 	.word	0x20000109

080020dc <__sinit_lock_acquire>:
 80020dc:	4801      	ldr	r0, [pc, #4]	; (80020e4 <__sinit_lock_acquire+0x8>)
 80020de:	f000 b8a7 	b.w	8002230 <__retarget_lock_acquire_recursive>
 80020e2:	bf00      	nop
 80020e4:	2000010a 	.word	0x2000010a

080020e8 <__sinit_lock_release>:
 80020e8:	4801      	ldr	r0, [pc, #4]	; (80020f0 <__sinit_lock_release+0x8>)
 80020ea:	f000 b8a2 	b.w	8002232 <__retarget_lock_release_recursive>
 80020ee:	bf00      	nop
 80020f0:	2000010a 	.word	0x2000010a

080020f4 <__sinit>:
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	f7ff fff0 	bl	80020dc <__sinit_lock_acquire>
 80020fc:	69a3      	ldr	r3, [r4, #24]
 80020fe:	b11b      	cbz	r3, 8002108 <__sinit+0x14>
 8002100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002104:	f7ff bff0 	b.w	80020e8 <__sinit_lock_release>
 8002108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800210c:	6523      	str	r3, [r4, #80]	; 0x50
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <__sinit+0x68>)
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <__sinit+0x6c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	62a2      	str	r2, [r4, #40]	; 0x28
 8002116:	42a3      	cmp	r3, r4
 8002118:	bf08      	it	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	4620      	mov	r0, r4
 800211e:	bf08      	it	eq
 8002120:	61a3      	streq	r3, [r4, #24]
 8002122:	f000 f81f 	bl	8002164 <__sfp>
 8002126:	6060      	str	r0, [r4, #4]
 8002128:	4620      	mov	r0, r4
 800212a:	f000 f81b 	bl	8002164 <__sfp>
 800212e:	60a0      	str	r0, [r4, #8]
 8002130:	4620      	mov	r0, r4
 8002132:	f000 f817 	bl	8002164 <__sfp>
 8002136:	2200      	movs	r2, #0
 8002138:	2104      	movs	r1, #4
 800213a:	60e0      	str	r0, [r4, #12]
 800213c:	6860      	ldr	r0, [r4, #4]
 800213e:	f7ff ff81 	bl	8002044 <std>
 8002142:	2201      	movs	r2, #1
 8002144:	2109      	movs	r1, #9
 8002146:	68a0      	ldr	r0, [r4, #8]
 8002148:	f7ff ff7c 	bl	8002044 <std>
 800214c:	2202      	movs	r2, #2
 800214e:	2112      	movs	r1, #18
 8002150:	68e0      	ldr	r0, [r4, #12]
 8002152:	f7ff ff77 	bl	8002044 <std>
 8002156:	2301      	movs	r3, #1
 8002158:	61a3      	str	r3, [r4, #24]
 800215a:	e7d1      	b.n	8002100 <__sinit+0xc>
 800215c:	080024bc 	.word	0x080024bc
 8002160:	0800208d 	.word	0x0800208d

08002164 <__sfp>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	4607      	mov	r7, r0
 8002168:	f7ff ffac 	bl	80020c4 <__sfp_lock_acquire>
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <__sfp+0x84>)
 800216e:	681e      	ldr	r6, [r3, #0]
 8002170:	69b3      	ldr	r3, [r6, #24]
 8002172:	b913      	cbnz	r3, 800217a <__sfp+0x16>
 8002174:	4630      	mov	r0, r6
 8002176:	f7ff ffbd 	bl	80020f4 <__sinit>
 800217a:	3648      	adds	r6, #72	; 0x48
 800217c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002180:	3b01      	subs	r3, #1
 8002182:	d503      	bpl.n	800218c <__sfp+0x28>
 8002184:	6833      	ldr	r3, [r6, #0]
 8002186:	b30b      	cbz	r3, 80021cc <__sfp+0x68>
 8002188:	6836      	ldr	r6, [r6, #0]
 800218a:	e7f7      	b.n	800217c <__sfp+0x18>
 800218c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002190:	b9d5      	cbnz	r5, 80021c8 <__sfp+0x64>
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <__sfp+0x88>)
 8002194:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002198:	60e3      	str	r3, [r4, #12]
 800219a:	6665      	str	r5, [r4, #100]	; 0x64
 800219c:	f000 f847 	bl	800222e <__retarget_lock_init_recursive>
 80021a0:	f7ff ff96 	bl	80020d0 <__sfp_lock_release>
 80021a4:	2208      	movs	r2, #8
 80021a6:	4629      	mov	r1, r5
 80021a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021b0:	6025      	str	r5, [r4, #0]
 80021b2:	61a5      	str	r5, [r4, #24]
 80021b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021b8:	f7ff fc5c 	bl	8001a74 <memset>
 80021bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80021c4:	4620      	mov	r0, r4
 80021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c8:	3468      	adds	r4, #104	; 0x68
 80021ca:	e7d9      	b.n	8002180 <__sfp+0x1c>
 80021cc:	2104      	movs	r1, #4
 80021ce:	4638      	mov	r0, r7
 80021d0:	f7ff ff62 	bl	8002098 <__sfmoreglue>
 80021d4:	4604      	mov	r4, r0
 80021d6:	6030      	str	r0, [r6, #0]
 80021d8:	2800      	cmp	r0, #0
 80021da:	d1d5      	bne.n	8002188 <__sfp+0x24>
 80021dc:	f7ff ff78 	bl	80020d0 <__sfp_lock_release>
 80021e0:	230c      	movs	r3, #12
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	e7ee      	b.n	80021c4 <__sfp+0x60>
 80021e6:	bf00      	nop
 80021e8:	080024bc 	.word	0x080024bc
 80021ec:	ffff0001 	.word	0xffff0001

080021f0 <_fwalk_reent>:
 80021f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021f4:	4606      	mov	r6, r0
 80021f6:	4688      	mov	r8, r1
 80021f8:	2700      	movs	r7, #0
 80021fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002202:	f1b9 0901 	subs.w	r9, r9, #1
 8002206:	d505      	bpl.n	8002214 <_fwalk_reent+0x24>
 8002208:	6824      	ldr	r4, [r4, #0]
 800220a:	2c00      	cmp	r4, #0
 800220c:	d1f7      	bne.n	80021fe <_fwalk_reent+0xe>
 800220e:	4638      	mov	r0, r7
 8002210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002214:	89ab      	ldrh	r3, [r5, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d907      	bls.n	800222a <_fwalk_reent+0x3a>
 800221a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800221e:	3301      	adds	r3, #1
 8002220:	d003      	beq.n	800222a <_fwalk_reent+0x3a>
 8002222:	4629      	mov	r1, r5
 8002224:	4630      	mov	r0, r6
 8002226:	47c0      	blx	r8
 8002228:	4307      	orrs	r7, r0
 800222a:	3568      	adds	r5, #104	; 0x68
 800222c:	e7e9      	b.n	8002202 <_fwalk_reent+0x12>

0800222e <__retarget_lock_init_recursive>:
 800222e:	4770      	bx	lr

08002230 <__retarget_lock_acquire_recursive>:
 8002230:	4770      	bx	lr

08002232 <__retarget_lock_release_recursive>:
 8002232:	4770      	bx	lr

08002234 <__swhatbuf_r>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	460e      	mov	r6, r1
 8002238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800223c:	4614      	mov	r4, r2
 800223e:	2900      	cmp	r1, #0
 8002240:	461d      	mov	r5, r3
 8002242:	b096      	sub	sp, #88	; 0x58
 8002244:	da08      	bge.n	8002258 <__swhatbuf_r+0x24>
 8002246:	2200      	movs	r2, #0
 8002248:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800224c:	602a      	str	r2, [r5, #0]
 800224e:	061a      	lsls	r2, r3, #24
 8002250:	d410      	bmi.n	8002274 <__swhatbuf_r+0x40>
 8002252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002256:	e00e      	b.n	8002276 <__swhatbuf_r+0x42>
 8002258:	466a      	mov	r2, sp
 800225a:	f000 f8c3 	bl	80023e4 <_fstat_r>
 800225e:	2800      	cmp	r0, #0
 8002260:	dbf1      	blt.n	8002246 <__swhatbuf_r+0x12>
 8002262:	9a01      	ldr	r2, [sp, #4]
 8002264:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002268:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800226c:	425a      	negs	r2, r3
 800226e:	415a      	adcs	r2, r3
 8002270:	602a      	str	r2, [r5, #0]
 8002272:	e7ee      	b.n	8002252 <__swhatbuf_r+0x1e>
 8002274:	2340      	movs	r3, #64	; 0x40
 8002276:	2000      	movs	r0, #0
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	b016      	add	sp, #88	; 0x58
 800227c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002280 <__smakebuf_r>:
 8002280:	898b      	ldrh	r3, [r1, #12]
 8002282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002284:	079d      	lsls	r5, r3, #30
 8002286:	4606      	mov	r6, r0
 8002288:	460c      	mov	r4, r1
 800228a:	d507      	bpl.n	800229c <__smakebuf_r+0x1c>
 800228c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	6123      	str	r3, [r4, #16]
 8002294:	2301      	movs	r3, #1
 8002296:	6163      	str	r3, [r4, #20]
 8002298:	b002      	add	sp, #8
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	466a      	mov	r2, sp
 800229e:	ab01      	add	r3, sp, #4
 80022a0:	f7ff ffc8 	bl	8002234 <__swhatbuf_r>
 80022a4:	9900      	ldr	r1, [sp, #0]
 80022a6:	4605      	mov	r5, r0
 80022a8:	4630      	mov	r0, r6
 80022aa:	f7ff fc53 	bl	8001b54 <_malloc_r>
 80022ae:	b948      	cbnz	r0, 80022c4 <__smakebuf_r+0x44>
 80022b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022b4:	059a      	lsls	r2, r3, #22
 80022b6:	d4ef      	bmi.n	8002298 <__smakebuf_r+0x18>
 80022b8:	f023 0303 	bic.w	r3, r3, #3
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	81a3      	strh	r3, [r4, #12]
 80022c2:	e7e3      	b.n	800228c <__smakebuf_r+0xc>
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <__smakebuf_r+0x7c>)
 80022c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	6020      	str	r0, [r4, #0]
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	81a3      	strh	r3, [r4, #12]
 80022d2:	9b00      	ldr	r3, [sp, #0]
 80022d4:	6120      	str	r0, [r4, #16]
 80022d6:	6163      	str	r3, [r4, #20]
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	b15b      	cbz	r3, 80022f4 <__smakebuf_r+0x74>
 80022dc:	4630      	mov	r0, r6
 80022de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022e2:	f000 f891 	bl	8002408 <_isatty_r>
 80022e6:	b128      	cbz	r0, 80022f4 <__smakebuf_r+0x74>
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	81a3      	strh	r3, [r4, #12]
 80022f4:	89a0      	ldrh	r0, [r4, #12]
 80022f6:	4305      	orrs	r5, r0
 80022f8:	81a5      	strh	r5, [r4, #12]
 80022fa:	e7cd      	b.n	8002298 <__smakebuf_r+0x18>
 80022fc:	0800208d 	.word	0x0800208d

08002300 <__malloc_lock>:
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <__malloc_lock+0x8>)
 8002302:	f7ff bf95 	b.w	8002230 <__retarget_lock_acquire_recursive>
 8002306:	bf00      	nop
 8002308:	20000108 	.word	0x20000108

0800230c <__malloc_unlock>:
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <__malloc_unlock+0x8>)
 800230e:	f7ff bf90 	b.w	8002232 <__retarget_lock_release_recursive>
 8002312:	bf00      	nop
 8002314:	20000108 	.word	0x20000108

08002318 <__sread>:
 8002318:	b510      	push	{r4, lr}
 800231a:	460c      	mov	r4, r1
 800231c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002320:	f000 f894 	bl	800244c <_read_r>
 8002324:	2800      	cmp	r0, #0
 8002326:	bfab      	itete	ge
 8002328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800232a:	89a3      	ldrhlt	r3, [r4, #12]
 800232c:	181b      	addge	r3, r3, r0
 800232e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002332:	bfac      	ite	ge
 8002334:	6563      	strge	r3, [r4, #84]	; 0x54
 8002336:	81a3      	strhlt	r3, [r4, #12]
 8002338:	bd10      	pop	{r4, pc}

0800233a <__swrite>:
 800233a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800233e:	461f      	mov	r7, r3
 8002340:	898b      	ldrh	r3, [r1, #12]
 8002342:	4605      	mov	r5, r0
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	460c      	mov	r4, r1
 8002348:	4616      	mov	r6, r2
 800234a:	d505      	bpl.n	8002358 <__swrite+0x1e>
 800234c:	2302      	movs	r3, #2
 800234e:	2200      	movs	r2, #0
 8002350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002354:	f000 f868 	bl	8002428 <_lseek_r>
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	4632      	mov	r2, r6
 800235c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002360:	81a3      	strh	r3, [r4, #12]
 8002362:	4628      	mov	r0, r5
 8002364:	463b      	mov	r3, r7
 8002366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800236a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800236e:	f000 b817 	b.w	80023a0 <_write_r>

08002372 <__sseek>:
 8002372:	b510      	push	{r4, lr}
 8002374:	460c      	mov	r4, r1
 8002376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800237a:	f000 f855 	bl	8002428 <_lseek_r>
 800237e:	1c43      	adds	r3, r0, #1
 8002380:	89a3      	ldrh	r3, [r4, #12]
 8002382:	bf15      	itete	ne
 8002384:	6560      	strne	r0, [r4, #84]	; 0x54
 8002386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800238a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800238e:	81a3      	strheq	r3, [r4, #12]
 8002390:	bf18      	it	ne
 8002392:	81a3      	strhne	r3, [r4, #12]
 8002394:	bd10      	pop	{r4, pc}

08002396 <__sclose>:
 8002396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800239a:	f000 b813 	b.w	80023c4 <_close_r>
	...

080023a0 <_write_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4604      	mov	r4, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	2200      	movs	r2, #0
 80023aa:	4d05      	ldr	r5, [pc, #20]	; (80023c0 <_write_r+0x20>)
 80023ac:	602a      	str	r2, [r5, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7fd ffce 	bl	8000350 <_write>
 80023b4:	1c43      	adds	r3, r0, #1
 80023b6:	d102      	bne.n	80023be <_write_r+0x1e>
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	b103      	cbz	r3, 80023be <_write_r+0x1e>
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	2000010c 	.word	0x2000010c

080023c4 <_close_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	2300      	movs	r3, #0
 80023c8:	4d05      	ldr	r5, [pc, #20]	; (80023e0 <_close_r+0x1c>)
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	602b      	str	r3, [r5, #0]
 80023d0:	f7fe f8cc 	bl	800056c <_close>
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d102      	bne.n	80023de <_close_r+0x1a>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	b103      	cbz	r3, 80023de <_close_r+0x1a>
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	2000010c 	.word	0x2000010c

080023e4 <_fstat_r>:
 80023e4:	b538      	push	{r3, r4, r5, lr}
 80023e6:	2300      	movs	r3, #0
 80023e8:	4d06      	ldr	r5, [pc, #24]	; (8002404 <_fstat_r+0x20>)
 80023ea:	4604      	mov	r4, r0
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	602b      	str	r3, [r5, #0]
 80023f2:	f7fe f8c6 	bl	8000582 <_fstat>
 80023f6:	1c43      	adds	r3, r0, #1
 80023f8:	d102      	bne.n	8002400 <_fstat_r+0x1c>
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	b103      	cbz	r3, 8002400 <_fstat_r+0x1c>
 80023fe:	6023      	str	r3, [r4, #0]
 8002400:	bd38      	pop	{r3, r4, r5, pc}
 8002402:	bf00      	nop
 8002404:	2000010c 	.word	0x2000010c

08002408 <_isatty_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	2300      	movs	r3, #0
 800240c:	4d05      	ldr	r5, [pc, #20]	; (8002424 <_isatty_r+0x1c>)
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	602b      	str	r3, [r5, #0]
 8002414:	f7fe f8c4 	bl	80005a0 <_isatty>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d102      	bne.n	8002422 <_isatty_r+0x1a>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b103      	cbz	r3, 8002422 <_isatty_r+0x1a>
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	2000010c 	.word	0x2000010c

08002428 <_lseek_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4604      	mov	r4, r0
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	2200      	movs	r2, #0
 8002432:	4d05      	ldr	r5, [pc, #20]	; (8002448 <_lseek_r+0x20>)
 8002434:	602a      	str	r2, [r5, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f7fe f8bc 	bl	80005b4 <_lseek>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d102      	bne.n	8002446 <_lseek_r+0x1e>
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	b103      	cbz	r3, 8002446 <_lseek_r+0x1e>
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	bd38      	pop	{r3, r4, r5, pc}
 8002448:	2000010c 	.word	0x2000010c

0800244c <_read_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	2200      	movs	r2, #0
 8002456:	4d05      	ldr	r5, [pc, #20]	; (800246c <_read_r+0x20>)
 8002458:	602a      	str	r2, [r5, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	f7fe f869 	bl	8000532 <_read>
 8002460:	1c43      	adds	r3, r0, #1
 8002462:	d102      	bne.n	800246a <_read_r+0x1e>
 8002464:	682b      	ldr	r3, [r5, #0]
 8002466:	b103      	cbz	r3, 800246a <_read_r+0x1e>
 8002468:	6023      	str	r3, [r4, #0]
 800246a:	bd38      	pop	{r3, r4, r5, pc}
 800246c:	2000010c 	.word	0x2000010c

08002470 <_init>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	bf00      	nop
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr

0800247c <_fini>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	bf00      	nop
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr
